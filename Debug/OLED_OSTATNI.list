
OLED_OSTATNI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000109f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c40  08010b80  08010b80  00020b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080117c0  080117c0  00030098  2**0
                  CONTENTS
  4 .ARM          00000008  080117c0  080117c0  000217c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080117c8  080117c8  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080117c8  080117c8  000217c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080117cc  080117cc  000217cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080117d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002070  20000098  08011868  00030098  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20002108  08011868  00032108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000349cd  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006928  00000000  00000000  00064a95  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ef0  00000000  00000000  0006b3c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c00  00000000  00000000  0006d2b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ab74  00000000  00000000  0006eeb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00023512  00000000  00000000  00099a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000da75b  00000000  00000000  000bcf36  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00197691  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008294  00000000  00000000  0019770c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010b68 	.word	0x08010b68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	08010b68 	.word	0x08010b68

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b972 	b.w	8000da8 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	4688      	mov	r8, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14b      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4615      	mov	r5, r2
 8000aee:	d967      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0720 	rsb	r7, r2, #32
 8000afa:	fa01 f302 	lsl.w	r3, r1, r2
 8000afe:	fa20 f707 	lsr.w	r7, r0, r7
 8000b02:	4095      	lsls	r5, r2
 8000b04:	ea47 0803 	orr.w	r8, r7, r3
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b14:	fa1f fc85 	uxth.w	ip, r5
 8000b18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b20:	fb07 f10c 	mul.w	r1, r7, ip
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18eb      	adds	r3, r5, r3
 8000b2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b2e:	f080 811b 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8118 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b38:	3f02      	subs	r7, #2
 8000b3a:	442b      	add	r3, r5
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b50:	45a4      	cmp	ip, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	192c      	adds	r4, r5, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5a:	f080 8107 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b5e:	45a4      	cmp	ip, r4
 8000b60:	f240 8104 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b64:	3802      	subs	r0, #2
 8000b66:	442c      	add	r4, r5
 8000b68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b6c:	eba4 040c 	sub.w	r4, r4, ip
 8000b70:	2700      	movs	r7, #0
 8000b72:	b11e      	cbz	r6, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7c:	4639      	mov	r1, r7
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d909      	bls.n	8000b9a <__udivmoddi4+0xbe>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80eb 	beq.w	8000d62 <__udivmoddi4+0x286>
 8000b8c:	2700      	movs	r7, #0
 8000b8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b92:	4638      	mov	r0, r7
 8000b94:	4639      	mov	r1, r7
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	fab3 f783 	clz	r7, r3
 8000b9e:	2f00      	cmp	r7, #0
 8000ba0:	d147      	bne.n	8000c32 <__udivmoddi4+0x156>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d302      	bcc.n	8000bac <__udivmoddi4+0xd0>
 8000ba6:	4282      	cmp	r2, r0
 8000ba8:	f200 80fa 	bhi.w	8000da0 <__udivmoddi4+0x2c4>
 8000bac:	1a84      	subs	r4, r0, r2
 8000bae:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d0e0      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000bba:	e9c6 4800 	strd	r4, r8, [r6]
 8000bbe:	e7dd      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000bc0:	b902      	cbnz	r2, 8000bc4 <__udivmoddi4+0xe8>
 8000bc2:	deff      	udf	#255	; 0xff
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	f040 808f 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bce:	1b49      	subs	r1, r1, r5
 8000bd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bd4:	fa1f f885 	uxth.w	r8, r5
 8000bd8:	2701      	movs	r7, #1
 8000bda:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000be4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bec:	4299      	cmp	r1, r3
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4299      	cmp	r1, r3
 8000bfa:	f200 80cd 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x14c>
 8000c18:	192c      	adds	r4, r5, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x14a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80b6 	bhi.w	8000d92 <__udivmoddi4+0x2b6>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e79f      	b.n	8000b72 <__udivmoddi4+0x96>
 8000c32:	f1c7 0c20 	rsb	ip, r7, #32
 8000c36:	40bb      	lsls	r3, r7
 8000c38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c40:	fa01 f407 	lsl.w	r4, r1, r7
 8000c44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c50:	4325      	orrs	r5, r4
 8000c52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c56:	0c2c      	lsrs	r4, r5, #16
 8000c58:	fb08 3319 	mls	r3, r8, r9, r3
 8000c5c:	fa1f fa8e 	uxth.w	sl, lr
 8000c60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c64:	fb09 f40a 	mul.w	r4, r9, sl
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1e 0303 	adds.w	r3, lr, r3
 8000c78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c7c:	f080 8087 	bcs.w	8000d8e <__udivmoddi4+0x2b2>
 8000c80:	429c      	cmp	r4, r3
 8000c82:	f240 8084 	bls.w	8000d8e <__udivmoddi4+0x2b2>
 8000c86:	f1a9 0902 	sub.w	r9, r9, #2
 8000c8a:	4473      	add	r3, lr
 8000c8c:	1b1b      	subs	r3, r3, r4
 8000c8e:	b2ad      	uxth	r5, r5
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ca0:	45a2      	cmp	sl, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	d26b      	bcs.n	8000d86 <__udivmoddi4+0x2aa>
 8000cae:	45a2      	cmp	sl, r4
 8000cb0:	d969      	bls.n	8000d86 <__udivmoddi4+0x2aa>
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	4474      	add	r4, lr
 8000cb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cba:	fba0 8902 	umull	r8, r9, r0, r2
 8000cbe:	eba4 040a 	sub.w	r4, r4, sl
 8000cc2:	454c      	cmp	r4, r9
 8000cc4:	46c2      	mov	sl, r8
 8000cc6:	464b      	mov	r3, r9
 8000cc8:	d354      	bcc.n	8000d74 <__udivmoddi4+0x298>
 8000cca:	d051      	beq.n	8000d70 <__udivmoddi4+0x294>
 8000ccc:	2e00      	cmp	r6, #0
 8000cce:	d069      	beq.n	8000da4 <__udivmoddi4+0x2c8>
 8000cd0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cd4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cd8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cdc:	40fd      	lsrs	r5, r7
 8000cde:	40fc      	lsrs	r4, r7
 8000ce0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ce4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ce8:	2700      	movs	r7, #0
 8000cea:	e747      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000cec:	f1c2 0320 	rsb	r3, r2, #32
 8000cf0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cf4:	4095      	lsls	r5, r2
 8000cf6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d02:	4338      	orrs	r0, r7
 8000d04:	0c01      	lsrs	r1, r0, #16
 8000d06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d0a:	fa1f f885 	uxth.w	r8, r5
 8000d0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d16:	fb07 f308 	mul.w	r3, r7, r8
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d20:	d907      	bls.n	8000d32 <__udivmoddi4+0x256>
 8000d22:	1869      	adds	r1, r5, r1
 8000d24:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d28:	d22f      	bcs.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d92d      	bls.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2e:	3f02      	subs	r7, #2
 8000d30:	4429      	add	r1, r5
 8000d32:	1acb      	subs	r3, r1, r3
 8000d34:	b281      	uxth	r1, r0
 8000d36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d42:	fb00 f308 	mul.w	r3, r0, r8
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x27e>
 8000d4a:	1869      	adds	r1, r5, r1
 8000d4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d50:	d217      	bcs.n	8000d82 <__udivmoddi4+0x2a6>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d915      	bls.n	8000d82 <__udivmoddi4+0x2a6>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4429      	add	r1, r5
 8000d5a:	1ac9      	subs	r1, r1, r3
 8000d5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d60:	e73b      	b.n	8000bda <__udivmoddi4+0xfe>
 8000d62:	4637      	mov	r7, r6
 8000d64:	4630      	mov	r0, r6
 8000d66:	e709      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d68:	4607      	mov	r7, r0
 8000d6a:	e6e7      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	e6fb      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d70:	4541      	cmp	r1, r8
 8000d72:	d2ab      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d78:	eb69 020e 	sbc.w	r2, r9, lr
 8000d7c:	3801      	subs	r0, #1
 8000d7e:	4613      	mov	r3, r2
 8000d80:	e7a4      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d82:	4660      	mov	r0, ip
 8000d84:	e7e9      	b.n	8000d5a <__udivmoddi4+0x27e>
 8000d86:	4618      	mov	r0, r3
 8000d88:	e795      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8a:	4667      	mov	r7, ip
 8000d8c:	e7d1      	b.n	8000d32 <__udivmoddi4+0x256>
 8000d8e:	4681      	mov	r9, r0
 8000d90:	e77c      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d92:	3802      	subs	r0, #2
 8000d94:	442c      	add	r4, r5
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0x14c>
 8000d98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d9c:	442b      	add	r3, r5
 8000d9e:	e72f      	b.n	8000c00 <__udivmoddi4+0x124>
 8000da0:	4638      	mov	r0, r7
 8000da2:	e708      	b.n	8000bb6 <__udivmoddi4+0xda>
 8000da4:	4637      	mov	r7, r6
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0xa0>

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af02      	add	r7, sp, #8
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 8000dc2:	f107 020c 	add.w	r2, r7, #12
 8000dc6:	2364      	movs	r3, #100	; 0x64
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	2302      	movs	r3, #2
 8000dcc:	2194      	movs	r1, #148	; 0x94
 8000dce:	4803      	ldr	r0, [pc, #12]	; (8000ddc <write_register+0x30>)
 8000dd0:	f005 f98c 	bl	80060ec <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	200000b4 	.word	0x200000b4

08000de0 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af02      	add	r7, sp, #8
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000df0:	f107 020c 	add.w	r2, r7, #12
 8000df4:	2364      	movs	r3, #100	; 0x64
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	2301      	movs	r3, #1
 8000dfa:	2194      	movs	r1, #148	; 0x94
 8000dfc:	4807      	ldr	r0, [pc, #28]	; (8000e1c <read_register+0x3c>)
 8000dfe:	f005 f975 	bl	80060ec <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000e02:	2364      	movs	r3, #100	; 0x64
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	2301      	movs	r3, #1
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	2194      	movs	r1, #148	; 0x94
 8000e0c:	4803      	ldr	r0, [pc, #12]	; (8000e1c <read_register+0x3c>)
 8000e0e:	f005 fa6b 	bl	80062e8 <HAL_I2C_Master_Receive>
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200000b4 	.word	0x200000b4

08000e20 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000e20:	b084      	sub	sp, #16
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	f107 0c10 	add.w	ip, r7, #16
 8000e2c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000e30:	4b7b      	ldr	r3, [pc, #492]	; (8001020 <CS43_Init+0x200>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000e38:	4b79      	ldr	r3, [pc, #484]	; (8001020 <CS43_Init+0x200>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	69da      	ldr	r2, [r3, #28]
 8000e3e:	4b78      	ldr	r3, [pc, #480]	; (8001020 <CS43_Init+0x200>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e46:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	4875      	ldr	r0, [pc, #468]	; (8001024 <CS43_Init+0x204>)
 8000e4e:	f003 faef 	bl	8004430 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000e52:	4b75      	ldr	r3, [pc, #468]	; (8001028 <CS43_Init+0x208>)
 8000e54:	4618      	mov	r0, r3
 8000e56:	f107 0110 	add.w	r1, r7, #16
 8000e5a:	2354      	movs	r3, #84	; 0x54
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	f00f fa73 	bl	8010348 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000e62:	2301      	movs	r3, #1
 8000e64:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	4619      	mov	r1, r3
 8000e6a:	2002      	movs	r0, #2
 8000e6c:	f7ff ff9e 	bl	8000dac <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000e74:	797b      	ldrb	r3, [r7, #5]
 8000e76:	f043 0320 	orr.w	r3, r3, #32
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000e7e:	797b      	ldrb	r3, [r7, #5]
 8000e80:	f043 030c 	orr.w	r3, r3, #12
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000e88:	797b      	ldrb	r3, [r7, #5]
 8000e8a:	f043 0303 	orr.w	r3, r3, #3
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	3301      	adds	r3, #1
 8000e96:	4619      	mov	r1, r3
 8000e98:	2004      	movs	r0, #4
 8000e9a:	f7ff ff87 	bl	8000dac <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 8000e9e:	2380      	movs	r3, #128	; 0x80
 8000ea0:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	2005      	movs	r0, #5
 8000eaa:	f7ff ff7f 	bl	8000dac <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	2006      	movs	r0, #6
 8000eb4:	f7ff ff94 	bl	8000de0 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8000eb8:	797b      	ldrb	r3, [r7, #5]
 8000eba:	f003 0320 	and.w	r3, r3, #32
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 8000ec2:	797b      	ldrb	r3, [r7, #5]
 8000ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8000ecc:	797b      	ldrb	r3, [r7, #5]
 8000ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000ed6:	797b      	ldrb	r3, [r7, #5]
 8000ed8:	f023 0310 	bic.w	r3, r3, #16
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000ee0:	797b      	ldrb	r3, [r7, #5]
 8000ee2:	f023 0304 	bic.w	r3, r3, #4
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 8000eea:	797b      	ldrb	r3, [r7, #5]
 8000eec:	f043 0304 	orr.w	r3, r3, #4
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000ef4:	797b      	ldrb	r3, [r7, #5]
 8000ef6:	f043 0303 	orr.w	r3, r3, #3
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	3301      	adds	r3, #1
 8000f02:	4619      	mov	r1, r3
 8000f04:	2006      	movs	r0, #6
 8000f06:	f7ff ff51 	bl	8000dac <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	4619      	mov	r1, r3
 8000f10:	2008      	movs	r0, #8
 8000f12:	f7ff ff65 	bl	8000de0 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000f16:	797b      	ldrb	r3, [r7, #5]
 8000f18:	f023 030f 	bic.w	r3, r3, #15
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000f20:	797b      	ldrb	r3, [r7, #5]
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	4619      	mov	r1, r3
 8000f30:	2008      	movs	r0, #8
 8000f32:	f7ff ff3b 	bl	8000dac <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	3301      	adds	r3, #1
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	2009      	movs	r0, #9
 8000f3e:	f7ff ff4f 	bl	8000de0 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000f42:	797b      	ldrb	r3, [r7, #5]
 8000f44:	f023 030f 	bic.w	r3, r3, #15
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000f4c:	797b      	ldrb	r3, [r7, #5]
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	3301      	adds	r3, #1
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	2009      	movs	r0, #9
 8000f5e:	f7ff ff25 	bl	8000dac <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	3301      	adds	r3, #1
 8000f66:	4619      	mov	r1, r3
 8000f68:	200e      	movs	r0, #14
 8000f6a:	f7ff ff39 	bl	8000de0 <read_register>
	if(outputMode == MODE_ANALOG)
 8000f6e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d119      	bne.n	8000faa <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 8000f76:	797b      	ldrb	r3, [r7, #5]
 8000f78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8000f80:	797b      	ldrb	r3, [r7, #5]
 8000f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 8000f8a:	797b      	ldrb	r3, [r7, #5]
 8000f8c:	f023 0320 	bic.w	r3, r3, #32
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 8000f94:	797b      	ldrb	r3, [r7, #5]
 8000f96:	f023 0310 	bic.w	r3, r3, #16
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8000f9e:	797b      	ldrb	r3, [r7, #5]
 8000fa0:	f023 0308 	bic.w	r3, r3, #8
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	717b      	strb	r3, [r7, #5]
 8000fa8:	e005      	b.n	8000fb6 <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 8000faa:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	3301      	adds	r3, #1
 8000fba:	4619      	mov	r1, r3
 8000fbc:	200e      	movs	r0, #14
 8000fbe:	f7ff fef5 	bl	8000dac <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	200f      	movs	r0, #15
 8000fca:	f7ff ff09 	bl	8000de0 <read_register>
	iData[1] = 0x00;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	200f      	movs	r0, #15
 8000fda:	f7ff fee7 	bl	8000dac <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	2014      	movs	r0, #20
 8000fea:	f7ff fedf 	bl	8000dac <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	2015      	movs	r0, #21
 8000ff6:	f7ff fed9 	bl	8000dac <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	4619      	mov	r1, r3
 8001000:	201a      	movs	r0, #26
 8001002:	f7ff fed3 	bl	8000dac <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	3301      	adds	r3, #1
 800100a:	4619      	mov	r1, r3
 800100c:	201b      	movs	r0, #27
 800100e:	f7ff fecd 	bl	8000dac <write_register>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800101c:	b004      	add	sp, #16
 800101e:	4770      	bx	lr
 8001020:	200014b0 	.word	0x200014b0
 8001024:	40020c00 	.word	0x40020c00
 8001028:	200000b4 	.word	0x200000b4

0800102c <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b03      	cmp	r3, #3
 800103a:	d82b      	bhi.n	8001094 <CS43_Enable_RightLeft+0x68>
 800103c:	a201      	add	r2, pc, #4	; (adr r2, 8001044 <CS43_Enable_RightLeft+0x18>)
 800103e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001042:	bf00      	nop
 8001044:	08001055 	.word	0x08001055
 8001048:	08001065 	.word	0x08001065
 800104c:	08001075 	.word	0x08001075
 8001050:	08001085 	.word	0x08001085
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001054:	23c0      	movs	r3, #192	; 0xc0
 8001056:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001058:	7b7b      	ldrb	r3, [r7, #13]
 800105a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800105e:	b2db      	uxtb	r3, r3
 8001060:	737b      	strb	r3, [r7, #13]
			break;
 8001062:	e018      	b.n	8001096 <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001068:	7b7b      	ldrb	r3, [r7, #13]
 800106a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800106e:	b2db      	uxtb	r3, r3
 8001070:	737b      	strb	r3, [r7, #13]
			break;
 8001072:	e010      	b.n	8001096 <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001074:	23c0      	movs	r3, #192	; 0xc0
 8001076:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001078:	7b7b      	ldrb	r3, [r7, #13]
 800107a:	f043 0320 	orr.w	r3, r3, #32
 800107e:	b2db      	uxtb	r3, r3
 8001080:	737b      	strb	r3, [r7, #13]
			break;
 8001082:	e008      	b.n	8001096 <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001088:	7b7b      	ldrb	r3, [r7, #13]
 800108a:	f043 0320 	orr.w	r3, r3, #32
 800108e:	b2db      	uxtb	r3, r3
 8001090:	737b      	strb	r3, [r7, #13]
			break;
 8001092:	e000      	b.n	8001096 <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 8001094:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8001096:	7b7b      	ldrb	r3, [r7, #13]
 8001098:	f043 030c 	orr.w	r3, r3, #12
 800109c:	b2db      	uxtb	r3, r3
 800109e:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80010a0:	7b7b      	ldrb	r3, [r7, #13]
 80010a2:	f043 0303 	orr.w	r3, r3, #3
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	3301      	adds	r3, #1
 80010b0:	4619      	mov	r1, r3
 80010b2:	2004      	movs	r0, #4
 80010b4:	f7ff fe7a 	bl	8000dac <write_register>
}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	3319      	adds	r3, #25
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	3301      	adds	r3, #1
 80010d8:	4619      	mov	r1, r3
 80010da:	2020      	movs	r0, #32
 80010dc:	f7ff fe66 	bl	8000dac <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	3301      	adds	r3, #1
 80010e6:	4619      	mov	r1, r3
 80010e8:	2021      	movs	r0, #33	; 0x21
 80010ea:	f7ff fe5f 	bl	8000dac <write_register>
}
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b084      	sub	sp, #16
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d019      	beq.n	800113a <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 8001106:	23ff      	movs	r3, #255	; 0xff
 8001108:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	3301      	adds	r3, #1
 8001110:	4619      	mov	r1, r3
 8001112:	2004      	movs	r0, #4
 8001114:	f7ff fe4a 	bl	8000dac <write_register>
    iData[1] = 0x01;
 8001118:	2301      	movs	r3, #1
 800111a:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	3301      	adds	r3, #1
 8001122:	4619      	mov	r1, r3
 8001124:	2022      	movs	r0, #34	; 0x22
 8001126:	f7ff fe41 	bl	8000dac <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	3301      	adds	r3, #1
 8001130:	4619      	mov	r1, r3
 8001132:	2023      	movs	r0, #35	; 0x23
 8001134:	f7ff fe3a 	bl	8000dac <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 8001138:	e018      	b.n	800116c <CS43_SetMute+0x76>
    iData[1] = 0x00;
 800113a:	2300      	movs	r3, #0
 800113c:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	3301      	adds	r3, #1
 8001144:	4619      	mov	r1, r3
 8001146:	2022      	movs	r0, #34	; 0x22
 8001148:	f7ff fe30 	bl	8000dac <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	3301      	adds	r3, #1
 8001152:	4619      	mov	r1, r3
 8001154:	2023      	movs	r0, #35	; 0x23
 8001156:	f7ff fe29 	bl	8000dac <write_register>
    iData[1] = 0xAF;
 800115a:	23af      	movs	r3, #175	; 0xaf
 800115c:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	3301      	adds	r3, #1
 8001164:	4619      	mov	r1, r3
 8001166:	2004      	movs	r0, #4
 8001168:	f7ff fe20 	bl	8000dac <write_register>
}
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 800117a:	2000      	movs	r0, #0
 800117c:	f7ff ffbb 	bl	80010f6 <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 8001180:	2399      	movs	r3, #153	; 0x99
 8001182:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	3301      	adds	r3, #1
 8001188:	4619      	mov	r1, r3
 800118a:	2000      	movs	r0, #0
 800118c:	f7ff fe0e 	bl	8000dac <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	3301      	adds	r3, #1
 8001198:	4619      	mov	r1, r3
 800119a:	2047      	movs	r0, #71	; 0x47
 800119c:	f7ff fe06 	bl	8000dac <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	3301      	adds	r3, #1
 80011a4:	4619      	mov	r1, r3
 80011a6:	2032      	movs	r0, #50	; 0x32
 80011a8:	f7ff fe1a 	bl	8000de0 <read_register>
	iData[1] |= 0x80;
 80011ac:	797b      	ldrb	r3, [r7, #5]
 80011ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	3301      	adds	r3, #1
 80011ba:	4619      	mov	r1, r3
 80011bc:	2032      	movs	r0, #50	; 0x32
 80011be:	f7ff fdf5 	bl	8000dac <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	3301      	adds	r3, #1
 80011c6:	4619      	mov	r1, r3
 80011c8:	2032      	movs	r0, #50	; 0x32
 80011ca:	f7ff fe09 	bl	8000de0 <read_register>
	iData[1] &= ~(0x80);
 80011ce:	797b      	ldrb	r3, [r7, #5]
 80011d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	3301      	adds	r3, #1
 80011dc:	4619      	mov	r1, r3
 80011de:	2032      	movs	r0, #50	; 0x32
 80011e0:	f7ff fde4 	bl	8000dac <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80011e4:	2300      	movs	r3, #0
 80011e6:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	3301      	adds	r3, #1
 80011ec:	4619      	mov	r1, r3
 80011ee:	2000      	movs	r0, #0
 80011f0:	f7ff fddc 	bl	8000dac <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 80011f4:	239e      	movs	r3, #158	; 0x9e
 80011f6:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	3301      	adds	r3, #1
 80011fc:	4619      	mov	r1, r3
 80011fe:	2002      	movs	r0, #2
 8001200:	f7ff fdd4 	bl	8000dac <write_register>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <CS43_Stop>:

void CS43_Stop(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(1);
 8001212:	2001      	movs	r0, #1
 8001214:	f7ff ff6f 	bl	80010f6 <CS43_SetMute>
  iData[1] = 0x04;
 8001218:	2304      	movs	r3, #4
 800121a:	717b      	strb	r3, [r7, #5]
  write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	3301      	adds	r3, #1
 8001220:	4619      	mov	r1, r3
 8001222:	200e      	movs	r0, #14
 8001224:	f7ff fdc2 	bl	8000dac <write_register>
	iData[1] = 0x9F;
 8001228:	239f      	movs	r3, #159	; 0x9f
 800122a:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	3301      	adds	r3, #1
 8001230:	4619      	mov	r1, r3
 8001232:	2002      	movs	r0, #2
 8001234:	f7ff fdba 	bl	8000dac <write_register>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8001248:	2300      	movs	r3, #0
 800124a:	77fb      	strb	r3, [r7, #31]
 800124c:	23ff      	movs	r3, #255	; 0xff
 800124e:	77bb      	strb	r3, [r7, #30]

  for(index = 0; index < 8; index++)
 8001250:	2300      	movs	r3, #0
 8001252:	77fb      	strb	r3, [r7, #31]
 8001254:	e00b      	b.n	800126e <audioI2S_pllClockConfig+0x2e>
  {
    if(I2SFreq[index] == audioFreq)
 8001256:	7ffb      	ldrb	r3, [r7, #31]
 8001258:	4a1c      	ldr	r2, [pc, #112]	; (80012cc <audioI2S_pllClockConfig+0x8c>)
 800125a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	429a      	cmp	r2, r3
 8001262:	d101      	bne.n	8001268 <audioI2S_pllClockConfig+0x28>
    {
      freqindex = index;
 8001264:	7ffb      	ldrb	r3, [r7, #31]
 8001266:	77bb      	strb	r3, [r7, #30]
  for(index = 0; index < 8; index++)
 8001268:	7ffb      	ldrb	r3, [r7, #31]
 800126a:	3301      	adds	r3, #1
 800126c:	77fb      	strb	r3, [r7, #31]
 800126e:	7ffb      	ldrb	r3, [r7, #31]
 8001270:	2b07      	cmp	r3, #7
 8001272:	d9f0      	bls.n	8001256 <audioI2S_pllClockConfig+0x16>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	4618      	mov	r0, r3
 800127a:	f007 fb6d 	bl	8008958 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 800127e:	7fbb      	ldrb	r3, [r7, #30]
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	2b00      	cmp	r3, #0
 8001286:	d111      	bne.n	80012ac <audioI2S_pllClockConfig+0x6c>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001288:	2301      	movs	r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 800128c:	7fbb      	ldrb	r3, [r7, #30]
 800128e:	4a10      	ldr	r2, [pc, #64]	; (80012d0 <audioI2S_pllClockConfig+0x90>)
 8001290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001294:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8001296:	7fbb      	ldrb	r3, [r7, #30]
 8001298:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <audioI2S_pllClockConfig+0x94>)
 800129a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129e:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	4618      	mov	r0, r3
 80012a6:	f007 fa75 	bl	8008794 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 80012aa:	e00b      	b.n	80012c4 <audioI2S_pllClockConfig+0x84>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80012ac:	2301      	movs	r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80012b0:	f44f 7381 	mov.w	r3, #258	; 0x102
 80012b4:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 80012b6:	2303      	movs	r3, #3
 80012b8:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	4618      	mov	r0, r3
 80012c0:	f007 fa68 	bl	8008794 <HAL_RCCEx_PeriphCLKConfig>
}
 80012c4:	bf00      	nop
 80012c6:	3720      	adds	r7, #32
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	08010c14 	.word	0x08010c14
 80012d0:	08010c34 	.word	0x08010c34
 80012d4:	08010c54 	.word	0x08010c54

080012d8 <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 80012e0:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <I2S3_freqUpdate+0x80>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a1d      	ldr	r2, [pc, #116]	; (800135c <I2S3_freqUpdate+0x84>)
 80012e6:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <I2S3_freqUpdate+0x80>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	69da      	ldr	r2, [r3, #28]
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <I2S3_freqUpdate+0x80>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012fa:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 80012fc:	4b16      	ldr	r3, [pc, #88]	; (8001358 <I2S3_freqUpdate+0x80>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 8001304:	4b14      	ldr	r3, [pc, #80]	; (8001358 <I2S3_freqUpdate+0x80>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2200      	movs	r2, #0
 800130a:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <I2S3_freqUpdate+0x80>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8001314:	4b10      	ldr	r3, [pc, #64]	; (8001358 <I2S3_freqUpdate+0x80>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <I2S3_freqUpdate+0x80>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001324:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <I2S3_freqUpdate+0x80>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800132e:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <I2S3_freqUpdate+0x80>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <I2S3_freqUpdate+0x80>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f005 fd25 	bl	8006d8c <HAL_I2S_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <I2S3_freqUpdate+0x74>
  {
    return false;
 8001348:	2300      	movs	r3, #0
 800134a:	e000      	b.n	800134e <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 800134c:	2301      	movs	r3, #1
  }
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000108 	.word	0x20000108
 800135c:	40003c00 	.word	0x40003c00

08001360 <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <audioI2S_setHandle+0x1c>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6013      	str	r3, [r2, #0]
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000108 	.word	0x20000108

08001380 <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff59 	bl	8001240 <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ffa2 	bl	80012d8 <I2S3_freqUpdate>
  return true;
 8001394:	2301      	movs	r3, #1
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 80013aa:	f7ff fee3 	bl	8001174 <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <audioI2S_play+0x38>)
 80013b0:	6818      	ldr	r0, [r3, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013b8:	d203      	bcs.n	80013c2 <audioI2S_play+0x22>
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	085b      	lsrs	r3, r3, #1
 80013be:	b29b      	uxth	r3, r3
 80013c0:	e001      	b.n	80013c6 <audioI2S_play+0x26>
 80013c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013c6:	461a      	mov	r2, r3
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	f005 fe1f 	bl	800700c <HAL_I2S_Transmit_DMA>
  return true;
 80013ce:	2301      	movs	r3, #1
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000108 	.word	0x20000108

080013dc <audioI2S_pause>:

/**
 * @brief Pause audio out
 */
void audioI2S_pause(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  CS43_Stop();
 80013e0:	f7ff ff14 	bl	800120c <CS43_Stop>
  HAL_I2S_DMAPause(hAudioI2S);
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <audioI2S_pause+0x18>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f005 feb7 	bl	800715c <HAL_I2S_DMAPause>
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000108 	.word	0x20000108

080013f8 <audioI2S_resume>:

/**
 * @brief Resume audio out
 */
void audioI2S_resume(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  CS43_Start();
 80013fc:	f7ff feba 	bl	8001174 <CS43_Start>
  HAL_I2S_DMAResume(hAudioI2S);
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <audioI2S_resume+0x18>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f005 ff0b 	bl	8007220 <HAL_I2S_DMAResume>
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000108 	.word	0x20000108

08001414 <audioI2S_stop>:

/**
 * @brief Stop audio
 */
void audioI2S_stop(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  CS43_Stop();
 8001418:	f7ff fef8 	bl	800120c <CS43_Stop>
  HAL_I2S_DMAStop(hAudioI2S);
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <audioI2S_stop+0x18>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f005 ff91 	bl	8007348 <HAL_I2S_DMAStop>
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000108 	.word	0x20000108

08001430 <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a04      	ldr	r2, [pc, #16]	; (8001450 <HAL_I2S_TxCpltCallback+0x20>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d101      	bne.n	8001446 <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 8001442:	f000 f929 	bl	8001698 <audioI2S_fullTransfer_Callback>
  }
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40003c00 	.word	0x40003c00

08001454 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a04      	ldr	r2, [pc, #16]	; (8001474 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d101      	bne.n	800146a <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8001466:	f000 f90b 	bl	8001680 <audioI2S_halfTransfer_Callback>
  }
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40003c00 	.word	0x40003c00

08001478 <wavPlayer_reset>:
  PLAYER_CONTROL_EndOfFile,
}PLAYER_CONTROL_e;
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static void wavPlayer_reset(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <wavPlayer_reset+0x1c>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <wavPlayer_reset+0x20>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20001340 	.word	0x20001340
 8001498:	20001348 	.word	0x20001348

0800149c <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08e      	sub	sp, #56	; 0x38
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 80014a8:	2201      	movs	r2, #1
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	480d      	ldr	r0, [pc, #52]	; (80014e4 <wavPlayer_fileSelect+0x48>)
 80014ae:	f00d fdf1 	bl	800f094 <f_open>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <wavPlayer_fileSelect+0x20>
  {
    return false;
 80014b8:	2300      	movs	r3, #0
 80014ba:	e00e      	b.n	80014da <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	f107 010c 	add.w	r1, r7, #12
 80014c4:	222c      	movs	r2, #44	; 0x2c
 80014c6:	4807      	ldr	r0, [pc, #28]	; (80014e4 <wavPlayer_fileSelect+0x48>)
 80014c8:	f00d ffa2 	bl	800f410 <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <wavPlayer_fileSelect+0x4c>)
 80014d0:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	4a05      	ldr	r2, [pc, #20]	; (80014ec <wavPlayer_fileSelect+0x50>)
 80014d6:	6013      	str	r3, [r2, #0]
  return true;
 80014d8:	2301      	movs	r3, #1
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3738      	adds	r7, #56	; 0x38
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2000010c 	.word	0x2000010c
 80014e8:	2000033c 	.word	0x2000033c
 80014ec:	20001344 	.word	0x20001344

080014f0 <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  isFinished = false;
 80014f4:	4b10      	ldr	r3, [pc, #64]	; (8001538 <wavPlayer_play+0x48>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <wavPlayer_play+0x4c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ff3e 	bl	8001380 <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 8001504:	2100      	movs	r1, #0
 8001506:	480e      	ldr	r0, [pc, #56]	; (8001540 <wavPlayer_play+0x50>)
 8001508:	f00e f969 	bl	800f7de <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 800150c:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <wavPlayer_play+0x54>)
 800150e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001512:	490d      	ldr	r1, [pc, #52]	; (8001548 <wavPlayer_play+0x58>)
 8001514:	480a      	ldr	r0, [pc, #40]	; (8001540 <wavPlayer_play+0x50>)
 8001516:	f00d ff7b 	bl	800f410 <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <wavPlayer_play+0x5c>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <wavPlayer_play+0x54>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <wavPlayer_play+0x60>)
 8001526:	6013      	str	r3, [r2, #0]
  //Start playing the WAV
  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 8001528:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800152c:	4806      	ldr	r0, [pc, #24]	; (8001548 <wavPlayer_play+0x58>)
 800152e:	f7ff ff37 	bl	80013a0 <audioI2S_play>
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	2000134c 	.word	0x2000134c
 800153c:	20001344 	.word	0x20001344
 8001540:	2000010c 	.word	0x2000010c
 8001544:	20001348 	.word	0x20001348
 8001548:	20000340 	.word	0x20000340
 800154c:	2000033c 	.word	0x2000033c
 8001550:	20001340 	.word	0x20001340

08001554 <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 8001558:	4b30      	ldr	r3, [pc, #192]	; (800161c <wavPlayer_process+0xc8>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b03      	cmp	r3, #3
 8001560:	d859      	bhi.n	8001616 <wavPlayer_process+0xc2>
 8001562:	a201      	add	r2, pc, #4	; (adr r2, 8001568 <wavPlayer_process+0x14>)
 8001564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001568:	08001615 	.word	0x08001615
 800156c:	08001579 	.word	0x08001579
 8001570:	080015bb 	.word	0x080015bb
 8001574:	080015fd 	.word	0x080015fd
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 8001578:	4b29      	ldr	r3, [pc, #164]	; (8001620 <wavPlayer_process+0xcc>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 800157e:	4b27      	ldr	r3, [pc, #156]	; (800161c <wavPlayer_process+0xc8>)
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8001584:	4b26      	ldr	r3, [pc, #152]	; (8001620 <wavPlayer_process+0xcc>)
 8001586:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800158a:	4926      	ldr	r1, [pc, #152]	; (8001624 <wavPlayer_process+0xd0>)
 800158c:	4826      	ldr	r0, [pc, #152]	; (8001628 <wavPlayer_process+0xd4>)
 800158e:	f00d ff3f 	bl	800f410 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8001592:	4b26      	ldr	r3, [pc, #152]	; (800162c <wavPlayer_process+0xd8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800159a:	d907      	bls.n	80015ac <wavPlayer_process+0x58>
    {
      audioRemainSize -= playerReadBytes;
 800159c:	4b23      	ldr	r3, [pc, #140]	; (800162c <wavPlayer_process+0xd8>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <wavPlayer_process+0xcc>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	4a21      	ldr	r2, [pc, #132]	; (800162c <wavPlayer_process+0xd8>)
 80015a8:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 80015aa:	e034      	b.n	8001616 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <wavPlayer_process+0xd8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	; (800161c <wavPlayer_process+0xc8>)
 80015b4:	2203      	movs	r2, #3
 80015b6:	701a      	strb	r2, [r3, #0]
    break;
 80015b8:	e02d      	b.n	8001616 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <wavPlayer_process+0xcc>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 80015c0:	4b16      	ldr	r3, [pc, #88]	; (800161c <wavPlayer_process+0xc8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <wavPlayer_process+0xcc>)
 80015c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015cc:	4918      	ldr	r1, [pc, #96]	; (8001630 <wavPlayer_process+0xdc>)
 80015ce:	4816      	ldr	r0, [pc, #88]	; (8001628 <wavPlayer_process+0xd4>)
 80015d0:	f00d ff1e 	bl	800f410 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <wavPlayer_process+0xd8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015dc:	d907      	bls.n	80015ee <wavPlayer_process+0x9a>
    {
      audioRemainSize -= playerReadBytes;
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <wavPlayer_process+0xd8>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <wavPlayer_process+0xcc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	4a10      	ldr	r2, [pc, #64]	; (800162c <wavPlayer_process+0xd8>)
 80015ea:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 80015ec:	e013      	b.n	8001616 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <wavPlayer_process+0xd8>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <wavPlayer_process+0xc8>)
 80015f6:	2203      	movs	r2, #3
 80015f8:	701a      	strb	r2, [r3, #0]
    break;
 80015fa:	e00c      	b.n	8001616 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 80015fc:	480a      	ldr	r0, [pc, #40]	; (8001628 <wavPlayer_process+0xd4>)
 80015fe:	f00e f8c4 	bl	800f78a <f_close>
    wavPlayer_reset();
 8001602:	f7ff ff39 	bl	8001478 <wavPlayer_reset>
    isFinished = true;
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <wavPlayer_process+0xe0>)
 8001608:	2201      	movs	r2, #1
 800160a:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <wavPlayer_process+0xc8>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
    break;
 8001612:	e000      	b.n	8001616 <wavPlayer_process+0xc2>
    break;
 8001614:	bf00      	nop
  }
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	2000134d 	.word	0x2000134d
 8001620:	20001348 	.word	0x20001348
 8001624:	20000340 	.word	0x20000340
 8001628:	2000010c 	.word	0x2000010c
 800162c:	20001340 	.word	0x20001340
 8001630:	20000b40 	.word	0x20000b40
 8001634:	2000134c 	.word	0x2000134c

08001638 <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  audioI2S_stop();
 800163c:	f7ff feea 	bl	8001414 <audioI2S_stop>
  isFinished = true;
 8001640:	4b02      	ldr	r3, [pc, #8]	; (800164c <wavPlayer_stop+0x14>)
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2000134c 	.word	0x2000134c

08001650 <wavPlayer_pause>:

/**
 * @brief WAV pause/resume
 */
void wavPlayer_pause(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  audioI2S_pause();
 8001654:	f7ff fec2 	bl	80013dc <audioI2S_pause>
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}

0800165c <wavPlayer_resume>:
void wavPlayer_resume(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  audioI2S_resume();
 8001660:	f7ff feca 	bl	80013f8 <audioI2S_resume>
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}

08001668 <wavPlayer_isFinished>:

/**
 * @brief isEndofFile reached
 */
bool wavPlayer_isFinished(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return isFinished;
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <wavPlayer_isFinished+0x14>)
 800166e:	781b      	ldrb	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	2000134c 	.word	0x2000134c

08001680 <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <audioI2S_halfTransfer_Callback+0x14>)
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	2000134d 	.word	0x2000134d

08001698 <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <audioI2S_fullTransfer_Callback+0x14>)
 800169e:	2202      	movs	r2, #2
 80016a0:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	2000134d 	.word	0x2000134d

080016b0 <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
static void ssd1331_write_byte(uint8_t chData, uint8_t chCmd) 
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	460a      	mov	r2, r1
 80016ba:	71fb      	strb	r3, [r7, #7]
 80016bc:	4613      	mov	r3, r2
 80016be:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 80016c0:	79bb      	ldrb	r3, [r7, #6]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d005      	beq.n	80016d2 <ssd1331_write_byte+0x22>
	 	__SSD1331_DC_SET();
 80016c6:	2201      	movs	r2, #1
 80016c8:	2102      	movs	r1, #2
 80016ca:	4811      	ldr	r0, [pc, #68]	; (8001710 <ssd1331_write_byte+0x60>)
 80016cc:	f002 feb0 	bl	8004430 <HAL_GPIO_WritePin>
 80016d0:	e004      	b.n	80016dc <ssd1331_write_byte+0x2c>
	} else {
	 	__SSD1331_DC_CLR();
 80016d2:	2200      	movs	r2, #0
 80016d4:	2102      	movs	r1, #2
 80016d6:	480e      	ldr	r0, [pc, #56]	; (8001710 <ssd1331_write_byte+0x60>)
 80016d8:	f002 feaa 	bl	8004430 <HAL_GPIO_WritePin>
	}
	
	__SSD1331_CS_CLR();
 80016dc:	2200      	movs	r2, #0
 80016de:	2120      	movs	r1, #32
 80016e0:	480c      	ldr	r0, [pc, #48]	; (8001714 <ssd1331_write_byte+0x64>)
 80016e2:	f002 fea5 	bl	8004430 <HAL_GPIO_WritePin>
	__SSD1331_WRITE_BYTE(chData);
 80016e6:	1df9      	adds	r1, r7, #7
 80016e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ec:	2201      	movs	r2, #1
 80016ee:	480a      	ldr	r0, [pc, #40]	; (8001718 <ssd1331_write_byte+0x68>)
 80016f0:	f007 fa1e 	bl	8008b30 <HAL_SPI_Transmit>
	
	__SSD1331_CS_SET();
 80016f4:	2201      	movs	r2, #1
 80016f6:	2120      	movs	r1, #32
 80016f8:	4806      	ldr	r0, [pc, #24]	; (8001714 <ssd1331_write_byte+0x64>)
 80016fa:	f002 fe99 	bl	8004430 <HAL_GPIO_WritePin>
	__SSD1331_DC_SET();
 80016fe:	2201      	movs	r2, #1
 8001700:	2102      	movs	r1, #2
 8001702:	4803      	ldr	r0, [pc, #12]	; (8001710 <ssd1331_write_byte+0x60>)
 8001704:	f002 fe94 	bl	8004430 <HAL_GPIO_WritePin>
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40020400 	.word	0x40020400
 8001714:	40020800 	.word	0x40020800
 8001718:	20001524 	.word	0x20001524

0800171c <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor) 
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
 8001726:	460b      	mov	r3, r1
 8001728:	71bb      	strb	r3, [r7, #6]
 800172a:	4613      	mov	r3, r2
 800172c:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	2b5f      	cmp	r3, #95	; 0x5f
 8001732:	d82b      	bhi.n	800178c <ssd1331_draw_point+0x70>
 8001734:	79bb      	ldrb	r3, [r7, #6]
 8001736:	2b3f      	cmp	r3, #63	; 0x3f
 8001738:	d828      	bhi.n	800178c <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 800173a:	2100      	movs	r1, #0
 800173c:	2015      	movs	r0, #21
 800173e:	f7ff ffb7 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	2100      	movs	r1, #0
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ffb2 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 800174c:	2100      	movs	r1, #0
 800174e:	205f      	movs	r0, #95	; 0x5f
 8001750:	f7ff ffae 	bl	80016b0 <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 8001754:	2100      	movs	r1, #0
 8001756:	2075      	movs	r0, #117	; 0x75
 8001758:	f7ff ffaa 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 800175c:	79bb      	ldrb	r3, [r7, #6]
 800175e:	2100      	movs	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ffa5 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 8001766:	2100      	movs	r1, #0
 8001768:	203f      	movs	r0, #63	; 0x3f
 800176a:	f7ff ffa1 	bl	80016b0 <ssd1331_write_byte>
    
    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 800176e:	88bb      	ldrh	r3, [r7, #4]
 8001770:	0a1b      	lsrs	r3, r3, #8
 8001772:	b29b      	uxth	r3, r3
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2101      	movs	r1, #1
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff99 	bl	80016b0 <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);   
 800177e:	88bb      	ldrh	r3, [r7, #4]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2101      	movs	r1, #1
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff93 	bl	80016b0 <ssd1331_write_byte>
 800178a:	e000      	b.n	800178e <ssd1331_draw_point+0x72>
		return;
 800178c:	bf00      	nop
}
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <ssd1331_display_char>:
  * @param  chSize: 
  * @param  chMode
  * @retval 
**/
void ssd1331_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint16_t hwColor)
{      	
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	4604      	mov	r4, r0
 800179c:	4608      	mov	r0, r1
 800179e:	4611      	mov	r1, r2
 80017a0:	461a      	mov	r2, r3
 80017a2:	4623      	mov	r3, r4
 80017a4:	71fb      	strb	r3, [r7, #7]
 80017a6:	4603      	mov	r3, r0
 80017a8:	71bb      	strb	r3, [r7, #6]
 80017aa:	460b      	mov	r3, r1
 80017ac:	717b      	strb	r3, [r7, #5]
 80017ae:	4613      	mov	r3, r2
 80017b0:	713b      	strb	r3, [r7, #4]
	uint8_t i, j, chTemp;
	uint8_t chYpos0 = chYpos;
 80017b2:	79bb      	ldrb	r3, [r7, #6]
 80017b4:	733b      	strb	r3, [r7, #12]

	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	2b5f      	cmp	r3, #95	; 0x5f
 80017ba:	d850      	bhi.n	800185e <ssd1331_display_char+0xca>
 80017bc:	79bb      	ldrb	r3, [r7, #6]
 80017be:	2b3f      	cmp	r3, #63	; 0x3f
 80017c0:	d84d      	bhi.n	800185e <ssd1331_display_char+0xca>
		return;
	}
					   
    for (i = 0; i < chSize; i ++) {   
 80017c2:	2300      	movs	r3, #0
 80017c4:	73fb      	strb	r3, [r7, #15]
 80017c6:	e045      	b.n	8001854 <ssd1331_display_char+0xc0>
		if (FONT_1206 == chSize) {
 80017c8:	793b      	ldrb	r3, [r7, #4]
 80017ca:	2b0c      	cmp	r3, #12
 80017cc:	d10d      	bne.n	80017ea <ssd1331_display_char+0x56>
			chTemp = c_chFont1206[chChr - 0x20][i];  
 80017ce:	797b      	ldrb	r3, [r7, #5]
 80017d0:	f1a3 0220 	sub.w	r2, r3, #32
 80017d4:	7bf9      	ldrb	r1, [r7, #15]
 80017d6:	4824      	ldr	r0, [pc, #144]	; (8001868 <ssd1331_display_char+0xd4>)
 80017d8:	4613      	mov	r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4413      	add	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4403      	add	r3, r0
 80017e2:	440b      	add	r3, r1
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	737b      	strb	r3, [r7, #13]
 80017e8:	e00c      	b.n	8001804 <ssd1331_display_char+0x70>
		} else if (FONT_1608 == chSize) { 
 80017ea:	793b      	ldrb	r3, [r7, #4]
 80017ec:	2b10      	cmp	r3, #16
 80017ee:	d109      	bne.n	8001804 <ssd1331_display_char+0x70>
			chTemp = c_chFont1608[chChr - 0x20][i];
 80017f0:	797b      	ldrb	r3, [r7, #5]
 80017f2:	f1a3 0220 	sub.w	r2, r3, #32
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
 80017f8:	491c      	ldr	r1, [pc, #112]	; (800186c <ssd1331_display_char+0xd8>)
 80017fa:	0112      	lsls	r2, r2, #4
 80017fc:	440a      	add	r2, r1
 80017fe:	4413      	add	r3, r2
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	737b      	strb	r3, [r7, #13]
		}
		
        for (j = 0; j < 8; j ++) {
 8001804:	2300      	movs	r3, #0
 8001806:	73bb      	strb	r3, [r7, #14]
 8001808:	e01e      	b.n	8001848 <ssd1331_display_char+0xb4>
    		if (chTemp & 0x80) {
 800180a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800180e:	2b00      	cmp	r3, #0
 8001810:	da05      	bge.n	800181e <ssd1331_display_char+0x8a>
				ssd1331_draw_point(chXpos, chYpos, hwColor);
 8001812:	8c3a      	ldrh	r2, [r7, #32]
 8001814:	79b9      	ldrb	r1, [r7, #6]
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff7f 	bl	800171c <ssd1331_draw_point>
    		}			
			chTemp <<= 1;
 800181e:	7b7b      	ldrb	r3, [r7, #13]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	737b      	strb	r3, [r7, #13]
			chYpos ++;
 8001824:	79bb      	ldrb	r3, [r7, #6]
 8001826:	3301      	adds	r3, #1
 8001828:	71bb      	strb	r3, [r7, #6]
			if ((chYpos - chYpos0) == chSize) {
 800182a:	79ba      	ldrb	r2, [r7, #6]
 800182c:	7b3b      	ldrb	r3, [r7, #12]
 800182e:	1ad2      	subs	r2, r2, r3
 8001830:	793b      	ldrb	r3, [r7, #4]
 8001832:	429a      	cmp	r2, r3
 8001834:	d105      	bne.n	8001842 <ssd1331_display_char+0xae>
				chYpos = chYpos0;
 8001836:	7b3b      	ldrb	r3, [r7, #12]
 8001838:	71bb      	strb	r3, [r7, #6]
				chXpos ++;
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	3301      	adds	r3, #1
 800183e:	71fb      	strb	r3, [r7, #7]
				break;
 8001840:	e005      	b.n	800184e <ssd1331_display_char+0xba>
        for (j = 0; j < 8; j ++) {
 8001842:	7bbb      	ldrb	r3, [r7, #14]
 8001844:	3301      	adds	r3, #1
 8001846:	73bb      	strb	r3, [r7, #14]
 8001848:	7bbb      	ldrb	r3, [r7, #14]
 800184a:	2b07      	cmp	r3, #7
 800184c:	d9dd      	bls.n	800180a <ssd1331_display_char+0x76>
    for (i = 0; i < chSize; i ++) {   
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	3301      	adds	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
 8001854:	7bfa      	ldrb	r2, [r7, #15]
 8001856:	793b      	ldrb	r3, [r7, #4]
 8001858:	429a      	cmp	r2, r3
 800185a:	d3b5      	bcc.n	80017c8 <ssd1331_display_char+0x34>
 800185c:	e000      	b.n	8001860 <ssd1331_display_char+0xcc>
		return;
 800185e:	bf00      	nop
			}
		}  	 
    } 
}
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	bd90      	pop	{r4, r7, pc}
 8001866:	bf00      	nop
 8001868:	08010c74 	.word	0x08010c74
 800186c:	080110e8 	.word	0x080110e8

08001870 <_pow>:

static uint32_t _pow(uint8_t m, uint8_t n)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	460a      	mov	r2, r1
 800187a:	71fb      	strb	r3, [r7, #7]
 800187c:	4613      	mov	r3, r2
 800187e:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8001880:	2301      	movs	r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
	
	while(n --) result *= m;    
 8001884:	e004      	b.n	8001890 <_pow+0x20>
 8001886:	79fa      	ldrb	r2, [r7, #7]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	fb02 f303 	mul.w	r3, r2, r3
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	79bb      	ldrb	r3, [r7, #6]
 8001892:	1e5a      	subs	r2, r3, #1
 8001894:	71ba      	strb	r2, [r7, #6]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f5      	bne.n	8001886 <_pow+0x16>
	return result;
 800189a:	68fb      	ldr	r3, [r7, #12]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <ssd1331_display_num>:


void ssd1331_display_num(uint8_t chXpos, uint8_t chYpos, uint32_t chNum, uint8_t chLen, uint8_t chSize, uint16_t hwColor)
{         	
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	603a      	str	r2, [r7, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
 80018b6:	460b      	mov	r3, r1
 80018b8:	71bb      	strb	r3, [r7, #6]
 80018ba:	4613      	mov	r3, r2
 80018bc:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t chTemp, chShow = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	73bb      	strb	r3, [r7, #14]

	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2b5f      	cmp	r3, #95	; 0x5f
 80018c6:	d85e      	bhi.n	8001986 <ssd1331_display_num+0xde>
 80018c8:	79bb      	ldrb	r3, [r7, #6]
 80018ca:	2b3f      	cmp	r3, #63	; 0x3f
 80018cc:	d85b      	bhi.n	8001986 <ssd1331_display_num+0xde>
		return;
	}
	
	for(i = 0; i < chLen; i ++) {
 80018ce:	2300      	movs	r3, #0
 80018d0:	73fb      	strb	r3, [r7, #15]
 80018d2:	e053      	b.n	800197c <ssd1331_display_num+0xd4>
		chTemp = (chNum / _pow(10, chLen - i - 1)) % 10;
 80018d4:	797a      	ldrb	r2, [r7, #5]
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	3b01      	subs	r3, #1
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	4619      	mov	r1, r3
 80018e2:	200a      	movs	r0, #10
 80018e4:	f7ff ffc4 	bl	8001870 <_pow>
 80018e8:	4602      	mov	r2, r0
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <ssd1331_display_num+0xe8>)
 80018f2:	fba3 2301 	umull	r2, r3, r3, r1
 80018f6:	08da      	lsrs	r2, r3, #3
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	1aca      	subs	r2, r1, r3
 8001902:	4613      	mov	r3, r2
 8001904:	737b      	strb	r3, [r7, #13]
		if(chShow == 0 && i < (chLen - 1)) {
 8001906:	7bbb      	ldrb	r3, [r7, #14]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d11e      	bne.n	800194a <ssd1331_display_num+0xa2>
 800190c:	7bfa      	ldrb	r2, [r7, #15]
 800190e:	797b      	ldrb	r3, [r7, #5]
 8001910:	3b01      	subs	r3, #1
 8001912:	429a      	cmp	r2, r3
 8001914:	da19      	bge.n	800194a <ssd1331_display_num+0xa2>
			if(chTemp == 0) {
 8001916:	7b7b      	ldrb	r3, [r7, #13]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d114      	bne.n	8001946 <ssd1331_display_num+0x9e>
				ssd1331_display_char(chXpos + (chSize / 2) * i, chYpos, ' ', chSize, hwColor);
 800191c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001920:	085b      	lsrs	r3, r3, #1
 8001922:	b2db      	uxtb	r3, r3
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	fb12 f303 	smulbb	r3, r2, r3
 800192a:	b2da      	uxtb	r2, r3
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	4413      	add	r3, r2
 8001930:	b2d8      	uxtb	r0, r3
 8001932:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001936:	79b9      	ldrb	r1, [r7, #6]
 8001938:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	4613      	mov	r3, r2
 800193e:	2220      	movs	r2, #32
 8001940:	f7ff ff28 	bl	8001794 <ssd1331_display_char>
				continue;
 8001944:	e017      	b.n	8001976 <ssd1331_display_num+0xce>
			} else {
				chShow = 1;
 8001946:	2301      	movs	r3, #1
 8001948:	73bb      	strb	r3, [r7, #14]
			}	 
		}
	 	ssd1331_display_char(chXpos + (chSize / 2) * i, chYpos, chTemp + '0', chSize, hwColor); 
 800194a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800194e:	085b      	lsrs	r3, r3, #1
 8001950:	b2db      	uxtb	r3, r3
 8001952:	7bfa      	ldrb	r2, [r7, #15]
 8001954:	fb12 f303 	smulbb	r3, r2, r3
 8001958:	b2da      	uxtb	r2, r3
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	4413      	add	r3, r2
 800195e:	b2d8      	uxtb	r0, r3
 8001960:	7b7b      	ldrb	r3, [r7, #13]
 8001962:	3330      	adds	r3, #48	; 0x30
 8001964:	b2da      	uxtb	r2, r3
 8001966:	f897 4020 	ldrb.w	r4, [r7, #32]
 800196a:	79b9      	ldrb	r1, [r7, #6]
 800196c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	4623      	mov	r3, r4
 8001972:	f7ff ff0f 	bl	8001794 <ssd1331_display_char>
	for(i = 0; i < chLen; i ++) {
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	3301      	adds	r3, #1
 800197a:	73fb      	strb	r3, [r7, #15]
 800197c:	7bfa      	ldrb	r2, [r7, #15]
 800197e:	797b      	ldrb	r3, [r7, #5]
 8001980:	429a      	cmp	r2, r3
 8001982:	d3a7      	bcc.n	80018d4 <ssd1331_display_num+0x2c>
 8001984:	e000      	b.n	8001988 <ssd1331_display_num+0xe0>
		return;
 8001986:	bf00      	nop
	}
} 
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	bd90      	pop	{r4, r7, pc}
 800198e:	bf00      	nop
 8001990:	cccccccd 	.word	0xcccccccd

08001994 <ssd1331_display_string>:
  * @param  pchString: Pointer to a string to display on the screen 
  *         
  * @retval  None
**/
void ssd1331_display_string(uint8_t chXpos, uint8_t chYpos, const uint8_t *pchString, uint8_t chSize, uint16_t hwColor)
{
 8001994:	b590      	push	{r4, r7, lr}
 8001996:	b085      	sub	sp, #20
 8001998:	af02      	add	r7, sp, #8
 800199a:	603a      	str	r2, [r7, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
 80019a2:	460b      	mov	r3, r1
 80019a4:	71bb      	strb	r3, [r7, #6]
 80019a6:	4613      	mov	r3, r2
 80019a8:	717b      	strb	r3, [r7, #5]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	2b5f      	cmp	r3, #95	; 0x5f
 80019ae:	d836      	bhi.n	8001a1e <ssd1331_display_string+0x8a>
 80019b0:	79bb      	ldrb	r3, [r7, #6]
 80019b2:	2b3f      	cmp	r3, #63	; 0x3f
 80019b4:	d833      	bhi.n	8001a1e <ssd1331_display_string+0x8a>
		return;
	}
	
    while (*pchString != '\0') {       
 80019b6:	e02d      	b.n	8001a14 <ssd1331_display_string+0x80>
        if (chXpos > (OLED_WIDTH - chSize / 2)) {
 80019b8:	79fa      	ldrb	r2, [r7, #7]
 80019ba:	797b      	ldrb	r3, [r7, #5]
 80019bc:	085b      	lsrs	r3, r3, #1
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 80019c4:	429a      	cmp	r2, r3
 80019c6:	dd12      	ble.n	80019ee <ssd1331_display_string+0x5a>
			chXpos = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 80019cc:	79ba      	ldrb	r2, [r7, #6]
 80019ce:	797b      	ldrb	r3, [r7, #5]
 80019d0:	4413      	add	r3, r2
 80019d2:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (OLED_HEIGHT - chSize)) {
 80019d4:	79ba      	ldrb	r2, [r7, #6]
 80019d6:	797b      	ldrb	r3, [r7, #5]
 80019d8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80019dc:	429a      	cmp	r2, r3
 80019de:	dd06      	ble.n	80019ee <ssd1331_display_string+0x5a>
				chYpos = chXpos = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	71fb      	strb	r3, [r7, #7]
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	71bb      	strb	r3, [r7, #6]
				ssd1331_clear_screen(0x00);
 80019e8:	2000      	movs	r0, #0
 80019ea:	f000 f81c 	bl	8001a26 <ssd1331_clear_screen>
			}
		}
		
        ssd1331_display_char(chXpos, chYpos, *pchString, chSize, hwColor);
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	781a      	ldrb	r2, [r3, #0]
 80019f2:	797c      	ldrb	r4, [r7, #5]
 80019f4:	79b9      	ldrb	r1, [r7, #6]
 80019f6:	79f8      	ldrb	r0, [r7, #7]
 80019f8:	8b3b      	ldrh	r3, [r7, #24]
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	4623      	mov	r3, r4
 80019fe:	f7ff fec9 	bl	8001794 <ssd1331_display_char>
        chXpos += chSize / 2;
 8001a02:	797b      	ldrb	r3, [r7, #5]
 8001a04:	085b      	lsrs	r3, r3, #1
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	71fb      	strb	r3, [r7, #7]
        pchString ++;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	3301      	adds	r3, #1
 8001a12:	603b      	str	r3, [r7, #0]
    while (*pchString != '\0') {       
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1cd      	bne.n	80019b8 <ssd1331_display_string+0x24>
 8001a1c:	e000      	b.n	8001a20 <ssd1331_display_string+0x8c>
		return;
 8001a1e:	bf00      	nop
    } 
}
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd90      	pop	{r4, r7, pc}

08001a26 <ssd1331_clear_screen>:
        }
    }
}

void ssd1331_clear_screen(uint16_t hwColor)  
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b084      	sub	sp, #16
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	
	for(i = 0; i < OLED_HEIGHT; i ++){
 8001a30:	2300      	movs	r3, #0
 8001a32:	81fb      	strh	r3, [r7, #14]
 8001a34:	e013      	b.n	8001a5e <ssd1331_clear_screen+0x38>
		for(j = 0; j < OLED_WIDTH; j ++){
 8001a36:	2300      	movs	r3, #0
 8001a38:	81bb      	strh	r3, [r7, #12]
 8001a3a:	e00a      	b.n	8001a52 <ssd1331_clear_screen+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 8001a3c:	89bb      	ldrh	r3, [r7, #12]
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	89fa      	ldrh	r2, [r7, #14]
 8001a42:	b2d1      	uxtb	r1, r2
 8001a44:	88fa      	ldrh	r2, [r7, #6]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fe68 	bl	800171c <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 8001a4c:	89bb      	ldrh	r3, [r7, #12]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	81bb      	strh	r3, [r7, #12]
 8001a52:	89bb      	ldrh	r3, [r7, #12]
 8001a54:	2b5f      	cmp	r3, #95	; 0x5f
 8001a56:	d9f1      	bls.n	8001a3c <ssd1331_clear_screen+0x16>
	for(i = 0; i < OLED_HEIGHT; i ++){
 8001a58:	89fb      	ldrh	r3, [r7, #14]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	81fb      	strh	r3, [r7, #14]
 8001a5e:	89fb      	ldrh	r3, [r7, #14]
 8001a60:	2b3f      	cmp	r3, #63	; 0x3f
 8001a62:	d9e8      	bls.n	8001a36 <ssd1331_clear_screen+0x10>
		}
	}
}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <ssd1331_init>:


void ssd1331_init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
	__SSD1331_RES_SET();  //RES set
 8001a70:	2201      	movs	r2, #1
 8001a72:	2180      	movs	r1, #128	; 0x80
 8001a74:	4852      	ldr	r0, [pc, #328]	; (8001bc0 <ssd1331_init+0x154>)
 8001a76:	f002 fcdb 	bl	8004430 <HAL_GPIO_WritePin>
	__SSD1331_CS_SET();
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	2120      	movs	r1, #32
 8001a7e:	4851      	ldr	r0, [pc, #324]	; (8001bc4 <ssd1331_init+0x158>)
 8001a80:	f002 fcd6 	bl	8004430 <HAL_GPIO_WritePin>
	
	ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 8001a84:	2100      	movs	r1, #0
 8001a86:	20ae      	movs	r0, #174	; 0xae
 8001a88:	f7ff fe12 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2081      	movs	r0, #129	; 0x81
 8001a90:	f7ff fe0e 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 8001a94:	2100      	movs	r1, #0
 8001a96:	20ff      	movs	r0, #255	; 0xff
 8001a98:	f7ff fe0a 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2082      	movs	r0, #130	; 0x82
 8001aa0:	f7ff fe06 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	20ff      	movs	r0, #255	; 0xff
 8001aa8:	f7ff fe02 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 8001aac:	2100      	movs	r1, #0
 8001aae:	2083      	movs	r0, #131	; 0x83
 8001ab0:	f7ff fdfe 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	20ff      	movs	r0, #255	; 0xff
 8001ab8:	f7ff fdfa 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 8001abc:	2100      	movs	r1, #0
 8001abe:	2087      	movs	r0, #135	; 0x87
 8001ac0:	f7ff fdf6 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2006      	movs	r0, #6
 8001ac8:	f7ff fdf2 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 8001acc:	2100      	movs	r1, #0
 8001ace:	208a      	movs	r0, #138	; 0x8a
 8001ad0:	f7ff fdee 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2064      	movs	r0, #100	; 0x64
 8001ad8:	f7ff fdea 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 8001adc:	2100      	movs	r1, #0
 8001ade:	208b      	movs	r0, #139	; 0x8b
 8001ae0:	f7ff fde6 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	2078      	movs	r0, #120	; 0x78
 8001ae8:	f7ff fde2 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 8001aec:	2100      	movs	r1, #0
 8001aee:	208c      	movs	r0, #140	; 0x8c
 8001af0:	f7ff fdde 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8001af4:	2100      	movs	r1, #0
 8001af6:	2064      	movs	r0, #100	; 0x64
 8001af8:	f7ff fdda 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 8001afc:	2100      	movs	r1, #0
 8001afe:	20a0      	movs	r0, #160	; 0xa0
 8001b00:	f7ff fdd6 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(0x72, SSD1331_CMD);                     //0x72              
 8001b04:	2100      	movs	r1, #0
 8001b06:	2072      	movs	r0, #114	; 0x72
 8001b08:	f7ff fdd2 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	20a1      	movs	r0, #161	; 0xa1
 8001b10:	f7ff fdce 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(0x0, SSD1331_CMD);
 8001b14:	2100      	movs	r1, #0
 8001b16:	2000      	movs	r0, #0
 8001b18:	f7ff fdca 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	20a2      	movs	r0, #162	; 0xa2
 8001b20:	f7ff fdc6 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(0x0, SSD1331_CMD);
 8001b24:	2100      	movs	r1, #0
 8001b26:	2000      	movs	r0, #0
 8001b28:	f7ff fdc2 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	20a4      	movs	r0, #164	; 0xa4
 8001b30:	f7ff fdbe 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 8001b34:	2100      	movs	r1, #0
 8001b36:	20a8      	movs	r0, #168	; 0xa8
 8001b38:	f7ff fdba 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(0x3F, SSD1331_CMD);
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	203f      	movs	r0, #63	; 0x3f
 8001b40:	f7ff fdb6 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 8001b44:	2100      	movs	r1, #0
 8001b46:	20ad      	movs	r0, #173	; 0xad
 8001b48:	f7ff fdb2 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(0x8E, SSD1331_CMD);
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	208e      	movs	r0, #142	; 0x8e
 8001b50:	f7ff fdae 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 8001b54:	2100      	movs	r1, #0
 8001b56:	20b0      	movs	r0, #176	; 0xb0
 8001b58:	f7ff fdaa 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f7ff fda6 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 8001b64:	2100      	movs	r1, #0
 8001b66:	20b1      	movs	r0, #177	; 0xb1
 8001b68:	f7ff fda2 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	2031      	movs	r0, #49	; 0x31
 8001b70:	f7ff fd9e 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 8001b74:	2100      	movs	r1, #0
 8001b76:	20b3      	movs	r0, #179	; 0xb3
 8001b78:	f7ff fd9a 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(0xF0, SSD1331_CMD);
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	20f0      	movs	r0, #240	; 0xf0
 8001b80:	f7ff fd96 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 8001b84:	2100      	movs	r1, #0
 8001b86:	20bb      	movs	r0, #187	; 0xbb
 8001b88:	f7ff fd92 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(0x3A, SSD1331_CMD);
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	203a      	movs	r0, #58	; 0x3a
 8001b90:	f7ff fd8e 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 8001b94:	2100      	movs	r1, #0
 8001b96:	20be      	movs	r0, #190	; 0xbe
 8001b98:	f7ff fd8a 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(0x3E, SSD1331_CMD);
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	203e      	movs	r0, #62	; 0x3e
 8001ba0:	f7ff fd86 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	202e      	movs	r0, #46	; 0x2e
 8001ba8:	f7ff fd82 	bl	80016b0 <ssd1331_write_byte>
    ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 8001bac:	2100      	movs	r1, #0
 8001bae:	20af      	movs	r0, #175	; 0xaf
 8001bb0:	f7ff fd7e 	bl	80016b0 <ssd1331_write_byte>

    //ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
    ssd1331_clear_screen(0x0000);
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f7ff ff36 	bl	8001a26 <ssd1331_clear_screen>
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40020800 	.word	0x40020800

08001bc8 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bce:	463b      	mov	r3, r7
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8001bda:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <MX_ADC2_Init+0x98>)
 8001bdc:	4a21      	ldr	r2, [pc, #132]	; (8001c64 <MX_ADC2_Init+0x9c>)
 8001bde:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001be0:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <MX_ADC2_Init+0x98>)
 8001be2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001be6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001be8:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <MX_ADC2_Init+0x98>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001bee:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <MX_ADC2_Init+0x98>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <MX_ADC2_Init+0x98>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <MX_ADC2_Init+0x98>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <MX_ADC2_Init+0x98>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c08:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <MX_ADC2_Init+0x98>)
 8001c0a:	4a17      	ldr	r2, [pc, #92]	; (8001c68 <MX_ADC2_Init+0xa0>)
 8001c0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c0e:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <MX_ADC2_Init+0x98>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <MX_ADC2_Init+0x98>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <MX_ADC2_Init+0x98>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c22:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <MX_ADC2_Init+0x98>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001c28:	480d      	ldr	r0, [pc, #52]	; (8001c60 <MX_ADC2_Init+0x98>)
 8001c2a:	f001 f8c1 	bl	8002db0 <HAL_ADC_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001c34:	f000 fdc0 	bl	80027b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001c40:	2303      	movs	r3, #3
 8001c42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c44:	463b      	mov	r3, r7
 8001c46:	4619      	mov	r1, r3
 8001c48:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_ADC2_Init+0x98>)
 8001c4a:	f001 fb27 	bl	800329c <HAL_ADC_ConfigChannel>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001c54:	f000 fdb0 	bl	80027b8 <Error_Handler>
  }

}
 8001c58:	bf00      	nop
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	200013b4 	.word	0x200013b4
 8001c64:	40012100 	.word	0x40012100
 8001c68:	0f000001 	.word	0x0f000001

08001c6c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1b      	ldr	r2, [pc, #108]	; (8001cf8 <HAL_ADC_MspInit+0x8c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d12f      	bne.n	8001cee <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <HAL_ADC_MspInit+0x90>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	4a19      	ldr	r2, [pc, #100]	; (8001cfc <HAL_ADC_MspInit+0x90>)
 8001c98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9e:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <HAL_ADC_MspInit+0x90>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <HAL_ADC_MspInit+0x90>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a12      	ldr	r2, [pc, #72]	; (8001cfc <HAL_ADC_MspInit+0x90>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <HAL_ADC_MspInit+0x90>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration    
    PA3     ------> ADC2_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cc6:	2308      	movs	r3, #8
 8001cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4809      	ldr	r0, [pc, #36]	; (8001d00 <HAL_ADC_MspInit+0x94>)
 8001cda:	f002 f9f7 	bl	80040cc <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	2012      	movs	r0, #18
 8001ce4:	f001 fddd 	bl	80038a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001ce8:	2012      	movs	r0, #18
 8001cea:	f001 fdf6 	bl	80038da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001cee:	bf00      	nop
 8001cf0:	3728      	adds	r7, #40	; 0x28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40012100 	.word	0x40012100
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40020000 	.word	0x40020000

08001d04 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <MX_DMA_Init+0x3c>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a0b      	ldr	r2, [pc, #44]	; (8001d40 <MX_DMA_Init+0x3c>)
 8001d14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <MX_DMA_Init+0x3c>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2100      	movs	r1, #0
 8001d2a:	2010      	movs	r0, #16
 8001d2c:	f001 fdb9 	bl	80038a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d30:	2010      	movs	r0, #16
 8001d32:	f001 fdd2 	bl	80038da <HAL_NVIC_EnableIRQ>

}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800

08001d44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08c      	sub	sp, #48	; 0x30
 8001d48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4a:	f107 031c 	add.w	r3, r7, #28
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]
 8001d58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61bb      	str	r3, [r7, #24]
 8001d5e:	4b5e      	ldr	r3, [pc, #376]	; (8001ed8 <MX_GPIO_Init+0x194>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a5d      	ldr	r2, [pc, #372]	; (8001ed8 <MX_GPIO_Init+0x194>)
 8001d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b5b      	ldr	r3, [pc, #364]	; (8001ed8 <MX_GPIO_Init+0x194>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d72:	61bb      	str	r3, [r7, #24]
 8001d74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	4b57      	ldr	r3, [pc, #348]	; (8001ed8 <MX_GPIO_Init+0x194>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a56      	ldr	r2, [pc, #344]	; (8001ed8 <MX_GPIO_Init+0x194>)
 8001d80:	f043 0304 	orr.w	r3, r3, #4
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b54      	ldr	r3, [pc, #336]	; (8001ed8 <MX_GPIO_Init+0x194>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	4b50      	ldr	r3, [pc, #320]	; (8001ed8 <MX_GPIO_Init+0x194>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a4f      	ldr	r2, [pc, #316]	; (8001ed8 <MX_GPIO_Init+0x194>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b4d      	ldr	r3, [pc, #308]	; (8001ed8 <MX_GPIO_Init+0x194>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b49      	ldr	r3, [pc, #292]	; (8001ed8 <MX_GPIO_Init+0x194>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a48      	ldr	r2, [pc, #288]	; (8001ed8 <MX_GPIO_Init+0x194>)
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b46      	ldr	r3, [pc, #280]	; (8001ed8 <MX_GPIO_Init+0x194>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	4b42      	ldr	r3, [pc, #264]	; (8001ed8 <MX_GPIO_Init+0x194>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a41      	ldr	r2, [pc, #260]	; (8001ed8 <MX_GPIO_Init+0x194>)
 8001dd4:	f043 0310 	orr.w	r3, r3, #16
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b3f      	ldr	r3, [pc, #252]	; (8001ed8 <MX_GPIO_Init+0x194>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0310 	and.w	r3, r3, #16
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	4b3b      	ldr	r3, [pc, #236]	; (8001ed8 <MX_GPIO_Init+0x194>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a3a      	ldr	r2, [pc, #232]	; (8001ed8 <MX_GPIO_Init+0x194>)
 8001df0:	f043 0308 	orr.w	r3, r3, #8
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b38      	ldr	r3, [pc, #224]	; (8001ed8 <MX_GPIO_Init+0x194>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|CS_Pin, GPIO_PIN_RESET);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2121      	movs	r1, #33	; 0x21
 8001e06:	4835      	ldr	r0, [pc, #212]	; (8001edc <MX_GPIO_Init+0x198>)
 8001e08:	f002 fb12 	bl	8004430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2102      	movs	r1, #2
 8001e10:	4833      	ldr	r0, [pc, #204]	; (8001ee0 <MX_GPIO_Init+0x19c>)
 8001e12:	f002 fb0d 	bl	8004430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2180      	movs	r1, #128	; 0x80
 8001e1a:	4832      	ldr	r0, [pc, #200]	; (8001ee4 <MX_GPIO_Init+0x1a0>)
 8001e1c:	f002 fb08 	bl	8004430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8001e20:	2200      	movs	r2, #0
 8001e22:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001e26:	4830      	ldr	r0, [pc, #192]	; (8001ee8 <MX_GPIO_Init+0x1a4>)
 8001e28:	f002 fb02 	bl	8004430 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|CS_Pin;
 8001e2c:	2321      	movs	r3, #33	; 0x21
 8001e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e30:	2301      	movs	r3, #1
 8001e32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3c:	f107 031c 	add.w	r3, r7, #28
 8001e40:	4619      	mov	r1, r3
 8001e42:	4826      	ldr	r0, [pc, #152]	; (8001edc <MX_GPIO_Init+0x198>)
 8001e44:	f002 f942 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4824      	ldr	r0, [pc, #144]	; (8001eec <MX_GPIO_Init+0x1a8>)
 8001e5c:	f002 f936 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DC_Pin;
 8001e60:	2302      	movs	r3, #2
 8001e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e64:	2301      	movs	r3, #1
 8001e66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8001e70:	f107 031c 	add.w	r3, r7, #28
 8001e74:	4619      	mov	r1, r3
 8001e76:	481a      	ldr	r0, [pc, #104]	; (8001ee0 <MX_GPIO_Init+0x19c>)
 8001e78:	f002 f928 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RES_Pin;
 8001e7c:	2380      	movs	r3, #128	; 0x80
 8001e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e80:	2301      	movs	r3, #1
 8001e82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RES_GPIO_Port, &GPIO_InitStruct);
 8001e8c:	f107 031c 	add.w	r3, r7, #28
 8001e90:	4619      	mov	r1, r3
 8001e92:	4814      	ldr	r0, [pc, #80]	; (8001ee4 <MX_GPIO_Init+0x1a0>)
 8001e94:	f002 f91a 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = next_right_Pin|start_button_Pin|next_left_Pin;
 8001e98:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8001e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ea6:	f107 031c 	add.w	r3, r7, #28
 8001eaa:	4619      	mov	r1, r3
 8001eac:	480d      	ldr	r0, [pc, #52]	; (8001ee4 <MX_GPIO_Init+0x1a0>)
 8001eae:	f002 f90d 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8001eb2:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001eb6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ec4:	f107 031c 	add.w	r3, r7, #28
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4807      	ldr	r0, [pc, #28]	; (8001ee8 <MX_GPIO_Init+0x1a4>)
 8001ecc:	f002 f8fe 	bl	80040cc <HAL_GPIO_Init>

}
 8001ed0:	bf00      	nop
 8001ed2:	3730      	adds	r7, #48	; 0x30
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40020800 	.word	0x40020800
 8001ee0:	40020400 	.word	0x40020400
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40020c00 	.word	0x40020c00
 8001eec:	40020000 	.word	0x40020000

08001ef0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001ef6:	4a13      	ldr	r2, [pc, #76]	; (8001f44 <MX_I2C1_Init+0x54>)
 8001ef8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001efc:	4a12      	ldr	r2, [pc, #72]	; (8001f48 <MX_I2C1_Init+0x58>)
 8001efe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f2c:	4804      	ldr	r0, [pc, #16]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f2e:	f003 ffa5 	bl	8005e7c <HAL_I2C_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f38:	f000 fc3e 	bl	80027b8 <Error_Handler>
  }

}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	200013fc 	.word	0x200013fc
 8001f44:	40005400 	.word	0x40005400
 8001f48:	000186a0 	.word	0x000186a0

08001f4c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	; 0x28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a19      	ldr	r2, [pc, #100]	; (8001fd0 <HAL_I2C_MspInit+0x84>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d12c      	bne.n	8001fc8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <HAL_I2C_MspInit+0x88>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a17      	ldr	r2, [pc, #92]	; (8001fd4 <HAL_I2C_MspInit+0x88>)
 8001f78:	f043 0302 	orr.w	r3, r3, #2
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <HAL_I2C_MspInit+0x88>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001f8a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f90:	2312      	movs	r3, #18
 8001f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f94:	2301      	movs	r3, #1
 8001f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	480c      	ldr	r0, [pc, #48]	; (8001fd8 <HAL_I2C_MspInit+0x8c>)
 8001fa8:	f002 f890 	bl	80040cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <HAL_I2C_MspInit+0x88>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <HAL_I2C_MspInit+0x88>)
 8001fb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fba:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <HAL_I2C_MspInit+0x88>)
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001fc8:	bf00      	nop
 8001fca:	3728      	adds	r7, #40	; 0x28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40005400 	.word	0x40005400
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40020400 	.word	0x40020400

08001fdc <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <MX_I2S3_Init+0x54>)
 8001fe2:	4a14      	ldr	r2, [pc, #80]	; (8002034 <MX_I2S3_Init+0x58>)
 8001fe4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <MX_I2S3_Init+0x54>)
 8001fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fec:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <MX_I2S3_Init+0x54>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001ff4:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <MX_I2S3_Init+0x54>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001ffa:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <MX_I2S3_Init+0x54>)
 8001ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002000:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <MX_I2S3_Init+0x54>)
 8002004:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002008:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <MX_I2S3_Init+0x54>)
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <MX_I2S3_Init+0x54>)
 8002012:	2200      	movs	r2, #0
 8002014:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <MX_I2S3_Init+0x54>)
 8002018:	2200      	movs	r2, #0
 800201a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800201c:	4804      	ldr	r0, [pc, #16]	; (8002030 <MX_I2S3_Init+0x54>)
 800201e:	f004 feb5 	bl	8006d8c <HAL_I2S_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8002028:	f000 fbc6 	bl	80027b8 <Error_Handler>
  }

}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	200014b0 	.word	0x200014b0
 8002034:	40003c00 	.word	0x40003c00

08002038 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI3)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a45      	ldr	r2, [pc, #276]	; (800216c <HAL_I2S_MspInit+0x134>)
 8002056:	4293      	cmp	r3, r2
 8002058:	f040 8084 	bne.w	8002164 <HAL_I2S_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800205c:	2300      	movs	r3, #0
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	4b43      	ldr	r3, [pc, #268]	; (8002170 <HAL_I2S_MspInit+0x138>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	4a42      	ldr	r2, [pc, #264]	; (8002170 <HAL_I2S_MspInit+0x138>)
 8002066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800206a:	6413      	str	r3, [r2, #64]	; 0x40
 800206c:	4b40      	ldr	r3, [pc, #256]	; (8002170 <HAL_I2S_MspInit+0x138>)
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	4b3c      	ldr	r3, [pc, #240]	; (8002170 <HAL_I2S_MspInit+0x138>)
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	4a3b      	ldr	r2, [pc, #236]	; (8002170 <HAL_I2S_MspInit+0x138>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	6313      	str	r3, [r2, #48]	; 0x30
 8002088:	4b39      	ldr	r3, [pc, #228]	; (8002170 <HAL_I2S_MspInit+0x138>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002094:	2300      	movs	r3, #0
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	4b35      	ldr	r3, [pc, #212]	; (8002170 <HAL_I2S_MspInit+0x138>)
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209c:	4a34      	ldr	r2, [pc, #208]	; (8002170 <HAL_I2S_MspInit+0x138>)
 800209e:	f043 0304 	orr.w	r3, r3, #4
 80020a2:	6313      	str	r3, [r2, #48]	; 0x30
 80020a4:	4b32      	ldr	r3, [pc, #200]	; (8002170 <HAL_I2S_MspInit+0x138>)
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020b0:	2310      	movs	r3, #16
 80020b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80020c0:	2306      	movs	r3, #6
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	4619      	mov	r1, r3
 80020ca:	482a      	ldr	r0, [pc, #168]	; (8002174 <HAL_I2S_MspInit+0x13c>)
 80020cc:	f001 fffe 	bl	80040cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80020d0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80020d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	2300      	movs	r3, #0
 80020e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80020e2:	2306      	movs	r3, #6
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	4619      	mov	r1, r3
 80020ec:	4822      	ldr	r0, [pc, #136]	; (8002178 <HAL_I2S_MspInit+0x140>)
 80020ee:	f001 ffed 	bl	80040cc <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80020f2:	4b22      	ldr	r3, [pc, #136]	; (800217c <HAL_I2S_MspInit+0x144>)
 80020f4:	4a22      	ldr	r2, [pc, #136]	; (8002180 <HAL_I2S_MspInit+0x148>)
 80020f6:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80020f8:	4b20      	ldr	r3, [pc, #128]	; (800217c <HAL_I2S_MspInit+0x144>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020fe:	4b1f      	ldr	r3, [pc, #124]	; (800217c <HAL_I2S_MspInit+0x144>)
 8002100:	2240      	movs	r2, #64	; 0x40
 8002102:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <HAL_I2S_MspInit+0x144>)
 8002106:	2200      	movs	r2, #0
 8002108:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800210a:	4b1c      	ldr	r3, [pc, #112]	; (800217c <HAL_I2S_MspInit+0x144>)
 800210c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002110:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002112:	4b1a      	ldr	r3, [pc, #104]	; (800217c <HAL_I2S_MspInit+0x144>)
 8002114:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002118:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800211a:	4b18      	ldr	r3, [pc, #96]	; (800217c <HAL_I2S_MspInit+0x144>)
 800211c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002120:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8002122:	4b16      	ldr	r3, [pc, #88]	; (800217c <HAL_I2S_MspInit+0x144>)
 8002124:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002128:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800212a:	4b14      	ldr	r3, [pc, #80]	; (800217c <HAL_I2S_MspInit+0x144>)
 800212c:	2200      	movs	r2, #0
 800212e:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_I2S_MspInit+0x144>)
 8002132:	2204      	movs	r2, #4
 8002134:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <HAL_I2S_MspInit+0x144>)
 8002138:	2203      	movs	r2, #3
 800213a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800213c:	4b0f      	ldr	r3, [pc, #60]	; (800217c <HAL_I2S_MspInit+0x144>)
 800213e:	2200      	movs	r2, #0
 8002140:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002142:	4b0e      	ldr	r3, [pc, #56]	; (800217c <HAL_I2S_MspInit+0x144>)
 8002144:	2200      	movs	r2, #0
 8002146:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002148:	480c      	ldr	r0, [pc, #48]	; (800217c <HAL_I2S_MspInit+0x144>)
 800214a:	f001 fbe1 	bl	8003910 <HAL_DMA_Init>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 8002154:	f000 fb30 	bl	80027b8 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a08      	ldr	r2, [pc, #32]	; (800217c <HAL_I2S_MspInit+0x144>)
 800215c:	639a      	str	r2, [r3, #56]	; 0x38
 800215e:	4a07      	ldr	r2, [pc, #28]	; (800217c <HAL_I2S_MspInit+0x144>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002164:	bf00      	nop
 8002166:	3728      	adds	r7, #40	; 0x28
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40003c00 	.word	0x40003c00
 8002170:	40023800 	.word	0x40023800
 8002174:	40020000 	.word	0x40020000
 8002178:	40020800 	.word	0x40020800
 800217c:	20001450 	.word	0x20001450
 8002180:	40026088 	.word	0x40026088
 8002184:	00000000 	.word	0x00000000

08002188 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	 potencjometr = HAL_ADC_GetValue(&hadc2);
 8002190:	4825      	ldr	r0, [pc, #148]	; (8002228 <HAL_ADC_ConvCpltCallback+0xa0>)
 8002192:	f001 f862 	bl	800325a <HAL_ADC_GetValue>
 8002196:	ee07 0a90 	vmov	s15, r0
 800219a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800219e:	4b23      	ldr	r3, [pc, #140]	; (800222c <HAL_ADC_ConvCpltCallback+0xa4>)
 80021a0:	edc3 7a00 	vstr	s15, [r3]
	 potencjometr_255 = (potencjometr/4300.0)*255;
 80021a4:	4b21      	ldr	r3, [pc, #132]	; (800222c <HAL_ADC_ConvCpltCallback+0xa4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe f9c5 	bl	8000538 <__aeabi_f2d>
 80021ae:	a31a      	add	r3, pc, #104	; (adr r3, 8002218 <HAL_ADC_ConvCpltCallback+0x90>)
 80021b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b4:	f7fe fb42 	bl	800083c <__aeabi_ddiv>
 80021b8:	4603      	mov	r3, r0
 80021ba:	460c      	mov	r4, r1
 80021bc:	4618      	mov	r0, r3
 80021be:	4621      	mov	r1, r4
 80021c0:	a317      	add	r3, pc, #92	; (adr r3, 8002220 <HAL_ADC_ConvCpltCallback+0x98>)
 80021c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c6:	f7fe fa0f 	bl	80005e8 <__aeabi_dmul>
 80021ca:	4603      	mov	r3, r0
 80021cc:	460c      	mov	r4, r1
 80021ce:	4618      	mov	r0, r3
 80021d0:	4621      	mov	r1, r4
 80021d2:	f7fe fc1b 	bl	8000a0c <__aeabi_d2f>
 80021d6:	4602      	mov	r2, r0
 80021d8:	4b15      	ldr	r3, [pc, #84]	; (8002230 <HAL_ADC_ConvCpltCallback+0xa8>)
 80021da:	601a      	str	r2, [r3, #0]
	 potencjometr_255_int = potencjometr_255;
 80021dc:	4b14      	ldr	r3, [pc, #80]	; (8002230 <HAL_ADC_ConvCpltCallback+0xa8>)
 80021de:	edd3 7a00 	vldr	s15, [r3]
 80021e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021e6:	ee17 2a90 	vmov	r2, s15
 80021ea:	4b12      	ldr	r3, [pc, #72]	; (8002234 <HAL_ADC_ConvCpltCallback+0xac>)
 80021ec:	601a      	str	r2, [r3, #0]
	 volume = potencjometr_255 / 24;
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <HAL_ADC_ConvCpltCallback+0xa8>)
 80021f0:	ed93 7a00 	vldr	s14, [r3]
 80021f4:	eef3 6a08 	vmov.f32	s13, #56	; 0x41c00000  24.0
 80021f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002200:	ee17 2a90 	vmov	r2, s15
 8002204:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <HAL_ADC_ConvCpltCallback+0xb0>)
 8002206:	601a      	str	r2, [r3, #0]
	 HAL_ADC_Start_IT(&hadc2);
 8002208:	4807      	ldr	r0, [pc, #28]	; (8002228 <HAL_ADC_ConvCpltCallback+0xa0>)
 800220a:	f000 fe15 	bl	8002e38 <HAL_ADC_Start_IT>
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	bd90      	pop	{r4, r7, pc}
 8002216:	bf00      	nop
 8002218:	00000000 	.word	0x00000000
 800221c:	40b0cc00 	.word	0x40b0cc00
 8002220:	00000000 	.word	0x00000000
 8002224:	406fe000 	.word	0x406fe000
 8002228:	200013b4 	.word	0x200013b4
 800222c:	20001504 	.word	0x20001504
 8002230:	20001514 	.word	0x20001514
 8002234:	20000000 	.word	0x20000000
 8002238:	20000004 	.word	0x20000004

0800223c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af02      	add	r7, sp, #8
 8002242:	6078      	str	r0, [r7, #4]
 if(htim->Instance == TIM2){
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800224c:	d141      	bne.n	80022d2 <HAL_TIM_PeriodElapsedCallback+0x96>
 	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800224e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002252:	4839      	ldr	r0, [pc, #228]	; (8002338 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002254:	f002 f905 	bl	8004462 <HAL_GPIO_TogglePin>
 	 if(is_playing)
 8002258:	4b38      	ldr	r3, [pc, #224]	; (800233c <HAL_TIM_PeriodElapsedCallback+0x100>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d038      	beq.n	80022d2 <HAL_TIM_PeriodElapsedCallback+0x96>
 	 {
 	ssd1331_display_string(28, 27, time, FONT_1608, BLACK);
 8002260:	2300      	movs	r3, #0
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	2310      	movs	r3, #16
 8002266:	4a36      	ldr	r2, [pc, #216]	; (8002340 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002268:	211b      	movs	r1, #27
 800226a:	201c      	movs	r0, #28
 800226c:	f7ff fb92 	bl	8001994 <ssd1331_display_string>
 	 if (seconds == 10)
 8002270:	4b34      	ldr	r3, [pc, #208]	; (8002344 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b0a      	cmp	r3, #10
 8002276:	d107      	bne.n	8002288 <HAL_TIM_PeriodElapsedCallback+0x4c>
 	        {
 	            seconds = 0;
 8002278:	4b32      	ldr	r3, [pc, #200]	; (8002344 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
 	            tens_of_seconds++;
 800227e:	4b32      	ldr	r3, [pc, #200]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	3301      	adds	r3, #1
 8002284:	4a30      	ldr	r2, [pc, #192]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002286:	6013      	str	r3, [r2, #0]
 	        }
 	        if (tens_of_seconds == 6)
 8002288:	4b2f      	ldr	r3, [pc, #188]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b06      	cmp	r3, #6
 800228e:	d107      	bne.n	80022a0 <HAL_TIM_PeriodElapsedCallback+0x64>
 	        {
 	            tens_of_seconds = 0;
 8002290:	4b2d      	ldr	r3, [pc, #180]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 	            minutes++;
 8002296:	4b2d      	ldr	r3, [pc, #180]	; (800234c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	3301      	adds	r3, #1
 800229c:	4a2b      	ldr	r2, [pc, #172]	; (800234c <HAL_TIM_PeriodElapsedCallback+0x110>)
 800229e:	6013      	str	r3, [r2, #0]
 	        }
 	        sprintf(time,"%d:%d%d", minutes, tens_of_seconds, seconds);
 80022a0:	4b2a      	ldr	r3, [pc, #168]	; (800234c <HAL_TIM_PeriodElapsedCallback+0x110>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4b28      	ldr	r3, [pc, #160]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80022a6:	6819      	ldr	r1, [r3, #0]
 80022a8:	4b26      	ldr	r3, [pc, #152]	; (8002344 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	460b      	mov	r3, r1
 80022b0:	4927      	ldr	r1, [pc, #156]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80022b2:	4823      	ldr	r0, [pc, #140]	; (8002340 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80022b4:	f00e f914 	bl	80104e0 <siprintf>
 	        ssd1331_display_string(28, 27, time, FONT_1608, BLUE);
 80022b8:	231f      	movs	r3, #31
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	2310      	movs	r3, #16
 80022be:	4a20      	ldr	r2, [pc, #128]	; (8002340 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80022c0:	211b      	movs	r1, #27
 80022c2:	201c      	movs	r0, #28
 80022c4:	f7ff fb66 	bl	8001994 <ssd1331_display_string>
 	        seconds++;
 80022c8:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3301      	adds	r3, #1
 80022ce:	4a1d      	ldr	r2, [pc, #116]	; (8002344 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80022d0:	6013      	str	r3, [r2, #0]
 	 }

 }
 if(htim->Instance == TIM3){
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a1f      	ldr	r2, [pc, #124]	; (8002354 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d128      	bne.n	800232e <HAL_TIM_PeriodElapsedCallback+0xf2>
 	CS43_SetVolume(potencjometr_255_int);//0-255
 80022dc:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe feec 	bl	80010c0 <CS43_SetVolume>
 	if(volume!=old_volume)
 80022e8:	4b1c      	ldr	r3, [pc, #112]	; (800235c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d01c      	beq.n	800232e <HAL_TIM_PeriodElapsedCallback+0xf2>
	{
		ssd1331_display_num(38, 12, old_volume, sizeof(old_volume), FONT_1608, BLACK);
 80022f4:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	2300      	movs	r3, #0
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	2310      	movs	r3, #16
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	2304      	movs	r3, #4
 8002304:	210c      	movs	r1, #12
 8002306:	2026      	movs	r0, #38	; 0x26
 8002308:	f7ff face 	bl	80018a8 <ssd1331_display_num>
		ssd1331_display_num(38, 12, volume, sizeof(volume), FONT_1608, GREEN);
 800230c:	4b13      	ldr	r3, [pc, #76]	; (800235c <HAL_TIM_PeriodElapsedCallback+0x120>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002316:	9301      	str	r3, [sp, #4]
 8002318:	2310      	movs	r3, #16
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	2304      	movs	r3, #4
 800231e:	210c      	movs	r1, #12
 8002320:	2026      	movs	r0, #38	; 0x26
 8002322:	f7ff fac1 	bl	80018a8 <ssd1331_display_num>
		old_volume = volume;
 8002326:	4b0d      	ldr	r3, [pc, #52]	; (800235c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a0d      	ldr	r2, [pc, #52]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800232c:	6013      	str	r3, [r2, #0]
	}
  }

}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40020c00 	.word	0x40020c00
 800233c:	20001368 	.word	0x20001368
 8002340:	20001518 	.word	0x20001518
 8002344:	2000135c 	.word	0x2000135c
 8002348:	20001360 	.word	0x20001360
 800234c:	20001364 	.word	0x20001364
 8002350:	08010b80 	.word	0x08010b80
 8002354:	40000400 	.word	0x40000400
 8002358:	20000000 	.word	0x20000000
 800235c:	20000004 	.word	0x20000004
 8002360:	20001350 	.word	0x20001350

08002364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b095      	sub	sp, #84	; 0x54
 8002368:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800236a:	f000 fc8d 	bl	8002c88 <HAL_Init>

  /* USER CODE BEGIN Init */
  tracks[0] = "Metin2.wav";
 800236e:	4bb9      	ldr	r3, [pc, #740]	; (8002654 <main+0x2f0>)
 8002370:	4ab9      	ldr	r2, [pc, #740]	; (8002658 <main+0x2f4>)
 8002372:	601a      	str	r2, [r3, #0]
  tracks[1] = "Mario.wav";
 8002374:	4bb7      	ldr	r3, [pc, #732]	; (8002654 <main+0x2f0>)
 8002376:	4ab9      	ldr	r2, [pc, #740]	; (800265c <main+0x2f8>)
 8002378:	605a      	str	r2, [r3, #4]
  tracks[2] = "Polo.wav";
 800237a:	4bb6      	ldr	r3, [pc, #728]	; (8002654 <main+0x2f0>)
 800237c:	4ab8      	ldr	r2, [pc, #736]	; (8002660 <main+0x2fc>)
 800237e:	609a      	str	r2, [r3, #8]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002380:	f000 f998 	bl	80026b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002384:	f7ff fcde 	bl	8001d44 <MX_GPIO_Init>
  MX_DMA_Init();
 8002388:	f7ff fcbc 	bl	8001d04 <MX_DMA_Init>
  MX_SPI1_Init();
 800238c:	f000 fa1c 	bl	80027c8 <MX_SPI1_Init>
  MX_I2C1_Init();
 8002390:	f7ff fdae 	bl	8001ef0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8002394:	f7ff fe22 	bl	8001fdc <MX_I2S3_Init>
  MX_USB_HOST_Init();
 8002398:	f00d fc86 	bl	800fca8 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 800239c:	f008 f8f4 	bl	800a588 <MX_FATFS_Init>
  MX_ADC2_Init();
 80023a0:	f7ff fc12 	bl	8001bc8 <MX_ADC2_Init>
  MX_TIM3_Init();
 80023a4:	f000 fbb4 	bl	8002b10 <MX_TIM3_Init>
  MX_TIM2_Init();
 80023a8:	f000 fb64 	bl	8002a74 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	ssd1331_init();
 80023ac:	f7ff fb5e 	bl	8001a6c <ssd1331_init>
	ssd1331_clear_screen(BLACK);
 80023b0:	2000      	movs	r0, #0
 80023b2:	f7ff fb38 	bl	8001a26 <ssd1331_clear_screen>
	ssd1331_display_string(0, 15, "GLOSNOSC:", FONT_1206, GREEN);
 80023b6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	230c      	movs	r3, #12
 80023be:	4aa9      	ldr	r2, [pc, #676]	; (8002664 <main+0x300>)
 80023c0:	210f      	movs	r1, #15
 80023c2:	2000      	movs	r0, #0
 80023c4:	f7ff fae6 	bl	8001994 <ssd1331_display_string>
	ssd1331_display_string(0, 30, "CZAS:", FONT_1206, BLUE);
 80023c8:	231f      	movs	r3, #31
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	230c      	movs	r3, #12
 80023ce:	4aa6      	ldr	r2, [pc, #664]	; (8002668 <main+0x304>)
 80023d0:	211e      	movs	r1, #30
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7ff fade 	bl	8001994 <ssd1331_display_string>
	ssd1331_display_string(30, 45, "2020", FONT_1206, YELLOW);
 80023d8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	230c      	movs	r3, #12
 80023e0:	4aa2      	ldr	r2, [pc, #648]	; (800266c <main+0x308>)
 80023e2:	212d      	movs	r1, #45	; 0x2d
 80023e4:	201e      	movs	r0, #30
 80023e6:	f7ff fad5 	bl	8001994 <ssd1331_display_string>

	CS43_Init(hi2c1, MODE_I2S);
 80023ea:	4ca1      	ldr	r4, [pc, #644]	; (8002670 <main+0x30c>)
 80023ec:	2300      	movs	r3, #0
 80023ee:	9311      	str	r3, [sp, #68]	; 0x44
 80023f0:	4668      	mov	r0, sp
 80023f2:	f104 0310 	add.w	r3, r4, #16
 80023f6:	2244      	movs	r2, #68	; 0x44
 80023f8:	4619      	mov	r1, r3
 80023fa:	f00d ffa5 	bl	8010348 <memcpy>
 80023fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002402:	f7fe fd0d 	bl	8000e20 <CS43_Init>
	  CS43_SetVolume(180);//0-255
 8002406:	20b4      	movs	r0, #180	; 0xb4
 8002408:	f7fe fe5a 	bl	80010c0 <CS43_SetVolume>
	  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 800240c:	2003      	movs	r0, #3
 800240e:	f7fe fe0d 	bl	800102c <CS43_Enable_RightLeft>

	  audioI2S_setHandle(&hi2s3);
 8002412:	4898      	ldr	r0, [pc, #608]	; (8002674 <main+0x310>)
 8002414:	f7fe ffa4 	bl	8001360 <audioI2S_setHandle>

	  bool isSdCardMounted=0;
 8002418:	2300      	movs	r3, #0
 800241a:	71fb      	strb	r3, [r7, #7]
	  bool pauseResumeToggle=0;
 800241c:	2300      	movs	r3, #0
 800241e:	71bb      	strb	r3, [r7, #6]

	  HAL_ADC_Start_IT(&hadc2);
 8002420:	4895      	ldr	r0, [pc, #596]	; (8002678 <main+0x314>)
 8002422:	f000 fd09 	bl	8002e38 <HAL_ADC_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim3);
 8002426:	4895      	ldr	r0, [pc, #596]	; (800267c <main+0x318>)
 8002428:	f006 fd8d 	bl	8008f46 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim2);
 800242c:	4894      	ldr	r0, [pc, #592]	; (8002680 <main+0x31c>)
 800242e:	f006 fd8a 	bl	8008f46 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8002432:	f00d fc5f 	bl	800fcf4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(Appli_state == APPLICATION_START)
 8002436:	4b93      	ldr	r3, [pc, #588]	; (8002684 <main+0x320>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d106      	bne.n	800244c <main+0xe8>
        {
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800243e:	2201      	movs	r2, #1
 8002440:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002444:	4890      	ldr	r0, [pc, #576]	; (8002688 <main+0x324>)
 8002446:	f001 fff3 	bl	8004430 <HAL_GPIO_WritePin>
 800244a:	e010      	b.n	800246e <main+0x10a>
        }
        else if(Appli_state == APPLICATION_DISCONNECT)
 800244c:	4b8d      	ldr	r3, [pc, #564]	; (8002684 <main+0x320>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d10c      	bne.n	800246e <main+0x10a>
        {
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8002454:	2200      	movs	r2, #0
 8002456:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800245a:	488b      	ldr	r0, [pc, #556]	; (8002688 <main+0x324>)
 800245c:	f001 ffe8 	bl	8004430 <HAL_GPIO_WritePin>
          f_mount(NULL, (TCHAR const*)"", 0);
 8002460:	2200      	movs	r2, #0
 8002462:	498a      	ldr	r1, [pc, #552]	; (800268c <main+0x328>)
 8002464:	2000      	movs	r0, #0
 8002466:	f00c fdcf 	bl	800f008 <f_mount>
          isSdCardMounted = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	71fb      	strb	r3, [r7, #7]

        }

        if(Appli_state == APPLICATION_READY)
 800246e:	4b85      	ldr	r3, [pc, #532]	; (8002684 <main+0x320>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d1dd      	bne.n	8002432 <main+0xce>
        {
            seconds = 0;
 8002476:	4b86      	ldr	r3, [pc, #536]	; (8002690 <main+0x32c>)
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
            tens_of_seconds = 0;
 800247c:	4b85      	ldr	r3, [pc, #532]	; (8002694 <main+0x330>)
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
            minutes = 0;
 8002482:	4b85      	ldr	r3, [pc, #532]	; (8002698 <main+0x334>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]

          if(!isSdCardMounted)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	f083 0301 	eor.w	r3, r3, #1
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d006      	beq.n	80024a2 <main+0x13e>
          {
            f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0);
 8002494:	2200      	movs	r2, #0
 8002496:	4981      	ldr	r1, [pc, #516]	; (800269c <main+0x338>)
 8002498:	4881      	ldr	r0, [pc, #516]	; (80026a0 <main+0x33c>)
 800249a:	f00c fdb5 	bl	800f008 <f_mount>
            isSdCardMounted = 1;
 800249e:	2301      	movs	r3, #1
 80024a0:	71fb      	strb	r3, [r7, #7]
          }
          if(!HAL_GPIO_ReadPin(start_button_GPIO_Port, start_button_Pin))
 80024a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024a6:	487f      	ldr	r0, [pc, #508]	; (80026a4 <main+0x340>)
 80024a8:	f001 ffaa 	bl	8004400 <HAL_GPIO_ReadPin>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1bf      	bne.n	8002432 <main+0xce>
          {

              if(actually_track>2)
 80024b2:	4b7d      	ldr	r3, [pc, #500]	; (80026a8 <main+0x344>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	dd03      	ble.n	80024c2 <main+0x15e>
              {
              	actually_track = 0;
 80024ba:	4b7b      	ldr	r3, [pc, #492]	; (80026a8 <main+0x344>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	e006      	b.n	80024d0 <main+0x16c>
              }
              else if(actually_track<0)
 80024c2:	4b79      	ldr	r3, [pc, #484]	; (80026a8 <main+0x344>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	da02      	bge.n	80024d0 <main+0x16c>
              {
            	  actually_track = 2;
 80024ca:	4b77      	ldr	r3, [pc, #476]	; (80026a8 <main+0x344>)
 80024cc:	2202      	movs	r2, #2
 80024ce:	601a      	str	r2, [r3, #0]
              }
              if(last_track>2)
 80024d0:	4b76      	ldr	r3, [pc, #472]	; (80026ac <main+0x348>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	dd03      	ble.n	80024e0 <main+0x17c>
              {
            	  last_track = 0;
 80024d8:	4b74      	ldr	r3, [pc, #464]	; (80026ac <main+0x348>)
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	e006      	b.n	80024ee <main+0x18a>
              }
              else if(last_track<0)
 80024e0:	4b72      	ldr	r3, [pc, #456]	; (80026ac <main+0x348>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	da02      	bge.n	80024ee <main+0x18a>
              {
            	  last_track = 2;
 80024e8:	4b70      	ldr	r3, [pc, #448]	; (80026ac <main+0x348>)
 80024ea:	2202      	movs	r2, #2
 80024ec:	601a      	str	r2, [r3, #0]
              }
           ssd1331_display_string(0, 0, tracks[last_track], FONT_1206, BLACK);
 80024ee:	4b6f      	ldr	r3, [pc, #444]	; (80026ac <main+0x348>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a58      	ldr	r2, [pc, #352]	; (8002654 <main+0x2f0>)
 80024f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024f8:	2300      	movs	r3, #0
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	230c      	movs	r3, #12
 80024fe:	2100      	movs	r1, #0
 8002500:	2000      	movs	r0, #0
 8002502:	f7ff fa47 	bl	8001994 <ssd1331_display_string>
           ssd1331_display_string(0, 0, tracks[actually_track], FONT_1206, RED);
 8002506:	4b68      	ldr	r3, [pc, #416]	; (80026a8 <main+0x344>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a52      	ldr	r2, [pc, #328]	; (8002654 <main+0x2f0>)
 800250c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002510:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	230c      	movs	r3, #12
 8002518:	2100      	movs	r1, #0
 800251a:	2000      	movs	r0, #0
 800251c:	f7ff fa3a 	bl	8001994 <ssd1331_display_string>

           HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8002520:	2201      	movs	r2, #1
 8002522:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002526:	4858      	ldr	r0, [pc, #352]	; (8002688 <main+0x324>)
 8002528:	f001 ff82 	bl	8004430 <HAL_GPIO_WritePin>

            HAL_Delay(500);
 800252c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002530:	f000 fc1c 	bl	8002d6c <HAL_Delay>
            wavPlayer_fileSelect(tracks[actually_track]);
 8002534:	4b5c      	ldr	r3, [pc, #368]	; (80026a8 <main+0x344>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a46      	ldr	r2, [pc, #280]	; (8002654 <main+0x2f0>)
 800253a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe ffac 	bl	800149c <wavPlayer_fileSelect>

            wavPlayer_play();
 8002544:	f7fe ffd4 	bl	80014f0 <wavPlayer_play>
            is_playing = true;
 8002548:	4b59      	ldr	r3, [pc, #356]	; (80026b0 <main+0x34c>)
 800254a:	2201      	movs	r2, #1
 800254c:	701a      	strb	r2, [r3, #0]


            while(!wavPlayer_isFinished())
 800254e:	e06e      	b.n	800262e <main+0x2ca>
            {
              wavPlayer_process();
 8002550:	f7ff f800 	bl	8001554 <wavPlayer_process>

              if(!HAL_GPIO_ReadPin(next_right_GPIO_Port, next_right_Pin))
 8002554:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002558:	4852      	ldr	r0, [pc, #328]	; (80026a4 <main+0x340>)
 800255a:	f001 ff51 	bl	8004400 <HAL_GPIO_ReadPin>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10f      	bne.n	8002584 <main+0x220>
              {
            	  actually_track++;
 8002564:	4b50      	ldr	r3, [pc, #320]	; (80026a8 <main+0x344>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	3301      	adds	r3, #1
 800256a:	4a4f      	ldr	r2, [pc, #316]	; (80026a8 <main+0x344>)
 800256c:	6013      	str	r3, [r2, #0]
            	  last_track = actually_track;
 800256e:	4b4e      	ldr	r3, [pc, #312]	; (80026a8 <main+0x344>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a4e      	ldr	r2, [pc, #312]	; (80026ac <main+0x348>)
 8002574:	6013      	str	r3, [r2, #0]
            	  last_track--;
 8002576:	4b4d      	ldr	r3, [pc, #308]	; (80026ac <main+0x348>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	3b01      	subs	r3, #1
 800257c:	4a4b      	ldr	r2, [pc, #300]	; (80026ac <main+0x348>)
 800257e:	6013      	str	r3, [r2, #0]
            	  wavPlayer_stop();
 8002580:	f7ff f85a 	bl	8001638 <wavPlayer_stop>
              }

              if(!HAL_GPIO_ReadPin(next_left_GPIO_Port, next_left_Pin))
 8002584:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002588:	4846      	ldr	r0, [pc, #280]	; (80026a4 <main+0x340>)
 800258a:	f001 ff39 	bl	8004400 <HAL_GPIO_ReadPin>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10f      	bne.n	80025b4 <main+0x250>
              {
            	  actually_track--;
 8002594:	4b44      	ldr	r3, [pc, #272]	; (80026a8 <main+0x344>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	3b01      	subs	r3, #1
 800259a:	4a43      	ldr	r2, [pc, #268]	; (80026a8 <main+0x344>)
 800259c:	6013      	str	r3, [r2, #0]
            	  last_track = actually_track;
 800259e:	4b42      	ldr	r3, [pc, #264]	; (80026a8 <main+0x344>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a42      	ldr	r2, [pc, #264]	; (80026ac <main+0x348>)
 80025a4:	6013      	str	r3, [r2, #0]
            	  last_track++;
 80025a6:	4b41      	ldr	r3, [pc, #260]	; (80026ac <main+0x348>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	3301      	adds	r3, #1
 80025ac:	4a3f      	ldr	r2, [pc, #252]	; (80026ac <main+0x348>)
 80025ae:	6013      	str	r3, [r2, #0]
            	  wavPlayer_stop();
 80025b0:	f7ff f842 	bl	8001638 <wavPlayer_stop>
              }

              if(!HAL_GPIO_ReadPin(start_button_GPIO_Port, start_button_Pin))
 80025b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025b8:	483a      	ldr	r0, [pc, #232]	; (80026a4 <main+0x340>)
 80025ba:	f001 ff21 	bl	8004400 <HAL_GPIO_ReadPin>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d134      	bne.n	800262e <main+0x2ca>
              {
                pauseResumeToggle^=1;
 80025c4:	79bb      	ldrb	r3, [r7, #6]
 80025c6:	f083 0301 	eor.w	r3, r3, #1
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bf14      	ite	ne
 80025d0:	2301      	movne	r3, #1
 80025d2:	2300      	moveq	r3, #0
 80025d4:	71bb      	strb	r3, [r7, #6]
                if(pauseResumeToggle)
 80025d6:	79bb      	ldrb	r3, [r7, #6]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00f      	beq.n	80025fc <main+0x298>
                {

                  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80025dc:	2201      	movs	r2, #1
 80025de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025e2:	4829      	ldr	r0, [pc, #164]	; (8002688 <main+0x324>)
 80025e4:	f001 ff24 	bl	8004430 <HAL_GPIO_WritePin>
                  wavPlayer_pause();
 80025e8:	f7ff f832 	bl	8001650 <wavPlayer_pause>
                  is_playing = false;
 80025ec:	4b30      	ldr	r3, [pc, #192]	; (80026b0 <main+0x34c>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]
                  HAL_Delay(500);
 80025f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025f6:	f000 fbb9 	bl	8002d6c <HAL_Delay>
 80025fa:	e018      	b.n	800262e <main+0x2ca>
                }
                else
                {
                  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80025fc:	2200      	movs	r2, #0
 80025fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002602:	4821      	ldr	r0, [pc, #132]	; (8002688 <main+0x324>)
 8002604:	f001 ff14 	bl	8004430 <HAL_GPIO_WritePin>
                  HAL_Delay(1000);
 8002608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800260c:	f000 fbae 	bl	8002d6c <HAL_Delay>
                  if(!HAL_GPIO_ReadPin(start_button_GPIO_Port, start_button_Pin))
 8002610:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002614:	4823      	ldr	r0, [pc, #140]	; (80026a4 <main+0x340>)
 8002616:	f001 fef3 	bl	8004400 <HAL_GPIO_ReadPin>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <main+0x2c0>
                  {

                    wavPlayer_stop();
 8002620:	f7ff f80a 	bl	8001638 <wavPlayer_stop>
                  }

                	  is_playing = true;
 8002624:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <main+0x34c>)
 8002626:	2201      	movs	r2, #1
 8002628:	701a      	strb	r2, [r3, #0]
                    wavPlayer_resume();
 800262a:	f7ff f817 	bl	800165c <wavPlayer_resume>
            while(!wavPlayer_isFinished())
 800262e:	f7ff f81b 	bl	8001668 <wavPlayer_isFinished>
 8002632:	4603      	mov	r3, r0
 8002634:	f083 0301 	eor.w	r3, r3, #1
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d188      	bne.n	8002550 <main+0x1ec>

                }
              }
            }

            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800263e:	2200      	movs	r2, #0
 8002640:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002644:	4810      	ldr	r0, [pc, #64]	; (8002688 <main+0x324>)
 8002646:	f001 fef3 	bl	8004430 <HAL_GPIO_WritePin>
            HAL_Delay(1000);
 800264a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800264e:	f000 fb8d 	bl	8002d6c <HAL_Delay>
    MX_USB_HOST_Process();
 8002652:	e6ee      	b.n	8002432 <main+0xce>
 8002654:	200014f8 	.word	0x200014f8
 8002658:	08010b88 	.word	0x08010b88
 800265c:	08010b94 	.word	0x08010b94
 8002660:	08010ba0 	.word	0x08010ba0
 8002664:	08010bac 	.word	0x08010bac
 8002668:	08010bb8 	.word	0x08010bb8
 800266c:	08010bc0 	.word	0x08010bc0
 8002670:	200013fc 	.word	0x200013fc
 8002674:	200014b0 	.word	0x200014b0
 8002678:	200013b4 	.word	0x200013b4
 800267c:	2000157c 	.word	0x2000157c
 8002680:	200015bc 	.word	0x200015bc
 8002684:	200013a8 	.word	0x200013a8
 8002688:	40020c00 	.word	0x40020c00
 800268c:	08010bc8 	.word	0x08010bc8
 8002690:	2000135c 	.word	0x2000135c
 8002694:	20001360 	.word	0x20001360
 8002698:	20001364 	.word	0x20001364
 800269c:	20001600 	.word	0x20001600
 80026a0:	20001834 	.word	0x20001834
 80026a4:	40021000 	.word	0x40021000
 80026a8:	20001354 	.word	0x20001354
 80026ac:	20001358 	.word	0x20001358
 80026b0:	20001368 	.word	0x20001368

080026b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b098      	sub	sp, #96	; 0x60
 80026b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026be:	2230      	movs	r2, #48	; 0x30
 80026c0:	2100      	movs	r1, #0
 80026c2:	4618      	mov	r0, r3
 80026c4:	f00d fe4b 	bl	801035e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026c8:	f107 031c 	add.w	r3, r7, #28
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026d8:	f107 030c 	add.w	r3, r7, #12
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	4b31      	ldr	r3, [pc, #196]	; (80027b0 <SystemClock_Config+0xfc>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4a30      	ldr	r2, [pc, #192]	; (80027b0 <SystemClock_Config+0xfc>)
 80026f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f4:	6413      	str	r3, [r2, #64]	; 0x40
 80026f6:	4b2e      	ldr	r3, [pc, #184]	; (80027b0 <SystemClock_Config+0xfc>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002702:	2300      	movs	r3, #0
 8002704:	607b      	str	r3, [r7, #4]
 8002706:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <SystemClock_Config+0x100>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a2a      	ldr	r2, [pc, #168]	; (80027b4 <SystemClock_Config+0x100>)
 800270c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	4b28      	ldr	r3, [pc, #160]	; (80027b4 <SystemClock_Config+0x100>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800271e:	2301      	movs	r3, #1
 8002720:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002726:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002728:	2302      	movs	r3, #2
 800272a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800272c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002730:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002732:	2308      	movs	r3, #8
 8002734:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002736:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800273a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800273c:	2302      	movs	r3, #2
 800273e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002740:	2307      	movs	r3, #7
 8002742:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002744:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002748:	4618      	mov	r0, r3
 800274a:	f005 fbd5 	bl	8007ef8 <HAL_RCC_OscConfig>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002754:	f000 f830 	bl	80027b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002758:	230f      	movs	r3, #15
 800275a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800275c:	2302      	movs	r3, #2
 800275e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002760:	2300      	movs	r3, #0
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002764:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002768:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800276a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002770:	f107 031c 	add.w	r3, r7, #28
 8002774:	2105      	movs	r1, #5
 8002776:	4618      	mov	r0, r3
 8002778:	f005 fe2e 	bl	80083d8 <HAL_RCC_ClockConfig>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002782:	f000 f819 	bl	80027b8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002786:	2301      	movs	r3, #1
 8002788:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 800278a:	f240 130f 	movw	r3, #271	; 0x10f
 800278e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 8002790:	2306      	movs	r3, #6
 8002792:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002794:	f107 030c 	add.w	r3, r7, #12
 8002798:	4618      	mov	r0, r3
 800279a:	f005 fffb 	bl	8008794 <HAL_RCCEx_PeriphCLKConfig>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80027a4:	f000 f808 	bl	80027b8 <Error_Handler>
  }
}
 80027a8:	bf00      	nop
 80027aa:	3760      	adds	r7, #96	; 0x60
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40007000 	.word	0x40007000

080027b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80027cc:	4b17      	ldr	r3, [pc, #92]	; (800282c <MX_SPI1_Init+0x64>)
 80027ce:	4a18      	ldr	r2, [pc, #96]	; (8002830 <MX_SPI1_Init+0x68>)
 80027d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027d2:	4b16      	ldr	r3, [pc, #88]	; (800282c <MX_SPI1_Init+0x64>)
 80027d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027da:	4b14      	ldr	r3, [pc, #80]	; (800282c <MX_SPI1_Init+0x64>)
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027e0:	4b12      	ldr	r3, [pc, #72]	; (800282c <MX_SPI1_Init+0x64>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80027e6:	4b11      	ldr	r3, [pc, #68]	; (800282c <MX_SPI1_Init+0x64>)
 80027e8:	2202      	movs	r2, #2
 80027ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027ec:	4b0f      	ldr	r3, [pc, #60]	; (800282c <MX_SPI1_Init+0x64>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027f2:	4b0e      	ldr	r3, [pc, #56]	; (800282c <MX_SPI1_Init+0x64>)
 80027f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80027fa:	4b0c      	ldr	r3, [pc, #48]	; (800282c <MX_SPI1_Init+0x64>)
 80027fc:	2208      	movs	r2, #8
 80027fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002800:	4b0a      	ldr	r3, [pc, #40]	; (800282c <MX_SPI1_Init+0x64>)
 8002802:	2200      	movs	r2, #0
 8002804:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <MX_SPI1_Init+0x64>)
 8002808:	2200      	movs	r2, #0
 800280a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800280c:	4b07      	ldr	r3, [pc, #28]	; (800282c <MX_SPI1_Init+0x64>)
 800280e:	2200      	movs	r2, #0
 8002810:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <MX_SPI1_Init+0x64>)
 8002814:	220a      	movs	r2, #10
 8002816:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002818:	4804      	ldr	r0, [pc, #16]	; (800282c <MX_SPI1_Init+0x64>)
 800281a:	f006 f925 	bl	8008a68 <HAL_SPI_Init>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002824:	f7ff ffc8 	bl	80027b8 <Error_Handler>
  }

}
 8002828:	bf00      	nop
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20001524 	.word	0x20001524
 8002830:	40013000 	.word	0x40013000

08002834 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	; 0x28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 0314 	add.w	r3, r7, #20
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a19      	ldr	r2, [pc, #100]	; (80028b8 <HAL_SPI_MspInit+0x84>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d12b      	bne.n	80028ae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	4b18      	ldr	r3, [pc, #96]	; (80028bc <HAL_SPI_MspInit+0x88>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	4a17      	ldr	r2, [pc, #92]	; (80028bc <HAL_SPI_MspInit+0x88>)
 8002860:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002864:	6453      	str	r3, [r2, #68]	; 0x44
 8002866:	4b15      	ldr	r3, [pc, #84]	; (80028bc <HAL_SPI_MspInit+0x88>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	4b11      	ldr	r3, [pc, #68]	; (80028bc <HAL_SPI_MspInit+0x88>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	4a10      	ldr	r2, [pc, #64]	; (80028bc <HAL_SPI_MspInit+0x88>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6313      	str	r3, [r2, #48]	; 0x30
 8002882:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <HAL_SPI_MspInit+0x88>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SCK_Pin|MOSI_Pin;
 800288e:	23a0      	movs	r3, #160	; 0xa0
 8002890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289a:	2300      	movs	r3, #0
 800289c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800289e:	2305      	movs	r3, #5
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a2:	f107 0314 	add.w	r3, r7, #20
 80028a6:	4619      	mov	r1, r3
 80028a8:	4805      	ldr	r0, [pc, #20]	; (80028c0 <HAL_SPI_MspInit+0x8c>)
 80028aa:	f001 fc0f 	bl	80040cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80028ae:	bf00      	nop
 80028b0:	3728      	adds	r7, #40	; 0x28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40013000 	.word	0x40013000
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40020000 	.word	0x40020000

080028c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	4b14      	ldr	r3, [pc, #80]	; (8002920 <HAL_MspInit+0x5c>)
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	4a13      	ldr	r2, [pc, #76]	; (8002920 <HAL_MspInit+0x5c>)
 80028d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d8:	6453      	str	r3, [r2, #68]	; 0x44
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <HAL_MspInit+0x5c>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	603b      	str	r3, [r7, #0]
 80028ea:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <HAL_MspInit+0x5c>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	4a0c      	ldr	r2, [pc, #48]	; (8002920 <HAL_MspInit+0x5c>)
 80028f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f4:	6413      	str	r3, [r2, #64]	; 0x40
 80028f6:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <HAL_MspInit+0x5c>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002902:	2007      	movs	r0, #7
 8002904:	f000 ffc2 	bl	800388c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8002908:	2200      	movs	r2, #0
 800290a:	2100      	movs	r1, #0
 800290c:	2001      	movs	r0, #1
 800290e:	f000 ffc8 	bl	80038a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8002912:	2001      	movs	r0, #1
 8002914:	f000 ffe1 	bl	80038da <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40023800 	.word	0x40023800

08002924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002932:	b480      	push	{r7}
 8002934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002936:	e7fe      	b.n	8002936 <HardFault_Handler+0x4>

08002938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800293c:	e7fe      	b.n	800293c <MemManage_Handler+0x4>

0800293e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800293e:	b480      	push	{r7}
 8002940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002942:	e7fe      	b.n	8002942 <BusFault_Handler+0x4>

08002944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002948:	e7fe      	b.n	8002948 <UsageFault_Handler+0x4>

0800294a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002966:	b480      	push	{r7}
 8002968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002978:	f000 f9d8 	bl	8002d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800297c:	bf00      	nop
 800297e:	bd80      	pop	{r7, pc}

08002980 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8002984:	f005 fa9e 	bl	8007ec4 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8002988:	bf00      	nop
 800298a:	bd80      	pop	{r7, pc}

0800298c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002990:	4802      	ldr	r0, [pc, #8]	; (800299c <DMA1_Stream5_IRQHandler+0x10>)
 8002992:	f001 f933 	bl	8003bfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20001450 	.word	0x20001450

080029a0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 80029a4:	4802      	ldr	r0, [pc, #8]	; (80029b0 <ADC_IRQHandler+0x10>)
 80029a6:	f000 fb17 	bl	8002fd8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	200013b4 	.word	0x200013b4

080029b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029b8:	4802      	ldr	r0, [pc, #8]	; (80029c4 <TIM2_IRQHandler+0x10>)
 80029ba:	f006 fae8 	bl	8008f8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	200015bc 	.word	0x200015bc

080029c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029cc:	4802      	ldr	r0, [pc, #8]	; (80029d8 <TIM3_IRQHandler+0x10>)
 80029ce:	f006 fade 	bl	8008f8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	2000157c 	.word	0x2000157c

080029dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80029e0:	4802      	ldr	r0, [pc, #8]	; (80029ec <OTG_FS_IRQHandler+0x10>)
 80029e2:	f001 ffe9 	bl	80049b8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20001e40 	.word	0x20001e40

080029f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80029f8:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <_sbrk+0x50>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <_sbrk+0x16>
		heap_end = &end;
 8002a00:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <_sbrk+0x50>)
 8002a02:	4a10      	ldr	r2, [pc, #64]	; (8002a44 <_sbrk+0x54>)
 8002a04:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002a06:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <_sbrk+0x50>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <_sbrk+0x50>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4413      	add	r3, r2
 8002a14:	466a      	mov	r2, sp
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d907      	bls.n	8002a2a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002a1a:	f00d fc5b 	bl	80102d4 <__errno>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	230c      	movs	r3, #12
 8002a22:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002a24:	f04f 33ff 	mov.w	r3, #4294967295
 8002a28:	e006      	b.n	8002a38 <_sbrk+0x48>
	}

	heap_end += incr;
 8002a2a:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <_sbrk+0x50>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	4a03      	ldr	r2, [pc, #12]	; (8002a40 <_sbrk+0x50>)
 8002a34:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002a36:	68fb      	ldr	r3, [r7, #12]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	2000136c 	.word	0x2000136c
 8002a44:	20002108 	.word	0x20002108

08002a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a4c:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <SystemInit+0x28>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a52:	4a07      	ldr	r2, [pc, #28]	; (8002a70 <SystemInit+0x28>)
 8002a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a5c:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <SystemInit+0x28>)
 8002a5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a62:	609a      	str	r2, [r3, #8]
#endif
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a7a:	f107 0308 	add.w	r3, r7, #8
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	605a      	str	r2, [r3, #4]
 8002a84:	609a      	str	r2, [r3, #8]
 8002a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a88:	463b      	mov	r3, r7
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8002a90:	4b1e      	ldr	r3, [pc, #120]	; (8002b0c <MX_TIM2_Init+0x98>)
 8002a92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8002a98:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <MX_TIM2_Init+0x98>)
 8002a9a:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa0:	4b1a      	ldr	r3, [pc, #104]	; (8002b0c <MX_TIM2_Init+0x98>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8399;
 8002aa6:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <MX_TIM2_Init+0x98>)
 8002aa8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002aac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aae:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <MX_TIM2_Init+0x98>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab4:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <MX_TIM2_Init+0x98>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002aba:	4814      	ldr	r0, [pc, #80]	; (8002b0c <MX_TIM2_Init+0x98>)
 8002abc:	f006 fa18 	bl	8008ef0 <HAL_TIM_Base_Init>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002ac6:	f7ff fe77 	bl	80027b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ace:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ad0:	f107 0308 	add.w	r3, r7, #8
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	480d      	ldr	r0, [pc, #52]	; (8002b0c <MX_TIM2_Init+0x98>)
 8002ad8:	f006 fb61 	bl	800919e <HAL_TIM_ConfigClockSource>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002ae2:	f7ff fe69 	bl	80027b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002aee:	463b      	mov	r3, r7
 8002af0:	4619      	mov	r1, r3
 8002af2:	4806      	ldr	r0, [pc, #24]	; (8002b0c <MX_TIM2_Init+0x98>)
 8002af4:	f006 fd6c 	bl	80095d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002afe:	f7ff fe5b 	bl	80027b8 <Error_Handler>
  }

}
 8002b02:	bf00      	nop
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	200015bc 	.word	0x200015bc

08002b10 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b16:	f107 0308 	add.w	r3, r7, #8
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	609a      	str	r2, [r3, #8]
 8002b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b24:	463b      	mov	r3, r7
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002b2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <MX_TIM3_Init+0x94>)
 8002b2e:	4a1e      	ldr	r2, [pc, #120]	; (8002ba8 <MX_TIM3_Init+0x98>)
 8002b30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8002b32:	4b1c      	ldr	r3, [pc, #112]	; (8002ba4 <MX_TIM3_Init+0x94>)
 8002b34:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <MX_TIM3_Init+0x94>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1049;
 8002b40:	4b18      	ldr	r3, [pc, #96]	; (8002ba4 <MX_TIM3_Init+0x94>)
 8002b42:	f240 4219 	movw	r2, #1049	; 0x419
 8002b46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b48:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <MX_TIM3_Init+0x94>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b4e:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <MX_TIM3_Init+0x94>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b54:	4813      	ldr	r0, [pc, #76]	; (8002ba4 <MX_TIM3_Init+0x94>)
 8002b56:	f006 f9cb 	bl	8008ef0 <HAL_TIM_Base_Init>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002b60:	f7ff fe2a 	bl	80027b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b6a:	f107 0308 	add.w	r3, r7, #8
 8002b6e:	4619      	mov	r1, r3
 8002b70:	480c      	ldr	r0, [pc, #48]	; (8002ba4 <MX_TIM3_Init+0x94>)
 8002b72:	f006 fb14 	bl	800919e <HAL_TIM_ConfigClockSource>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002b7c:	f7ff fe1c 	bl	80027b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b80:	2300      	movs	r3, #0
 8002b82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b84:	2300      	movs	r3, #0
 8002b86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b88:	463b      	mov	r3, r7
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4805      	ldr	r0, [pc, #20]	; (8002ba4 <MX_TIM3_Init+0x94>)
 8002b8e:	f006 fd1f 	bl	80095d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002b98:	f7ff fe0e 	bl	80027b8 <Error_Handler>
  }

}
 8002b9c:	bf00      	nop
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	2000157c 	.word	0x2000157c
 8002ba8:	40000400 	.word	0x40000400

08002bac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bbc:	d116      	bne.n	8002bec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <HAL_TIM_Base_MspInit+0x80>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	4a19      	ldr	r2, [pc, #100]	; (8002c2c <HAL_TIM_Base_MspInit+0x80>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bce:	4b17      	ldr	r3, [pc, #92]	; (8002c2c <HAL_TIM_Base_MspInit+0x80>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2100      	movs	r1, #0
 8002bde:	201c      	movs	r0, #28
 8002be0:	f000 fe5f 	bl	80038a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002be4:	201c      	movs	r0, #28
 8002be6:	f000 fe78 	bl	80038da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002bea:	e01a      	b.n	8002c22 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM3)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a0f      	ldr	r2, [pc, #60]	; (8002c30 <HAL_TIM_Base_MspInit+0x84>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d115      	bne.n	8002c22 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <HAL_TIM_Base_MspInit+0x80>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	4a0b      	ldr	r2, [pc, #44]	; (8002c2c <HAL_TIM_Base_MspInit+0x80>)
 8002c00:	f043 0302 	orr.w	r3, r3, #2
 8002c04:	6413      	str	r3, [r2, #64]	; 0x40
 8002c06:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <HAL_TIM_Base_MspInit+0x80>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	60bb      	str	r3, [r7, #8]
 8002c10:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c12:	2200      	movs	r2, #0
 8002c14:	2100      	movs	r1, #0
 8002c16:	201d      	movs	r0, #29
 8002c18:	f000 fe43 	bl	80038a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c1c:	201d      	movs	r0, #29
 8002c1e:	f000 fe5c 	bl	80038da <HAL_NVIC_EnableIRQ>
}
 8002c22:	bf00      	nop
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40000400 	.word	0x40000400

08002c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c3a:	e003      	b.n	8002c44 <LoopCopyDataInit>

08002c3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c42:	3104      	adds	r1, #4

08002c44 <LoopCopyDataInit>:
    
LoopCopyDataInit:  ldr  r0, =_sdata
 8002c44:	480b      	ldr	r0, [pc, #44]	; (8002c74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c46:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c4c:	d3f6      	bcc.n	8002c3c <CopyDataInit>
  ldr  r2, =_sbss
 8002c4e:	4a0b      	ldr	r2, [pc, #44]	; (8002c7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c50:	e002      	b.n	8002c58 <LoopFillZerobss>

08002c52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c54:	f842 3b04 	str.w	r3, [r2], #4

08002c58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c58:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c5c:	d3f9      	bcc.n	8002c52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c5e:	f7ff fef3 	bl	8002a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c62:	f00d fb3d 	bl	80102e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c66:	f7ff fb7d 	bl	8002364 <main>
  bx  lr    
 8002c6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c6c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002c70:	080117d0 	.word	0x080117d0
LoopCopyDataInit:  ldr  r0, =_sdata
 8002c74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c78:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8002c7c:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8002c80:	20002108 	.word	0x20002108

08002c84 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c84:	e7fe      	b.n	8002c84 <CAN1_RX0_IRQHandler>
	...

08002c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c8c:	4b0e      	ldr	r3, [pc, #56]	; (8002cc8 <HAL_Init+0x40>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a0d      	ldr	r2, [pc, #52]	; (8002cc8 <HAL_Init+0x40>)
 8002c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_Init+0x40>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <HAL_Init+0x40>)
 8002c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ca4:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <HAL_Init+0x40>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a07      	ldr	r2, [pc, #28]	; (8002cc8 <HAL_Init+0x40>)
 8002caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb0:	2003      	movs	r0, #3
 8002cb2:	f000 fdeb 	bl	800388c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f000 f808 	bl	8002ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cbc:	f7ff fe02 	bl	80028c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40023c00 	.word	0x40023c00

08002ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cd4:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_InitTick+0x54>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <HAL_InitTick+0x58>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 fe03 	bl	80038f6 <HAL_SYSTICK_Config>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e00e      	b.n	8002d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b0f      	cmp	r3, #15
 8002cfe:	d80a      	bhi.n	8002d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d00:	2200      	movs	r2, #0
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	f04f 30ff 	mov.w	r0, #4294967295
 8002d08:	f000 fdcb 	bl	80038a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d0c:	4a06      	ldr	r2, [pc, #24]	; (8002d28 <HAL_InitTick+0x5c>)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	e000      	b.n	8002d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20000008 	.word	0x20000008
 8002d24:	20000010 	.word	0x20000010
 8002d28:	2000000c 	.word	0x2000000c

08002d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d30:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_IncTick+0x20>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <HAL_IncTick+0x24>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	4a04      	ldr	r2, [pc, #16]	; (8002d50 <HAL_IncTick+0x24>)
 8002d3e:	6013      	str	r3, [r2, #0]
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	20000010 	.word	0x20000010
 8002d50:	200015fc 	.word	0x200015fc

08002d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return uwTick;
 8002d58:	4b03      	ldr	r3, [pc, #12]	; (8002d68 <HAL_GetTick+0x14>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	200015fc 	.word	0x200015fc

08002d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d74:	f7ff ffee 	bl	8002d54 <HAL_GetTick>
 8002d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d005      	beq.n	8002d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d86:	4b09      	ldr	r3, [pc, #36]	; (8002dac <HAL_Delay+0x40>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4413      	add	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d92:	bf00      	nop
 8002d94:	f7ff ffde 	bl	8002d54 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d8f7      	bhi.n	8002d94 <HAL_Delay+0x28>
  {
  }
}
 8002da4:	bf00      	nop
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20000010 	.word	0x20000010

08002db0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e033      	b.n	8002e2e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7fe ff4c 	bl	8001c6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d118      	bne.n	8002e20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002df6:	f023 0302 	bic.w	r3, r3, #2
 8002dfa:	f043 0202 	orr.w	r2, r3, #2
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fb6c 	bl	80034e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f023 0303 	bic.w	r3, r3, #3
 8002e16:	f043 0201 	orr.w	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40
 8002e1e:	e001      	b.n	8002e24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_Start_IT+0x1a>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e0b0      	b.n	8002fb4 <HAL_ADC_Start_IT+0x17c>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d018      	beq.n	8002e9a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e78:	4b51      	ldr	r3, [pc, #324]	; (8002fc0 <HAL_ADC_Start_IT+0x188>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a51      	ldr	r2, [pc, #324]	; (8002fc4 <HAL_ADC_Start_IT+0x18c>)
 8002e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e82:	0c9a      	lsrs	r2, r3, #18
 8002e84:	4613      	mov	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4413      	add	r3, r2
 8002e8a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e8c:	e002      	b.n	8002e94 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	3b01      	subs	r3, #1
 8002e92:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f9      	bne.n	8002e8e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	f040 8084 	bne.w	8002fb2 <HAL_ADC_Start_IT+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002eb2:	f023 0301 	bic.w	r3, r3, #1
 8002eb6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d007      	beq.n	8002edc <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ed4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee8:	d106      	bne.n	8002ef8 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	f023 0206 	bic.w	r2, r3, #6
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	645a      	str	r2, [r3, #68]	; 0x44
 8002ef6:	e002      	b.n	8002efe <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f06:	4b30      	ldr	r3, [pc, #192]	; (8002fc8 <HAL_ADC_Start_IT+0x190>)
 8002f08:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f12:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f22:	f043 0320 	orr.w	r3, r3, #32
 8002f26:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 031f 	and.w	r3, r3, #31
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d12a      	bne.n	8002f8a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a24      	ldr	r2, [pc, #144]	; (8002fcc <HAL_ADC_Start_IT+0x194>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d015      	beq.n	8002f6a <HAL_ADC_Start_IT+0x132>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a23      	ldr	r2, [pc, #140]	; (8002fd0 <HAL_ADC_Start_IT+0x198>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d105      	bne.n	8002f54 <HAL_ADC_Start_IT+0x11c>
 8002f48:	4b1f      	ldr	r3, [pc, #124]	; (8002fc8 <HAL_ADC_Start_IT+0x190>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a1e      	ldr	r2, [pc, #120]	; (8002fd4 <HAL_ADC_Start_IT+0x19c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d129      	bne.n	8002fb2 <HAL_ADC_Start_IT+0x17a>
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <HAL_ADC_Start_IT+0x190>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	2b0f      	cmp	r3, #15
 8002f68:	d823      	bhi.n	8002fb2 <HAL_ADC_Start_IT+0x17a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d11c      	bne.n	8002fb2 <HAL_ADC_Start_IT+0x17a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	e013      	b.n	8002fb2 <HAL_ADC_Start_IT+0x17a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a0f      	ldr	r2, [pc, #60]	; (8002fcc <HAL_ADC_Start_IT+0x194>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d10e      	bne.n	8002fb2 <HAL_ADC_Start_IT+0x17a>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d107      	bne.n	8002fb2 <HAL_ADC_Start_IT+0x17a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fb0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	20000008 	.word	0x20000008
 8002fc4:	431bde83 	.word	0x431bde83
 8002fc8:	40012300 	.word	0x40012300
 8002fcc:	40012000 	.word	0x40012000
 8002fd0:	40012100 	.word	0x40012100
 8002fd4:	40012200 	.word	0x40012200

08002fd8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	bf0c      	ite	eq
 8002ff6:	2301      	moveq	r3, #1
 8002ff8:	2300      	movne	r3, #0
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	2b20      	cmp	r3, #32
 800300a:	bf0c      	ite	eq
 800300c:	2301      	moveq	r3, #1
 800300e:	2300      	movne	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d049      	beq.n	80030ae <HAL_ADC_IRQHandler+0xd6>
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d046      	beq.n	80030ae <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	f003 0310 	and.w	r3, r3, #16
 8003028:	2b00      	cmp	r3, #0
 800302a:	d105      	bne.n	8003038 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d12b      	bne.n	800309e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800304a:	2b00      	cmp	r3, #0
 800304c:	d127      	bne.n	800309e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003058:	2b00      	cmp	r3, #0
 800305a:	d006      	beq.n	800306a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003066:	2b00      	cmp	r3, #0
 8003068:	d119      	bne.n	800309e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0220 	bic.w	r2, r2, #32
 8003078:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d105      	bne.n	800309e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f043 0201 	orr.w	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff f872 	bl	8002188 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0212 	mvn.w	r2, #18
 80030ac:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	bf0c      	ite	eq
 80030bc:	2301      	moveq	r3, #1
 80030be:	2300      	movne	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ce:	2b80      	cmp	r3, #128	; 0x80
 80030d0:	bf0c      	ite	eq
 80030d2:	2301      	moveq	r3, #1
 80030d4:	2300      	movne	r3, #0
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d057      	beq.n	8003190 <HAL_ADC_IRQHandler+0x1b8>
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d054      	beq.n	8003190 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f003 0310 	and.w	r3, r3, #16
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d105      	bne.n	80030fe <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d139      	bne.n	8003180 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003112:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003116:	2b00      	cmp	r3, #0
 8003118:	d006      	beq.n	8003128 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003124:	2b00      	cmp	r3, #0
 8003126:	d12b      	bne.n	8003180 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003132:	2b00      	cmp	r3, #0
 8003134:	d124      	bne.n	8003180 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003140:	2b00      	cmp	r3, #0
 8003142:	d11d      	bne.n	8003180 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003148:	2b00      	cmp	r3, #0
 800314a:	d119      	bne.n	8003180 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800315a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d105      	bne.n	8003180 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	f043 0201 	orr.w	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 faa9 	bl	80036d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f06f 020c 	mvn.w	r2, #12
 800318e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b01      	cmp	r3, #1
 800319c:	bf0c      	ite	eq
 800319e:	2301      	moveq	r3, #1
 80031a0:	2300      	movne	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b0:	2b40      	cmp	r3, #64	; 0x40
 80031b2:	bf0c      	ite	eq
 80031b4:	2301      	moveq	r3, #1
 80031b6:	2300      	movne	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d017      	beq.n	80031f2 <HAL_ADC_IRQHandler+0x21a>
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d014      	beq.n	80031f2 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d10d      	bne.n	80031f2 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f846 	bl	8003274 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0201 	mvn.w	r2, #1
 80031f0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0320 	and.w	r3, r3, #32
 80031fc:	2b20      	cmp	r3, #32
 80031fe:	bf0c      	ite	eq
 8003200:	2301      	moveq	r3, #1
 8003202:	2300      	movne	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003212:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003216:	bf0c      	ite	eq
 8003218:	2301      	moveq	r3, #1
 800321a:	2300      	movne	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d015      	beq.n	8003252 <HAL_ADC_IRQHandler+0x27a>
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d012      	beq.n	8003252 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003230:	f043 0202 	orr.w	r2, r3, #2
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f06f 0220 	mvn.w	r2, #32
 8003240:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f820 	bl	8003288 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0220 	mvn.w	r2, #32
 8003250:	601a      	str	r2, [r3, #0]
  }
}
 8003252:	bf00      	nop
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003268:	4618      	mov	r0, r3
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x1c>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e105      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x228>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b09      	cmp	r3, #9
 80032c6:	d925      	bls.n	8003314 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68d9      	ldr	r1, [r3, #12]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	4613      	mov	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4413      	add	r3, r2
 80032dc:	3b1e      	subs	r3, #30
 80032de:	2207      	movs	r2, #7
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43da      	mvns	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	400a      	ands	r2, r1
 80032ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68d9      	ldr	r1, [r3, #12]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	4618      	mov	r0, r3
 8003300:	4603      	mov	r3, r0
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4403      	add	r3, r0
 8003306:	3b1e      	subs	r3, #30
 8003308:	409a      	lsls	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	60da      	str	r2, [r3, #12]
 8003312:	e022      	b.n	800335a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6919      	ldr	r1, [r3, #16]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	b29b      	uxth	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	4613      	mov	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	2207      	movs	r2, #7
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43da      	mvns	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	400a      	ands	r2, r1
 8003336:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6919      	ldr	r1, [r3, #16]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	b29b      	uxth	r3, r3
 8003348:	4618      	mov	r0, r3
 800334a:	4603      	mov	r3, r0
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4403      	add	r3, r0
 8003350:	409a      	lsls	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b06      	cmp	r3, #6
 8003360:	d824      	bhi.n	80033ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	3b05      	subs	r3, #5
 8003374:	221f      	movs	r2, #31
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43da      	mvns	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	400a      	ands	r2, r1
 8003382:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	4618      	mov	r0, r3
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	3b05      	subs	r3, #5
 800339e:	fa00 f203 	lsl.w	r2, r0, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	635a      	str	r2, [r3, #52]	; 0x34
 80033aa:	e04c      	b.n	8003446 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b0c      	cmp	r3, #12
 80033b2:	d824      	bhi.n	80033fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	3b23      	subs	r3, #35	; 0x23
 80033c6:	221f      	movs	r2, #31
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43da      	mvns	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	400a      	ands	r2, r1
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	4618      	mov	r0, r3
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	3b23      	subs	r3, #35	; 0x23
 80033f0:	fa00 f203 	lsl.w	r2, r0, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30
 80033fc:	e023      	b.n	8003446 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	3b41      	subs	r3, #65	; 0x41
 8003410:	221f      	movs	r2, #31
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43da      	mvns	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	400a      	ands	r2, r1
 800341e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	b29b      	uxth	r3, r3
 800342c:	4618      	mov	r0, r3
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	3b41      	subs	r3, #65	; 0x41
 800343a:	fa00 f203 	lsl.w	r2, r0, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003446:	4b22      	ldr	r3, [pc, #136]	; (80034d0 <HAL_ADC_ConfigChannel+0x234>)
 8003448:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a21      	ldr	r2, [pc, #132]	; (80034d4 <HAL_ADC_ConfigChannel+0x238>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d109      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x1cc>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b12      	cmp	r3, #18
 800345a:	d105      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a19      	ldr	r2, [pc, #100]	; (80034d4 <HAL_ADC_ConfigChannel+0x238>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d123      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x21e>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b10      	cmp	r3, #16
 8003478:	d003      	beq.n	8003482 <HAL_ADC_ConfigChannel+0x1e6>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b11      	cmp	r3, #17
 8003480:	d11b      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b10      	cmp	r3, #16
 8003494:	d111      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003496:	4b10      	ldr	r3, [pc, #64]	; (80034d8 <HAL_ADC_ConfigChannel+0x23c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a10      	ldr	r2, [pc, #64]	; (80034dc <HAL_ADC_ConfigChannel+0x240>)
 800349c:	fba2 2303 	umull	r2, r3, r2, r3
 80034a0:	0c9a      	lsrs	r2, r3, #18
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034ac:	e002      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	3b01      	subs	r3, #1
 80034b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f9      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	40012300 	.word	0x40012300
 80034d4:	40012000 	.word	0x40012000
 80034d8:	20000008 	.word	0x20000008
 80034dc:	431bde83 	.word	0x431bde83

080034e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034e8:	4b79      	ldr	r3, [pc, #484]	; (80036d0 <ADC_Init+0x1f0>)
 80034ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	431a      	orrs	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003514:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6859      	ldr	r1, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	021a      	lsls	r2, r3, #8
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003538:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6859      	ldr	r1, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800355a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6899      	ldr	r1, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	4a58      	ldr	r2, [pc, #352]	; (80036d4 <ADC_Init+0x1f4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d022      	beq.n	80035be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003586:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6899      	ldr	r1, [r3, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6899      	ldr	r1, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	e00f      	b.n	80035de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0202 	bic.w	r2, r2, #2
 80035ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6899      	ldr	r1, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	7e1b      	ldrb	r3, [r3, #24]
 80035f8:	005a      	lsls	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01b      	beq.n	8003644 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800361a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800362a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6859      	ldr	r1, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	3b01      	subs	r3, #1
 8003638:	035a      	lsls	r2, r3, #13
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	e007      	b.n	8003654 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003652:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003662:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	3b01      	subs	r3, #1
 8003670:	051a      	lsls	r2, r3, #20
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003688:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6899      	ldr	r1, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003696:	025a      	lsls	r2, r3, #9
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6899      	ldr	r1, [r3, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	029a      	lsls	r2, r3, #10
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	609a      	str	r2, [r3, #8]
}
 80036c4:	bf00      	nop
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	40012300 	.word	0x40012300
 80036d4:	0f000001 	.word	0x0f000001

080036d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036fc:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <__NVIC_SetPriorityGrouping+0x44>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003708:	4013      	ands	r3, r2
 800370a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800371c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800371e:	4a04      	ldr	r2, [pc, #16]	; (8003730 <__NVIC_SetPriorityGrouping+0x44>)
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	60d3      	str	r3, [r2, #12]
}
 8003724:	bf00      	nop
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	e000ed00 	.word	0xe000ed00

08003734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003738:	4b04      	ldr	r3, [pc, #16]	; (800374c <__NVIC_GetPriorityGrouping+0x18>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	0a1b      	lsrs	r3, r3, #8
 800373e:	f003 0307 	and.w	r3, r3, #7
}
 8003742:	4618      	mov	r0, r3
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800375a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375e:	2b00      	cmp	r3, #0
 8003760:	db0b      	blt.n	800377a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003762:	79fb      	ldrb	r3, [r7, #7]
 8003764:	f003 021f 	and.w	r2, r3, #31
 8003768:	4907      	ldr	r1, [pc, #28]	; (8003788 <__NVIC_EnableIRQ+0x38>)
 800376a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	2001      	movs	r0, #1
 8003772:	fa00 f202 	lsl.w	r2, r0, r2
 8003776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	e000e100 	.word	0xe000e100

0800378c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	6039      	str	r1, [r7, #0]
 8003796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379c:	2b00      	cmp	r3, #0
 800379e:	db0a      	blt.n	80037b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	490c      	ldr	r1, [pc, #48]	; (80037d8 <__NVIC_SetPriority+0x4c>)
 80037a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037aa:	0112      	lsls	r2, r2, #4
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	440b      	add	r3, r1
 80037b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b4:	e00a      	b.n	80037cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	4908      	ldr	r1, [pc, #32]	; (80037dc <__NVIC_SetPriority+0x50>)
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	3b04      	subs	r3, #4
 80037c4:	0112      	lsls	r2, r2, #4
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	440b      	add	r3, r1
 80037ca:	761a      	strb	r2, [r3, #24]
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	e000e100 	.word	0xe000e100
 80037dc:	e000ed00 	.word	0xe000ed00

080037e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b089      	sub	sp, #36	; 0x24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f1c3 0307 	rsb	r3, r3, #7
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	bf28      	it	cs
 80037fe:	2304      	movcs	r3, #4
 8003800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	3304      	adds	r3, #4
 8003806:	2b06      	cmp	r3, #6
 8003808:	d902      	bls.n	8003810 <NVIC_EncodePriority+0x30>
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3b03      	subs	r3, #3
 800380e:	e000      	b.n	8003812 <NVIC_EncodePriority+0x32>
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003814:	f04f 32ff 	mov.w	r2, #4294967295
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43da      	mvns	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	401a      	ands	r2, r3
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003828:	f04f 31ff 	mov.w	r1, #4294967295
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	fa01 f303 	lsl.w	r3, r1, r3
 8003832:	43d9      	mvns	r1, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003838:	4313      	orrs	r3, r2
         );
}
 800383a:	4618      	mov	r0, r3
 800383c:	3724      	adds	r7, #36	; 0x24
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
	...

08003848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3b01      	subs	r3, #1
 8003854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003858:	d301      	bcc.n	800385e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800385a:	2301      	movs	r3, #1
 800385c:	e00f      	b.n	800387e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800385e:	4a0a      	ldr	r2, [pc, #40]	; (8003888 <SysTick_Config+0x40>)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3b01      	subs	r3, #1
 8003864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003866:	210f      	movs	r1, #15
 8003868:	f04f 30ff 	mov.w	r0, #4294967295
 800386c:	f7ff ff8e 	bl	800378c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <SysTick_Config+0x40>)
 8003872:	2200      	movs	r2, #0
 8003874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003876:	4b04      	ldr	r3, [pc, #16]	; (8003888 <SysTick_Config+0x40>)
 8003878:	2207      	movs	r2, #7
 800387a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	e000e010 	.word	0xe000e010

0800388c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff ff29 	bl	80036ec <__NVIC_SetPriorityGrouping>
}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b086      	sub	sp, #24
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	4603      	mov	r3, r0
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	607a      	str	r2, [r7, #4]
 80038ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038b4:	f7ff ff3e 	bl	8003734 <__NVIC_GetPriorityGrouping>
 80038b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	6978      	ldr	r0, [r7, #20]
 80038c0:	f7ff ff8e 	bl	80037e0 <NVIC_EncodePriority>
 80038c4:	4602      	mov	r2, r0
 80038c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ca:	4611      	mov	r1, r2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff ff5d 	bl	800378c <__NVIC_SetPriority>
}
 80038d2:	bf00      	nop
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	4603      	mov	r3, r0
 80038e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff ff31 	bl	8003750 <__NVIC_EnableIRQ>
}
 80038ee:	bf00      	nop
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff ffa2 	bl	8003848 <SysTick_Config>
 8003904:	4603      	mov	r3, r0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800391c:	f7ff fa1a 	bl	8002d54 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e099      	b.n	8003a60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0201 	bic.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800394c:	e00f      	b.n	800396e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800394e:	f7ff fa01 	bl	8002d54 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b05      	cmp	r3, #5
 800395a:	d908      	bls.n	800396e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2203      	movs	r2, #3
 8003966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e078      	b.n	8003a60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1e8      	bne.n	800394e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4b38      	ldr	r3, [pc, #224]	; (8003a68 <HAL_DMA_Init+0x158>)
 8003988:	4013      	ands	r3, r2
 800398a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800399a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	4313      	orrs	r3, r2
 80039be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	d107      	bne.n	80039d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d0:	4313      	orrs	r3, r2
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f023 0307 	bic.w	r3, r3, #7
 80039ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d117      	bne.n	8003a32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00e      	beq.n	8003a32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 fadf 	bl	8003fd8 <DMA_CheckFifoParam>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2240      	movs	r2, #64	; 0x40
 8003a24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e016      	b.n	8003a60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 fa96 	bl	8003f6c <DMA_CalcBaseAndBitshift>
 8003a40:	4603      	mov	r3, r0
 8003a42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a48:	223f      	movs	r2, #63	; 0x3f
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	f010803f 	.word	0xf010803f

08003a6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
 8003a78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d101      	bne.n	8003a92 <HAL_DMA_Start_IT+0x26>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e040      	b.n	8003b14 <HAL_DMA_Start_IT+0xa8>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d12f      	bne.n	8003b06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	68b9      	ldr	r1, [r7, #8]
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 fa28 	bl	8003f10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac4:	223f      	movs	r2, #63	; 0x3f
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0216 	orr.w	r2, r2, #22
 8003ada:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d007      	beq.n	8003af4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0208 	orr.w	r2, r2, #8
 8003af2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	e005      	b.n	8003b12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b28:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b2a:	f7ff f913 	bl	8002d54 <HAL_GetTick>
 8003b2e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d008      	beq.n	8003b4e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2280      	movs	r2, #128	; 0x80
 8003b40:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e052      	b.n	8003bf4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0216 	bic.w	r2, r2, #22
 8003b5c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695a      	ldr	r2, [r3, #20]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b6c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d103      	bne.n	8003b7e <HAL_DMA_Abort+0x62>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d007      	beq.n	8003b8e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0208 	bic.w	r2, r2, #8
 8003b8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0201 	bic.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b9e:	e013      	b.n	8003bc8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ba0:	f7ff f8d8 	bl	8002d54 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b05      	cmp	r3, #5
 8003bac:	d90c      	bls.n	8003bc8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2203      	movs	r2, #3
 8003bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e015      	b.n	8003bf4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1e4      	bne.n	8003ba0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bda:	223f      	movs	r2, #63	; 0x3f
 8003bdc:	409a      	lsls	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c08:	4b92      	ldr	r3, [pc, #584]	; (8003e54 <HAL_DMA_IRQHandler+0x258>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a92      	ldr	r2, [pc, #584]	; (8003e58 <HAL_DMA_IRQHandler+0x25c>)
 8003c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c12:	0a9b      	lsrs	r3, r3, #10
 8003c14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c26:	2208      	movs	r2, #8
 8003c28:	409a      	lsls	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d01a      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d013      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0204 	bic.w	r2, r2, #4
 8003c4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c54:	2208      	movs	r2, #8
 8003c56:	409a      	lsls	r2, r3
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c60:	f043 0201 	orr.w	r2, r3, #1
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d012      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00b      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	409a      	lsls	r2, r3
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c96:	f043 0202 	orr.w	r2, r3, #2
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca2:	2204      	movs	r2, #4
 8003ca4:	409a      	lsls	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d012      	beq.n	8003cd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00b      	beq.n	8003cd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ccc:	f043 0204 	orr.w	r2, r3, #4
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd8:	2210      	movs	r2, #16
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d043      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d03c      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf6:	2210      	movs	r2, #16
 8003cf8:	409a      	lsls	r2, r3
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d018      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d108      	bne.n	8003d2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d024      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	4798      	blx	r3
 8003d2a:	e01f      	b.n	8003d6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d01b      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	4798      	blx	r3
 8003d3c:	e016      	b.n	8003d6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d107      	bne.n	8003d5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0208 	bic.w	r2, r2, #8
 8003d5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d70:	2220      	movs	r2, #32
 8003d72:	409a      	lsls	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4013      	ands	r3, r2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 808e 	beq.w	8003e9a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0310 	and.w	r3, r3, #16
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8086 	beq.w	8003e9a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d92:	2220      	movs	r2, #32
 8003d94:	409a      	lsls	r2, r3
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b05      	cmp	r3, #5
 8003da4:	d136      	bne.n	8003e14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0216 	bic.w	r2, r2, #22
 8003db4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695a      	ldr	r2, [r3, #20]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d103      	bne.n	8003dd6 <HAL_DMA_IRQHandler+0x1da>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d007      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0208 	bic.w	r2, r2, #8
 8003de4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dea:	223f      	movs	r2, #63	; 0x3f
 8003dec:	409a      	lsls	r2, r3
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d07d      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	4798      	blx	r3
        }
        return;
 8003e12:	e078      	b.n	8003f06 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d01c      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d108      	bne.n	8003e42 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d030      	beq.n	8003e9a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	4798      	blx	r3
 8003e40:	e02b      	b.n	8003e9a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d027      	beq.n	8003e9a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	4798      	blx	r3
 8003e52:	e022      	b.n	8003e9a <HAL_DMA_IRQHandler+0x29e>
 8003e54:	20000008 	.word	0x20000008
 8003e58:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10f      	bne.n	8003e8a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0210 	bic.w	r2, r2, #16
 8003e78:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d032      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d022      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2205      	movs	r2, #5
 8003eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0201 	bic.w	r2, r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	60bb      	str	r3, [r7, #8]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d307      	bcc.n	8003ee2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1f2      	bne.n	8003ec6 <HAL_DMA_IRQHandler+0x2ca>
 8003ee0:	e000      	b.n	8003ee4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003ee2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	4798      	blx	r3
 8003f04:	e000      	b.n	8003f08 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003f06:	bf00      	nop
    }
  }
}
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop

08003f10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2b40      	cmp	r3, #64	; 0x40
 8003f3c:	d108      	bne.n	8003f50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f4e:	e007      	b.n	8003f60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	60da      	str	r2, [r3, #12]
}
 8003f60:	bf00      	nop
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	3b10      	subs	r3, #16
 8003f7c:	4a14      	ldr	r2, [pc, #80]	; (8003fd0 <DMA_CalcBaseAndBitshift+0x64>)
 8003f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f82:	091b      	lsrs	r3, r3, #4
 8003f84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f86:	4a13      	ldr	r2, [pc, #76]	; (8003fd4 <DMA_CalcBaseAndBitshift+0x68>)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b03      	cmp	r3, #3
 8003f98:	d909      	bls.n	8003fae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fa2:	f023 0303 	bic.w	r3, r3, #3
 8003fa6:	1d1a      	adds	r2, r3, #4
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	659a      	str	r2, [r3, #88]	; 0x58
 8003fac:	e007      	b.n	8003fbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fb6:	f023 0303 	bic.w	r3, r3, #3
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	aaaaaaab 	.word	0xaaaaaaab
 8003fd4:	080116f0 	.word	0x080116f0

08003fd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d11f      	bne.n	8004032 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d855      	bhi.n	80040a4 <DMA_CheckFifoParam+0xcc>
 8003ff8:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <DMA_CheckFifoParam+0x28>)
 8003ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffe:	bf00      	nop
 8004000:	08004011 	.word	0x08004011
 8004004:	08004023 	.word	0x08004023
 8004008:	08004011 	.word	0x08004011
 800400c:	080040a5 	.word	0x080040a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d045      	beq.n	80040a8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004020:	e042      	b.n	80040a8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004026:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800402a:	d13f      	bne.n	80040ac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004030:	e03c      	b.n	80040ac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800403a:	d121      	bne.n	8004080 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2b03      	cmp	r3, #3
 8004040:	d836      	bhi.n	80040b0 <DMA_CheckFifoParam+0xd8>
 8004042:	a201      	add	r2, pc, #4	; (adr r2, 8004048 <DMA_CheckFifoParam+0x70>)
 8004044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004048:	08004059 	.word	0x08004059
 800404c:	0800405f 	.word	0x0800405f
 8004050:	08004059 	.word	0x08004059
 8004054:	08004071 	.word	0x08004071
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	73fb      	strb	r3, [r7, #15]
      break;
 800405c:	e02f      	b.n	80040be <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004062:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d024      	beq.n	80040b4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800406e:	e021      	b.n	80040b4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004074:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004078:	d11e      	bne.n	80040b8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800407e:	e01b      	b.n	80040b8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d902      	bls.n	800408c <DMA_CheckFifoParam+0xb4>
 8004086:	2b03      	cmp	r3, #3
 8004088:	d003      	beq.n	8004092 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800408a:	e018      	b.n	80040be <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	73fb      	strb	r3, [r7, #15]
      break;
 8004090:	e015      	b.n	80040be <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00e      	beq.n	80040bc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	73fb      	strb	r3, [r7, #15]
      break;
 80040a2:	e00b      	b.n	80040bc <DMA_CheckFifoParam+0xe4>
      break;
 80040a4:	bf00      	nop
 80040a6:	e00a      	b.n	80040be <DMA_CheckFifoParam+0xe6>
      break;
 80040a8:	bf00      	nop
 80040aa:	e008      	b.n	80040be <DMA_CheckFifoParam+0xe6>
      break;
 80040ac:	bf00      	nop
 80040ae:	e006      	b.n	80040be <DMA_CheckFifoParam+0xe6>
      break;
 80040b0:	bf00      	nop
 80040b2:	e004      	b.n	80040be <DMA_CheckFifoParam+0xe6>
      break;
 80040b4:	bf00      	nop
 80040b6:	e002      	b.n	80040be <DMA_CheckFifoParam+0xe6>
      break;   
 80040b8:	bf00      	nop
 80040ba:	e000      	b.n	80040be <DMA_CheckFifoParam+0xe6>
      break;
 80040bc:	bf00      	nop
    }
  } 
  
  return status; 
 80040be:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b089      	sub	sp, #36	; 0x24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040da:	2300      	movs	r3, #0
 80040dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040de:	2300      	movs	r3, #0
 80040e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040e2:	2300      	movs	r3, #0
 80040e4:	61fb      	str	r3, [r7, #28]
 80040e6:	e16b      	b.n	80043c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040e8:	2201      	movs	r2, #1
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4013      	ands	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	429a      	cmp	r2, r3
 8004102:	f040 815a 	bne.w	80043ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d00b      	beq.n	8004126 <HAL_GPIO_Init+0x5a>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b02      	cmp	r3, #2
 8004114:	d007      	beq.n	8004126 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800411a:	2b11      	cmp	r3, #17
 800411c:	d003      	beq.n	8004126 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b12      	cmp	r3, #18
 8004124:	d130      	bne.n	8004188 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	2203      	movs	r2, #3
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	43db      	mvns	r3, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4013      	ands	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4313      	orrs	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800415c:	2201      	movs	r2, #1
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	43db      	mvns	r3, r3
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4013      	ands	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	091b      	lsrs	r3, r3, #4
 8004172:	f003 0201 	and.w	r2, r3, #1
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4313      	orrs	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	2203      	movs	r2, #3
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d003      	beq.n	80041c8 <HAL_GPIO_Init+0xfc>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b12      	cmp	r3, #18
 80041c6:	d123      	bne.n	8004210 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	08da      	lsrs	r2, r3, #3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3208      	adds	r2, #8
 80041d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	220f      	movs	r2, #15
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	43db      	mvns	r3, r3
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	4013      	ands	r3, r2
 80041ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	4313      	orrs	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	08da      	lsrs	r2, r3, #3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	3208      	adds	r2, #8
 800420a:	69b9      	ldr	r1, [r7, #24]
 800420c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	2203      	movs	r2, #3
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	43db      	mvns	r3, r3
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4013      	ands	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f003 0203 	and.w	r2, r3, #3
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4313      	orrs	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 80b4 	beq.w	80043ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	4b5f      	ldr	r3, [pc, #380]	; (80043d4 <HAL_GPIO_Init+0x308>)
 8004258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425a:	4a5e      	ldr	r2, [pc, #376]	; (80043d4 <HAL_GPIO_Init+0x308>)
 800425c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004260:	6453      	str	r3, [r2, #68]	; 0x44
 8004262:	4b5c      	ldr	r3, [pc, #368]	; (80043d4 <HAL_GPIO_Init+0x308>)
 8004264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800426e:	4a5a      	ldr	r2, [pc, #360]	; (80043d8 <HAL_GPIO_Init+0x30c>)
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	089b      	lsrs	r3, r3, #2
 8004274:	3302      	adds	r3, #2
 8004276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800427a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	220f      	movs	r2, #15
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	43db      	mvns	r3, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4013      	ands	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a51      	ldr	r2, [pc, #324]	; (80043dc <HAL_GPIO_Init+0x310>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d02b      	beq.n	80042f2 <HAL_GPIO_Init+0x226>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a50      	ldr	r2, [pc, #320]	; (80043e0 <HAL_GPIO_Init+0x314>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d025      	beq.n	80042ee <HAL_GPIO_Init+0x222>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a4f      	ldr	r2, [pc, #316]	; (80043e4 <HAL_GPIO_Init+0x318>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d01f      	beq.n	80042ea <HAL_GPIO_Init+0x21e>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a4e      	ldr	r2, [pc, #312]	; (80043e8 <HAL_GPIO_Init+0x31c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d019      	beq.n	80042e6 <HAL_GPIO_Init+0x21a>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a4d      	ldr	r2, [pc, #308]	; (80043ec <HAL_GPIO_Init+0x320>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d013      	beq.n	80042e2 <HAL_GPIO_Init+0x216>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a4c      	ldr	r2, [pc, #304]	; (80043f0 <HAL_GPIO_Init+0x324>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00d      	beq.n	80042de <HAL_GPIO_Init+0x212>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a4b      	ldr	r2, [pc, #300]	; (80043f4 <HAL_GPIO_Init+0x328>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d007      	beq.n	80042da <HAL_GPIO_Init+0x20e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a4a      	ldr	r2, [pc, #296]	; (80043f8 <HAL_GPIO_Init+0x32c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d101      	bne.n	80042d6 <HAL_GPIO_Init+0x20a>
 80042d2:	2307      	movs	r3, #7
 80042d4:	e00e      	b.n	80042f4 <HAL_GPIO_Init+0x228>
 80042d6:	2308      	movs	r3, #8
 80042d8:	e00c      	b.n	80042f4 <HAL_GPIO_Init+0x228>
 80042da:	2306      	movs	r3, #6
 80042dc:	e00a      	b.n	80042f4 <HAL_GPIO_Init+0x228>
 80042de:	2305      	movs	r3, #5
 80042e0:	e008      	b.n	80042f4 <HAL_GPIO_Init+0x228>
 80042e2:	2304      	movs	r3, #4
 80042e4:	e006      	b.n	80042f4 <HAL_GPIO_Init+0x228>
 80042e6:	2303      	movs	r3, #3
 80042e8:	e004      	b.n	80042f4 <HAL_GPIO_Init+0x228>
 80042ea:	2302      	movs	r3, #2
 80042ec:	e002      	b.n	80042f4 <HAL_GPIO_Init+0x228>
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <HAL_GPIO_Init+0x228>
 80042f2:	2300      	movs	r3, #0
 80042f4:	69fa      	ldr	r2, [r7, #28]
 80042f6:	f002 0203 	and.w	r2, r2, #3
 80042fa:	0092      	lsls	r2, r2, #2
 80042fc:	4093      	lsls	r3, r2
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	4313      	orrs	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004304:	4934      	ldr	r1, [pc, #208]	; (80043d8 <HAL_GPIO_Init+0x30c>)
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	089b      	lsrs	r3, r3, #2
 800430a:	3302      	adds	r3, #2
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004312:	4b3a      	ldr	r3, [pc, #232]	; (80043fc <HAL_GPIO_Init+0x330>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	43db      	mvns	r3, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4013      	ands	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004336:	4a31      	ldr	r2, [pc, #196]	; (80043fc <HAL_GPIO_Init+0x330>)
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800433c:	4b2f      	ldr	r3, [pc, #188]	; (80043fc <HAL_GPIO_Init+0x330>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	43db      	mvns	r3, r3
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4013      	ands	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004360:	4a26      	ldr	r2, [pc, #152]	; (80043fc <HAL_GPIO_Init+0x330>)
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004366:	4b25      	ldr	r3, [pc, #148]	; (80043fc <HAL_GPIO_Init+0x330>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	43db      	mvns	r3, r3
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	4013      	ands	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800438a:	4a1c      	ldr	r2, [pc, #112]	; (80043fc <HAL_GPIO_Init+0x330>)
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004390:	4b1a      	ldr	r3, [pc, #104]	; (80043fc <HAL_GPIO_Init+0x330>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	43db      	mvns	r3, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4013      	ands	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043b4:	4a11      	ldr	r2, [pc, #68]	; (80043fc <HAL_GPIO_Init+0x330>)
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	3301      	adds	r3, #1
 80043be:	61fb      	str	r3, [r7, #28]
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	2b0f      	cmp	r3, #15
 80043c4:	f67f ae90 	bls.w	80040e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043c8:	bf00      	nop
 80043ca:	3724      	adds	r7, #36	; 0x24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	40023800 	.word	0x40023800
 80043d8:	40013800 	.word	0x40013800
 80043dc:	40020000 	.word	0x40020000
 80043e0:	40020400 	.word	0x40020400
 80043e4:	40020800 	.word	0x40020800
 80043e8:	40020c00 	.word	0x40020c00
 80043ec:	40021000 	.word	0x40021000
 80043f0:	40021400 	.word	0x40021400
 80043f4:	40021800 	.word	0x40021800
 80043f8:	40021c00 	.word	0x40021c00
 80043fc:	40013c00 	.word	0x40013c00

08004400 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	460b      	mov	r3, r1
 800440a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	887b      	ldrh	r3, [r7, #2]
 8004412:	4013      	ands	r3, r2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004418:	2301      	movs	r3, #1
 800441a:	73fb      	strb	r3, [r7, #15]
 800441c:	e001      	b.n	8004422 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800441e:	2300      	movs	r3, #0
 8004420:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004422:	7bfb      	ldrb	r3, [r7, #15]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	807b      	strh	r3, [r7, #2]
 800443c:	4613      	mov	r3, r2
 800443e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004440:	787b      	ldrb	r3, [r7, #1]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004446:	887a      	ldrh	r2, [r7, #2]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800444c:	e003      	b.n	8004456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800444e:	887b      	ldrh	r3, [r7, #2]
 8004450:	041a      	lsls	r2, r3, #16
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	619a      	str	r2, [r3, #24]
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
 800446a:	460b      	mov	r3, r1
 800446c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695a      	ldr	r2, [r3, #20]
 8004472:	887b      	ldrh	r3, [r7, #2]
 8004474:	401a      	ands	r2, r3
 8004476:	887b      	ldrh	r3, [r7, #2]
 8004478:	429a      	cmp	r2, r3
 800447a:	d104      	bne.n	8004486 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800447c:	887b      	ldrh	r3, [r7, #2]
 800447e:	041a      	lsls	r2, r3, #16
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004484:	e002      	b.n	800448c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004486:	887a      	ldrh	r2, [r7, #2]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	619a      	str	r2, [r3, #24]
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800449a:	b08f      	sub	sp, #60	; 0x3c
 800449c:	af0a      	add	r7, sp, #40	; 0x28
 800449e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e054      	b.n	8004554 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d106      	bne.n	80044ca <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f00b fc4d 	bl	800fd64 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2203      	movs	r2, #3
 80044ce:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d102      	bne.n	80044e4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f005 f973 	bl	80097d4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	687e      	ldr	r6, [r7, #4]
 80044f6:	466d      	mov	r5, sp
 80044f8:	f106 0410 	add.w	r4, r6, #16
 80044fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004504:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004508:	e885 0003 	stmia.w	r5, {r0, r1}
 800450c:	1d33      	adds	r3, r6, #4
 800450e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004510:	6838      	ldr	r0, [r7, #0]
 8004512:	f005 f8ed 	bl	80096f0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2101      	movs	r1, #1
 800451c:	4618      	mov	r0, r3
 800451e:	f005 f96a 	bl	80097f6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	687e      	ldr	r6, [r7, #4]
 800452a:	466d      	mov	r5, sp
 800452c:	f106 0410 	add.w	r4, r6, #16
 8004530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004532:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004538:	e894 0003 	ldmia.w	r4, {r0, r1}
 800453c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004540:	1d33      	adds	r3, r6, #4
 8004542:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004544:	6838      	ldr	r0, [r7, #0]
 8004546:	f005 fa7d 	bl	8009a44 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800455c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800455c:	b590      	push	{r4, r7, lr}
 800455e:	b089      	sub	sp, #36	; 0x24
 8004560:	af04      	add	r7, sp, #16
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	4608      	mov	r0, r1
 8004566:	4611      	mov	r1, r2
 8004568:	461a      	mov	r2, r3
 800456a:	4603      	mov	r3, r0
 800456c:	70fb      	strb	r3, [r7, #3]
 800456e:	460b      	mov	r3, r1
 8004570:	70bb      	strb	r3, [r7, #2]
 8004572:	4613      	mov	r3, r2
 8004574:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_HCD_HC_Init+0x28>
 8004580:	2302      	movs	r3, #2
 8004582:	e07f      	b.n	8004684 <HAL_HCD_HC_Init+0x128>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800458c:	78fa      	ldrb	r2, [r7, #3]
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	440b      	add	r3, r1
 800459a:	333d      	adds	r3, #61	; 0x3d
 800459c:	2200      	movs	r2, #0
 800459e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80045a0:	78fa      	ldrb	r2, [r7, #3]
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	4613      	mov	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	440b      	add	r3, r1
 80045ae:	3338      	adds	r3, #56	; 0x38
 80045b0:	787a      	ldrb	r2, [r7, #1]
 80045b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80045b4:	78fa      	ldrb	r2, [r7, #3]
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	440b      	add	r3, r1
 80045c2:	3340      	adds	r3, #64	; 0x40
 80045c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80045c6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80045c8:	78fa      	ldrb	r2, [r7, #3]
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	440b      	add	r3, r1
 80045d6:	3339      	adds	r3, #57	; 0x39
 80045d8:	78fa      	ldrb	r2, [r7, #3]
 80045da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80045dc:	78fa      	ldrb	r2, [r7, #3]
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	440b      	add	r3, r1
 80045ea:	333f      	adds	r3, #63	; 0x3f
 80045ec:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80045f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80045f2:	78fa      	ldrb	r2, [r7, #3]
 80045f4:	78bb      	ldrb	r3, [r7, #2]
 80045f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045fa:	b2d8      	uxtb	r0, r3
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	440b      	add	r3, r1
 8004608:	333a      	adds	r3, #58	; 0x3a
 800460a:	4602      	mov	r2, r0
 800460c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800460e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004612:	2b00      	cmp	r3, #0
 8004614:	da0a      	bge.n	800462c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004616:	78fa      	ldrb	r2, [r7, #3]
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	4613      	mov	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	440b      	add	r3, r1
 8004624:	333b      	adds	r3, #59	; 0x3b
 8004626:	2201      	movs	r2, #1
 8004628:	701a      	strb	r2, [r3, #0]
 800462a:	e009      	b.n	8004640 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800462c:	78fa      	ldrb	r2, [r7, #3]
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	440b      	add	r3, r1
 800463a:	333b      	adds	r3, #59	; 0x3b
 800463c:	2200      	movs	r2, #0
 800463e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004640:	78fa      	ldrb	r2, [r7, #3]
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	440b      	add	r3, r1
 800464e:	333c      	adds	r3, #60	; 0x3c
 8004650:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004654:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	787c      	ldrb	r4, [r7, #1]
 800465c:	78ba      	ldrb	r2, [r7, #2]
 800465e:	78f9      	ldrb	r1, [r7, #3]
 8004660:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004662:	9302      	str	r3, [sp, #8]
 8004664:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004668:	9301      	str	r3, [sp, #4]
 800466a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	4623      	mov	r3, r4
 8004672:	f005 fb69 	bl	8009d48 <USB_HC_Init>
 8004676:	4603      	mov	r3, r0
 8004678:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004682:	7bfb      	ldrb	r3, [r7, #15]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	bd90      	pop	{r4, r7, pc}

0800468c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <HAL_HCD_HC_Halt+0x1e>
 80046a6:	2302      	movs	r3, #2
 80046a8:	e00f      	b.n	80046ca <HAL_HCD_HC_Halt+0x3e>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	78fa      	ldrb	r2, [r7, #3]
 80046b8:	4611      	mov	r1, r2
 80046ba:	4618      	mov	r0, r3
 80046bc:	f005 fda3 	bl	800a206 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	4608      	mov	r0, r1
 80046de:	4611      	mov	r1, r2
 80046e0:	461a      	mov	r2, r3
 80046e2:	4603      	mov	r3, r0
 80046e4:	70fb      	strb	r3, [r7, #3]
 80046e6:	460b      	mov	r3, r1
 80046e8:	70bb      	strb	r3, [r7, #2]
 80046ea:	4613      	mov	r3, r2
 80046ec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80046ee:	78fa      	ldrb	r2, [r7, #3]
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	440b      	add	r3, r1
 80046fc:	333b      	adds	r3, #59	; 0x3b
 80046fe:	78ba      	ldrb	r2, [r7, #2]
 8004700:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004702:	78fa      	ldrb	r2, [r7, #3]
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	4613      	mov	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	440b      	add	r3, r1
 8004710:	333f      	adds	r3, #63	; 0x3f
 8004712:	787a      	ldrb	r2, [r7, #1]
 8004714:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004716:	7c3b      	ldrb	r3, [r7, #16]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d114      	bne.n	8004746 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800471c:	78fa      	ldrb	r2, [r7, #3]
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	4613      	mov	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	440b      	add	r3, r1
 800472a:	3342      	adds	r3, #66	; 0x42
 800472c:	2203      	movs	r2, #3
 800472e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004730:	78fa      	ldrb	r2, [r7, #3]
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	4613      	mov	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	440b      	add	r3, r1
 800473e:	333d      	adds	r3, #61	; 0x3d
 8004740:	7f3a      	ldrb	r2, [r7, #28]
 8004742:	701a      	strb	r2, [r3, #0]
 8004744:	e009      	b.n	800475a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004746:	78fa      	ldrb	r2, [r7, #3]
 8004748:	6879      	ldr	r1, [r7, #4]
 800474a:	4613      	mov	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	440b      	add	r3, r1
 8004754:	3342      	adds	r3, #66	; 0x42
 8004756:	2202      	movs	r2, #2
 8004758:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800475a:	787b      	ldrb	r3, [r7, #1]
 800475c:	2b03      	cmp	r3, #3
 800475e:	f200 80d6 	bhi.w	800490e <HAL_HCD_HC_SubmitRequest+0x23a>
 8004762:	a201      	add	r2, pc, #4	; (adr r2, 8004768 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004768:	08004779 	.word	0x08004779
 800476c:	080048f9 	.word	0x080048f9
 8004770:	080047e5 	.word	0x080047e5
 8004774:	0800486f 	.word	0x0800486f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004778:	7c3b      	ldrb	r3, [r7, #16]
 800477a:	2b01      	cmp	r3, #1
 800477c:	f040 80c9 	bne.w	8004912 <HAL_HCD_HC_SubmitRequest+0x23e>
 8004780:	78bb      	ldrb	r3, [r7, #2]
 8004782:	2b00      	cmp	r3, #0
 8004784:	f040 80c5 	bne.w	8004912 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8004788:	8b3b      	ldrh	r3, [r7, #24]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d109      	bne.n	80047a2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800478e:	78fa      	ldrb	r2, [r7, #3]
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	440b      	add	r3, r1
 800479c:	3351      	adds	r3, #81	; 0x51
 800479e:	2201      	movs	r2, #1
 80047a0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80047a2:	78fa      	ldrb	r2, [r7, #3]
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	4613      	mov	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	440b      	add	r3, r1
 80047b0:	3351      	adds	r3, #81	; 0x51
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10a      	bne.n	80047ce <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80047b8:	78fa      	ldrb	r2, [r7, #3]
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	440b      	add	r3, r1
 80047c6:	3342      	adds	r3, #66	; 0x42
 80047c8:	2200      	movs	r2, #0
 80047ca:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80047cc:	e0a1      	b.n	8004912 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80047ce:	78fa      	ldrb	r2, [r7, #3]
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	440b      	add	r3, r1
 80047dc:	3342      	adds	r3, #66	; 0x42
 80047de:	2202      	movs	r2, #2
 80047e0:	701a      	strb	r2, [r3, #0]
      break;
 80047e2:	e096      	b.n	8004912 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80047e4:	78bb      	ldrb	r3, [r7, #2]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d120      	bne.n	800482c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80047ea:	78fa      	ldrb	r2, [r7, #3]
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	4613      	mov	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	440b      	add	r3, r1
 80047f8:	3351      	adds	r3, #81	; 0x51
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10a      	bne.n	8004816 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004800:	78fa      	ldrb	r2, [r7, #3]
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	4613      	mov	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	440b      	add	r3, r1
 800480e:	3342      	adds	r3, #66	; 0x42
 8004810:	2200      	movs	r2, #0
 8004812:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004814:	e07e      	b.n	8004914 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004816:	78fa      	ldrb	r2, [r7, #3]
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	4613      	mov	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4413      	add	r3, r2
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	440b      	add	r3, r1
 8004824:	3342      	adds	r3, #66	; 0x42
 8004826:	2202      	movs	r2, #2
 8004828:	701a      	strb	r2, [r3, #0]
      break;
 800482a:	e073      	b.n	8004914 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800482c:	78fa      	ldrb	r2, [r7, #3]
 800482e:	6879      	ldr	r1, [r7, #4]
 8004830:	4613      	mov	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	440b      	add	r3, r1
 800483a:	3350      	adds	r3, #80	; 0x50
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10a      	bne.n	8004858 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004842:	78fa      	ldrb	r2, [r7, #3]
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	440b      	add	r3, r1
 8004850:	3342      	adds	r3, #66	; 0x42
 8004852:	2200      	movs	r2, #0
 8004854:	701a      	strb	r2, [r3, #0]
      break;
 8004856:	e05d      	b.n	8004914 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004858:	78fa      	ldrb	r2, [r7, #3]
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	440b      	add	r3, r1
 8004866:	3342      	adds	r3, #66	; 0x42
 8004868:	2202      	movs	r2, #2
 800486a:	701a      	strb	r2, [r3, #0]
      break;
 800486c:	e052      	b.n	8004914 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800486e:	78bb      	ldrb	r3, [r7, #2]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d120      	bne.n	80048b6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004874:	78fa      	ldrb	r2, [r7, #3]
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	4613      	mov	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	440b      	add	r3, r1
 8004882:	3351      	adds	r3, #81	; 0x51
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10a      	bne.n	80048a0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800488a:	78fa      	ldrb	r2, [r7, #3]
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	4613      	mov	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	00db      	lsls	r3, r3, #3
 8004896:	440b      	add	r3, r1
 8004898:	3342      	adds	r3, #66	; 0x42
 800489a:	2200      	movs	r2, #0
 800489c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800489e:	e039      	b.n	8004914 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80048a0:	78fa      	ldrb	r2, [r7, #3]
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	4613      	mov	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	440b      	add	r3, r1
 80048ae:	3342      	adds	r3, #66	; 0x42
 80048b0:	2202      	movs	r2, #2
 80048b2:	701a      	strb	r2, [r3, #0]
      break;
 80048b4:	e02e      	b.n	8004914 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80048b6:	78fa      	ldrb	r2, [r7, #3]
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	4613      	mov	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	440b      	add	r3, r1
 80048c4:	3350      	adds	r3, #80	; 0x50
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10a      	bne.n	80048e2 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80048cc:	78fa      	ldrb	r2, [r7, #3]
 80048ce:	6879      	ldr	r1, [r7, #4]
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	440b      	add	r3, r1
 80048da:	3342      	adds	r3, #66	; 0x42
 80048dc:	2200      	movs	r2, #0
 80048de:	701a      	strb	r2, [r3, #0]
      break;
 80048e0:	e018      	b.n	8004914 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80048e2:	78fa      	ldrb	r2, [r7, #3]
 80048e4:	6879      	ldr	r1, [r7, #4]
 80048e6:	4613      	mov	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	440b      	add	r3, r1
 80048f0:	3342      	adds	r3, #66	; 0x42
 80048f2:	2202      	movs	r2, #2
 80048f4:	701a      	strb	r2, [r3, #0]
      break;
 80048f6:	e00d      	b.n	8004914 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80048f8:	78fa      	ldrb	r2, [r7, #3]
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	440b      	add	r3, r1
 8004906:	3342      	adds	r3, #66	; 0x42
 8004908:	2200      	movs	r2, #0
 800490a:	701a      	strb	r2, [r3, #0]
      break;
 800490c:	e002      	b.n	8004914 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800490e:	bf00      	nop
 8004910:	e000      	b.n	8004914 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8004912:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004914:	78fa      	ldrb	r2, [r7, #3]
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	4613      	mov	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	440b      	add	r3, r1
 8004922:	3344      	adds	r3, #68	; 0x44
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004928:	78fa      	ldrb	r2, [r7, #3]
 800492a:	8b39      	ldrh	r1, [r7, #24]
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	4403      	add	r3, r0
 8004938:	3348      	adds	r3, #72	; 0x48
 800493a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800493c:	78fa      	ldrb	r2, [r7, #3]
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	4613      	mov	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	440b      	add	r3, r1
 800494a:	335c      	adds	r3, #92	; 0x5c
 800494c:	2200      	movs	r2, #0
 800494e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004950:	78fa      	ldrb	r2, [r7, #3]
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	440b      	add	r3, r1
 800495e:	334c      	adds	r3, #76	; 0x4c
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004964:	78fa      	ldrb	r2, [r7, #3]
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	440b      	add	r3, r1
 8004972:	3339      	adds	r3, #57	; 0x39
 8004974:	78fa      	ldrb	r2, [r7, #3]
 8004976:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004978:	78fa      	ldrb	r2, [r7, #3]
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	440b      	add	r3, r1
 8004986:	335d      	adds	r3, #93	; 0x5d
 8004988:	2200      	movs	r2, #0
 800498a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	78fa      	ldrb	r2, [r7, #3]
 8004992:	4613      	mov	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	3338      	adds	r3, #56	; 0x38
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	18d1      	adds	r1, r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	461a      	mov	r2, r3
 80049a8:	f005 fad8 	bl	8009f5c <USB_HC_StartXfer>
 80049ac:	4603      	mov	r3, r0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop

080049b8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f004 fff5 	bl	80099be <USB_GetMode>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	f040 80ef 	bne.w	8004bba <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f004 ffd9 	bl	8009998 <USB_ReadInterrupts>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 80e5 	beq.w	8004bb8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f004 ffd0 	bl	8009998 <USB_ReadInterrupts>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a02:	d104      	bne.n	8004a0e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004a0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f004 ffc0 	bl	8009998 <USB_ReadInterrupts>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a22:	d104      	bne.n	8004a2e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f004 ffb0 	bl	8009998 <USB_ReadInterrupts>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a42:	d104      	bne.n	8004a4e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004a4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f004 ffa0 	bl	8009998 <USB_ReadInterrupts>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d103      	bne.n	8004a6a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2202      	movs	r2, #2
 8004a68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f004 ff92 	bl	8009998 <USB_ReadInterrupts>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a7e:	d115      	bne.n	8004aac <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004a88:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d108      	bne.n	8004aac <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f00b f9e0 	bl	800fe60 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f005 f888 	bl	8009bbc <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f004 ff71 	bl	8009998 <USB_ReadInterrupts>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004abc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ac0:	d102      	bne.n	8004ac8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f001 f966 	bl	8005d94 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f004 ff63 	bl	8009998 <USB_ReadInterrupts>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d106      	bne.n	8004aea <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f00b f9a3 	bl	800fe28 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2208      	movs	r2, #8
 8004ae8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f004 ff52 	bl	8009998 <USB_ReadInterrupts>
 8004af4:	4603      	mov	r3, r0
 8004af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004afe:	d138      	bne.n	8004b72 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f005 fb6d 	bl	800a1e4 <USB_HC_ReadInterrupt>
 8004b0a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	e025      	b.n	8004b5e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f003 030f 	and.w	r3, r3, #15
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d018      	beq.n	8004b58 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b3c:	d106      	bne.n	8004b4c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	4619      	mov	r1, r3
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f8cf 	bl	8004ce8 <HCD_HC_IN_IRQHandler>
 8004b4a:	e005      	b.n	8004b58 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	4619      	mov	r1, r3
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fcfd 	bl	8005552 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d3d4      	bcc.n	8004b12 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f004 ff0e 	bl	8009998 <USB_ReadInterrupts>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	f003 0310 	and.w	r3, r3, #16
 8004b82:	2b10      	cmp	r3, #16
 8004b84:	d101      	bne.n	8004b8a <HAL_HCD_IRQHandler+0x1d2>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <HAL_HCD_IRQHandler+0x1d4>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d014      	beq.n	8004bba <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699a      	ldr	r2, [r3, #24]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0210 	bic.w	r2, r2, #16
 8004b9e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f001 f84b 	bl	8005c3c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	699a      	ldr	r2, [r3, #24]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f042 0210 	orr.w	r2, r2, #16
 8004bb4:	619a      	str	r2, [r3, #24]
 8004bb6:	e000      	b.n	8004bba <HAL_HCD_IRQHandler+0x202>
      return;
 8004bb8:	bf00      	nop
    }
  }
}
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d101      	bne.n	8004bd6 <HAL_HCD_Start+0x16>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e013      	b.n	8004bfe <HAL_HCD_Start+0x3e>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f004 fde5 	bl	80097b2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2101      	movs	r1, #1
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f005 f848 	bl	8009c84 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b082      	sub	sp, #8
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d101      	bne.n	8004c1c <HAL_HCD_Stop+0x16>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	e00d      	b.n	8004c38 <HAL_HCD_Stop+0x32>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f005 fc27 	bl	800a47c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f004 ffef 	bl	8009c30 <USB_ResetPort>
 8004c52:	4603      	mov	r3, r0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	460b      	mov	r3, r1
 8004c66:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004c68:	78fa      	ldrb	r2, [r7, #3]
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	440b      	add	r3, r1
 8004c76:	335c      	adds	r3, #92	; 0x5c
 8004c78:	781b      	ldrb	r3, [r3, #0]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	460b      	mov	r3, r1
 8004c90:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004c92:	78fa      	ldrb	r2, [r7, #3]
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	4613      	mov	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	440b      	add	r3, r1
 8004ca0:	334c      	adds	r3, #76	; 0x4c
 8004ca2:	681b      	ldr	r3, [r3, #0]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f005 f831 	bl	8009d24 <USB_GetCurrentFrame>
 8004cc2:	4603      	mov	r3, r0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f005 f80c 	bl	8009cf6 <USB_GetHostSpeed>
 8004cde:	4603      	mov	r3, r0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004cfe:	78fb      	ldrb	r3, [r7, #3]
 8004d00:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d119      	bne.n	8004d4c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d24:	461a      	mov	r2, r3
 8004d26:	2304      	movs	r3, #4
 8004d28:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	0151      	lsls	r1, r2, #5
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	440a      	add	r2, r1
 8004d40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d44:	f043 0302 	orr.w	r3, r3, #2
 8004d48:	60d3      	str	r3, [r2, #12]
 8004d4a:	e0ce      	b.n	8004eea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d62:	d12c      	bne.n	8004dbe <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d70:	461a      	mov	r2, r3
 8004d72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d76:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004d78:	6879      	ldr	r1, [r7, #4]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	440b      	add	r3, r1
 8004d86:	335d      	adds	r3, #93	; 0x5d
 8004d88:	2207      	movs	r2, #7
 8004d8a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	0151      	lsls	r1, r2, #5
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	440a      	add	r2, r1
 8004da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004da6:	f043 0302 	orr.w	r3, r3, #2
 8004daa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	4611      	mov	r1, r2
 8004db6:	4618      	mov	r0, r3
 8004db8:	f005 fa25 	bl	800a206 <USB_HC_Halt>
 8004dbc:	e095      	b.n	8004eea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	015a      	lsls	r2, r3, #5
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f003 0320 	and.w	r3, r3, #32
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d109      	bne.n	8004de8 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de0:	461a      	mov	r2, r3
 8004de2:	2320      	movs	r3, #32
 8004de4:	6093      	str	r3, [r2, #8]
 8004de6:	e080      	b.n	8004eea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b08      	cmp	r3, #8
 8004dfc:	d134      	bne.n	8004e68 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	0151      	lsls	r1, r2, #5
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	440a      	add	r2, r1
 8004e14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e18:	f043 0302 	orr.w	r3, r3, #2
 8004e1c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4613      	mov	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	440b      	add	r3, r1
 8004e2c:	335d      	adds	r3, #93	; 0x5d
 8004e2e:	2205      	movs	r2, #5
 8004e30:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e3e:	461a      	mov	r2, r3
 8004e40:	2310      	movs	r3, #16
 8004e42:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e50:	461a      	mov	r2, r3
 8004e52:	2308      	movs	r3, #8
 8004e54:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	4611      	mov	r1, r2
 8004e60:	4618      	mov	r0, r3
 8004e62:	f005 f9d0 	bl	800a206 <USB_HC_Halt>
 8004e66:	e040      	b.n	8004eea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e7e:	d134      	bne.n	8004eea <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	0151      	lsls	r1, r2, #5
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	440a      	add	r2, r1
 8004e96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e9a:	f043 0302 	orr.w	r3, r3, #2
 8004e9e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f005 f9ab 	bl	800a206 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	2310      	movs	r3, #16
 8004ec0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	440b      	add	r3, r1
 8004ed0:	335d      	adds	r3, #93	; 0x5d
 8004ed2:	2208      	movs	r2, #8
 8004ed4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ee8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f00:	d122      	bne.n	8004f48 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	0151      	lsls	r1, r2, #5
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	440a      	add	r2, r1
 8004f18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f1c:	f043 0302 	orr.w	r3, r3, #2
 8004f20:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	4611      	mov	r1, r2
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f005 f96a 	bl	800a206 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f44:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004f46:	e300      	b.n	800554a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	f040 80fd 	bne.w	800515a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01b      	beq.n	8004fa0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	440b      	add	r3, r1
 8004f76:	3348      	adds	r3, #72	; 0x48
 8004f78:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	0159      	lsls	r1, r3, #5
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	440b      	add	r3, r1
 8004f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004f8c:	1ad1      	subs	r1, r2, r3
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4613      	mov	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	4403      	add	r3, r0
 8004f9c:	334c      	adds	r3, #76	; 0x4c
 8004f9e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	440b      	add	r3, r1
 8004fae:	335d      	adds	r3, #93	; 0x5d
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	440b      	add	r3, r1
 8004fc2:	3358      	adds	r3, #88	; 0x58
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	440b      	add	r3, r1
 8004fe8:	333f      	adds	r3, #63	; 0x3f
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	440b      	add	r3, r1
 8004ffe:	333f      	adds	r3, #63	; 0x3f
 8005000:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005002:	2b02      	cmp	r3, #2
 8005004:	d121      	bne.n	800504a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	4413      	add	r3, r2
 800500e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	0151      	lsls	r1, r2, #5
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	440a      	add	r2, r1
 800501c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005020:	f043 0302 	orr.w	r3, r3, #2
 8005024:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	4611      	mov	r1, r2
 8005030:	4618      	mov	r0, r3
 8005032:	f005 f8e8 	bl	800a206 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	4413      	add	r3, r2
 800503e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005042:	461a      	mov	r2, r3
 8005044:	2310      	movs	r3, #16
 8005046:	6093      	str	r3, [r2, #8]
 8005048:	e070      	b.n	800512c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800504a:	6879      	ldr	r1, [r7, #4]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4613      	mov	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	440b      	add	r3, r1
 8005058:	333f      	adds	r3, #63	; 0x3f
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b03      	cmp	r3, #3
 800505e:	d12a      	bne.n	80050b6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	4413      	add	r3, r2
 8005068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	0151      	lsls	r1, r2, #5
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	440a      	add	r2, r1
 8005076:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800507a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800507e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	4613      	mov	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	440b      	add	r3, r1
 800508e:	335c      	adds	r3, #92	; 0x5c
 8005090:	2201      	movs	r2, #1
 8005092:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	b2d8      	uxtb	r0, r3
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	440b      	add	r3, r1
 80050a6:	335c      	adds	r3, #92	; 0x5c
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	4601      	mov	r1, r0
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f00a fee4 	bl	800fe7c <HAL_HCD_HC_NotifyURBChange_Callback>
 80050b4:	e03a      	b.n	800512c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	440b      	add	r3, r1
 80050c4:	333f      	adds	r3, #63	; 0x3f
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d12f      	bne.n	800512c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	440b      	add	r3, r1
 80050da:	335c      	adds	r3, #92	; 0x5c
 80050dc:	2201      	movs	r2, #1
 80050de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	440b      	add	r3, r1
 80050ee:	3350      	adds	r3, #80	; 0x50
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	f083 0301 	eor.w	r3, r3, #1
 80050f6:	b2d8      	uxtb	r0, r3
 80050f8:	6879      	ldr	r1, [r7, #4]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	4613      	mov	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	440b      	add	r3, r1
 8005106:	3350      	adds	r3, #80	; 0x50
 8005108:	4602      	mov	r2, r0
 800510a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	b2d8      	uxtb	r0, r3
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	4613      	mov	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	440b      	add	r3, r1
 800511e:	335c      	adds	r3, #92	; 0x5c
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	4601      	mov	r1, r0
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f00a fea8 	bl	800fe7c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	4613      	mov	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	440b      	add	r3, r1
 800513a:	3350      	adds	r3, #80	; 0x50
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	f083 0301 	eor.w	r3, r3, #1
 8005142:	b2d8      	uxtb	r0, r3
 8005144:	6879      	ldr	r1, [r7, #4]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	4613      	mov	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	440b      	add	r3, r1
 8005152:	3350      	adds	r3, #80	; 0x50
 8005154:	4602      	mov	r2, r0
 8005156:	701a      	strb	r2, [r3, #0]
}
 8005158:	e1f7      	b.n	800554a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	4413      	add	r3, r2
 8005162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b02      	cmp	r3, #2
 800516e:	f040 811a 	bne.w	80053a6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	4413      	add	r3, r2
 800517a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	0151      	lsls	r1, r2, #5
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	440a      	add	r2, r1
 8005188:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800518c:	f023 0302 	bic.w	r3, r3, #2
 8005190:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005192:	6879      	ldr	r1, [r7, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	440b      	add	r3, r1
 80051a0:	335d      	adds	r3, #93	; 0x5d
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d10a      	bne.n	80051be <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	440b      	add	r3, r1
 80051b6:	335c      	adds	r3, #92	; 0x5c
 80051b8:	2201      	movs	r2, #1
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	e0d9      	b.n	8005372 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4613      	mov	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	440b      	add	r3, r1
 80051cc:	335d      	adds	r3, #93	; 0x5d
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b05      	cmp	r3, #5
 80051d2:	d10a      	bne.n	80051ea <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	4613      	mov	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	440b      	add	r3, r1
 80051e2:	335c      	adds	r3, #92	; 0x5c
 80051e4:	2205      	movs	r2, #5
 80051e6:	701a      	strb	r2, [r3, #0]
 80051e8:	e0c3      	b.n	8005372 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	440b      	add	r3, r1
 80051f8:	335d      	adds	r3, #93	; 0x5d
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	2b06      	cmp	r3, #6
 80051fe:	d00a      	beq.n	8005216 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4613      	mov	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	440b      	add	r3, r1
 800520e:	335d      	adds	r3, #93	; 0x5d
 8005210:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005212:	2b08      	cmp	r3, #8
 8005214:	d156      	bne.n	80052c4 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	4613      	mov	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	440b      	add	r3, r1
 8005224:	3358      	adds	r3, #88	; 0x58
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	1c59      	adds	r1, r3, #1
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4613      	mov	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	4403      	add	r3, r0
 8005238:	3358      	adds	r3, #88	; 0x58
 800523a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800523c:	6879      	ldr	r1, [r7, #4]
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	4613      	mov	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	440b      	add	r3, r1
 800524a:	3358      	adds	r3, #88	; 0x58
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b03      	cmp	r3, #3
 8005250:	d914      	bls.n	800527c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005252:	6879      	ldr	r1, [r7, #4]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	4613      	mov	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	00db      	lsls	r3, r3, #3
 800525e:	440b      	add	r3, r1
 8005260:	3358      	adds	r3, #88	; 0x58
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	4613      	mov	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	440b      	add	r3, r1
 8005274:	335c      	adds	r3, #92	; 0x5c
 8005276:	2204      	movs	r2, #4
 8005278:	701a      	strb	r2, [r3, #0]
 800527a:	e009      	b.n	8005290 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	4613      	mov	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	440b      	add	r3, r1
 800528a:	335c      	adds	r3, #92	; 0x5c
 800528c:	2202      	movs	r2, #2
 800528e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	4413      	add	r3, r2
 8005298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052a6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052ae:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052bc:	461a      	mov	r2, r3
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	e056      	b.n	8005372 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80052c4:	6879      	ldr	r1, [r7, #4]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	4613      	mov	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	440b      	add	r3, r1
 80052d2:	335d      	adds	r3, #93	; 0x5d
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	d123      	bne.n	8005322 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	00db      	lsls	r3, r3, #3
 80052e6:	440b      	add	r3, r1
 80052e8:	335c      	adds	r3, #92	; 0x5c
 80052ea:	2202      	movs	r2, #2
 80052ec:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005304:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800530c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	4413      	add	r3, r2
 8005316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800531a:	461a      	mov	r2, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	6013      	str	r3, [r2, #0]
 8005320:	e027      	b.n	8005372 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005322:	6879      	ldr	r1, [r7, #4]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4613      	mov	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	440b      	add	r3, r1
 8005330:	335d      	adds	r3, #93	; 0x5d
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b07      	cmp	r3, #7
 8005336:	d11c      	bne.n	8005372 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4613      	mov	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	440b      	add	r3, r1
 8005346:	3358      	adds	r3, #88	; 0x58
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	1c59      	adds	r1, r3, #1
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	4403      	add	r3, r0
 800535a:	3358      	adds	r3, #88	; 0x58
 800535c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4613      	mov	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	440b      	add	r3, r1
 800536c:	335c      	adds	r3, #92	; 0x5c
 800536e:	2204      	movs	r2, #4
 8005370:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	4413      	add	r3, r2
 800537a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537e:	461a      	mov	r2, r3
 8005380:	2302      	movs	r3, #2
 8005382:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	b2d8      	uxtb	r0, r3
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4613      	mov	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	440b      	add	r3, r1
 8005396:	335c      	adds	r3, #92	; 0x5c
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	461a      	mov	r2, r3
 800539c:	4601      	mov	r1, r0
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f00a fd6c 	bl	800fe7c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80053a4:	e0d1      	b.n	800554a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b8:	2b80      	cmp	r3, #128	; 0x80
 80053ba:	d13e      	bne.n	800543a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	0151      	lsls	r1, r2, #5
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	440a      	add	r2, r1
 80053d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053d6:	f043 0302 	orr.w	r3, r3, #2
 80053da:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4613      	mov	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	440b      	add	r3, r1
 80053ea:	3358      	adds	r3, #88	; 0x58
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	1c59      	adds	r1, r3, #1
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	4613      	mov	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	4403      	add	r3, r0
 80053fe:	3358      	adds	r3, #88	; 0x58
 8005400:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005402:	6879      	ldr	r1, [r7, #4]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4613      	mov	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	440b      	add	r3, r1
 8005410:	335d      	adds	r3, #93	; 0x5d
 8005412:	2206      	movs	r2, #6
 8005414:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	b2d2      	uxtb	r2, r2
 800541e:	4611      	mov	r1, r2
 8005420:	4618      	mov	r0, r3
 8005422:	f004 fef0 	bl	800a206 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	015a      	lsls	r2, r3, #5
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	4413      	add	r3, r2
 800542e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005432:	461a      	mov	r2, r3
 8005434:	2380      	movs	r3, #128	; 0x80
 8005436:	6093      	str	r3, [r2, #8]
}
 8005438:	e087      	b.n	800554a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	4413      	add	r3, r2
 8005442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f003 0310 	and.w	r3, r3, #16
 800544c:	2b10      	cmp	r3, #16
 800544e:	d17c      	bne.n	800554a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4613      	mov	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	440b      	add	r3, r1
 800545e:	333f      	adds	r3, #63	; 0x3f
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	2b03      	cmp	r3, #3
 8005464:	d122      	bne.n	80054ac <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005466:	6879      	ldr	r1, [r7, #4]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4613      	mov	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	440b      	add	r3, r1
 8005474:	3358      	adds	r3, #88	; 0x58
 8005476:	2200      	movs	r2, #0
 8005478:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	4413      	add	r3, r2
 8005482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	0151      	lsls	r1, r2, #5
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	440a      	add	r2, r1
 8005490:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005494:	f043 0302 	orr.w	r3, r3, #2
 8005498:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	b2d2      	uxtb	r2, r2
 80054a2:	4611      	mov	r1, r2
 80054a4:	4618      	mov	r0, r3
 80054a6:	f004 feae 	bl	800a206 <USB_HC_Halt>
 80054aa:	e045      	b.n	8005538 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	4613      	mov	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	440b      	add	r3, r1
 80054ba:	333f      	adds	r3, #63	; 0x3f
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	00db      	lsls	r3, r3, #3
 80054ce:	440b      	add	r3, r1
 80054d0:	333f      	adds	r3, #63	; 0x3f
 80054d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d12f      	bne.n	8005538 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80054d8:	6879      	ldr	r1, [r7, #4]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4613      	mov	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	440b      	add	r3, r1
 80054e6:	3358      	adds	r3, #88	; 0x58
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d121      	bne.n	8005538 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4613      	mov	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	440b      	add	r3, r1
 8005502:	335d      	adds	r3, #93	; 0x5d
 8005504:	2203      	movs	r2, #3
 8005506:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	4413      	add	r3, r2
 8005510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	0151      	lsls	r1, r2, #5
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	440a      	add	r2, r1
 800551e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005522:	f043 0302 	orr.w	r3, r3, #2
 8005526:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	4611      	mov	r1, r2
 8005532:	4618      	mov	r0, r3
 8005534:	f004 fe67 	bl	800a206 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	4413      	add	r3, r2
 8005540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005544:	461a      	mov	r2, r3
 8005546:	2310      	movs	r3, #16
 8005548:	6093      	str	r3, [r2, #8]
}
 800554a:	bf00      	nop
 800554c:	3718      	adds	r7, #24
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b086      	sub	sp, #24
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
 800555a:	460b      	mov	r3, r1
 800555c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	4413      	add	r3, r2
 8005574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b04      	cmp	r3, #4
 8005580:	d119      	bne.n	80055b6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	4413      	add	r3, r2
 800558a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800558e:	461a      	mov	r2, r3
 8005590:	2304      	movs	r3, #4
 8005592:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	4413      	add	r3, r2
 800559c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	0151      	lsls	r1, r2, #5
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	440a      	add	r2, r1
 80055aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055ae:	f043 0302 	orr.w	r3, r3, #2
 80055b2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80055b4:	e33e      	b.n	8005c34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b20      	cmp	r3, #32
 80055ca:	d141      	bne.n	8005650 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d8:	461a      	mov	r2, r3
 80055da:	2320      	movs	r3, #32
 80055dc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	00db      	lsls	r3, r3, #3
 80055ea:	440b      	add	r3, r1
 80055ec:	333d      	adds	r3, #61	; 0x3d
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	f040 831f 	bne.w	8005c34 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4613      	mov	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	440b      	add	r3, r1
 8005604:	333d      	adds	r3, #61	; 0x3d
 8005606:	2200      	movs	r2, #0
 8005608:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	440b      	add	r3, r1
 8005618:	335c      	adds	r3, #92	; 0x5c
 800561a:	2202      	movs	r2, #2
 800561c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	4413      	add	r3, r2
 8005626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	0151      	lsls	r1, r2, #5
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	440a      	add	r2, r1
 8005634:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005638:	f043 0302 	orr.w	r3, r3, #2
 800563c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	b2d2      	uxtb	r2, r2
 8005646:	4611      	mov	r1, r2
 8005648:	4618      	mov	r0, r3
 800564a:	f004 fddc 	bl	800a206 <USB_HC_Halt>
}
 800564e:	e2f1      	b.n	8005c34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	4413      	add	r3, r2
 8005658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005662:	2b40      	cmp	r3, #64	; 0x40
 8005664:	d13f      	bne.n	80056e6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	4613      	mov	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	440b      	add	r3, r1
 8005674:	335d      	adds	r3, #93	; 0x5d
 8005676:	2204      	movs	r2, #4
 8005678:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	4613      	mov	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	440b      	add	r3, r1
 8005688:	333d      	adds	r3, #61	; 0x3d
 800568a:	2201      	movs	r2, #1
 800568c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4613      	mov	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	440b      	add	r3, r1
 800569c:	3358      	adds	r3, #88	; 0x58
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	0151      	lsls	r1, r2, #5
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	440a      	add	r2, r1
 80056b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056bc:	f043 0302 	orr.w	r3, r3, #2
 80056c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	b2d2      	uxtb	r2, r2
 80056ca:	4611      	mov	r1, r2
 80056cc:	4618      	mov	r0, r3
 80056ce:	f004 fd9a 	bl	800a206 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056de:	461a      	mov	r2, r3
 80056e0:	2340      	movs	r3, #64	; 0x40
 80056e2:	6093      	str	r3, [r2, #8]
}
 80056e4:	e2a6      	b.n	8005c34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056fc:	d122      	bne.n	8005744 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	4413      	add	r3, r2
 8005706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	0151      	lsls	r1, r2, #5
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	440a      	add	r2, r1
 8005714:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005718:	f043 0302 	orr.w	r3, r3, #2
 800571c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	4611      	mov	r1, r2
 8005728:	4618      	mov	r0, r3
 800572a:	f004 fd6c 	bl	800a206 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	4413      	add	r3, r2
 8005736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800573a:	461a      	mov	r2, r3
 800573c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005740:	6093      	str	r3, [r2, #8]
}
 8005742:	e277      	b.n	8005c34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	4413      	add	r3, r2
 800574c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b01      	cmp	r3, #1
 8005758:	d135      	bne.n	80057c6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800575a:	6879      	ldr	r1, [r7, #4]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4613      	mov	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	440b      	add	r3, r1
 8005768:	3358      	adds	r3, #88	; 0x58
 800576a:	2200      	movs	r2, #0
 800576c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	4413      	add	r3, r2
 8005776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	0151      	lsls	r1, r2, #5
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	440a      	add	r2, r1
 8005784:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005788:	f043 0302 	orr.w	r3, r3, #2
 800578c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	b2d2      	uxtb	r2, r2
 8005796:	4611      	mov	r1, r2
 8005798:	4618      	mov	r0, r3
 800579a:	f004 fd34 	bl	800a206 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057aa:	461a      	mov	r2, r3
 80057ac:	2301      	movs	r3, #1
 80057ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80057b0:	6879      	ldr	r1, [r7, #4]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4613      	mov	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	440b      	add	r3, r1
 80057be:	335d      	adds	r3, #93	; 0x5d
 80057c0:	2201      	movs	r2, #1
 80057c2:	701a      	strb	r2, [r3, #0]
}
 80057c4:	e236      	b.n	8005c34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f003 0308 	and.w	r3, r3, #8
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d12b      	bne.n	8005834 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e8:	461a      	mov	r2, r3
 80057ea:	2308      	movs	r3, #8
 80057ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	0151      	lsls	r1, r2, #5
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	440a      	add	r2, r1
 8005804:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005808:	f043 0302 	orr.w	r3, r3, #2
 800580c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	4611      	mov	r1, r2
 8005818:	4618      	mov	r0, r3
 800581a:	f004 fcf4 	bl	800a206 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800581e:	6879      	ldr	r1, [r7, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	440b      	add	r3, r1
 800582c:	335d      	adds	r3, #93	; 0x5d
 800582e:	2205      	movs	r2, #5
 8005830:	701a      	strb	r2, [r3, #0]
}
 8005832:	e1ff      	b.n	8005c34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	4413      	add	r3, r2
 800583c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 0310 	and.w	r3, r3, #16
 8005846:	2b10      	cmp	r3, #16
 8005848:	d155      	bne.n	80058f6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800584a:	6879      	ldr	r1, [r7, #4]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	440b      	add	r3, r1
 8005858:	3358      	adds	r3, #88	; 0x58
 800585a:	2200      	movs	r2, #0
 800585c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4613      	mov	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	440b      	add	r3, r1
 800586c:	335d      	adds	r3, #93	; 0x5d
 800586e:	2203      	movs	r2, #3
 8005870:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4613      	mov	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	440b      	add	r3, r1
 8005880:	333d      	adds	r3, #61	; 0x3d
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d114      	bne.n	80058b2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	4613      	mov	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	440b      	add	r3, r1
 8005896:	333c      	adds	r3, #60	; 0x3c
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d109      	bne.n	80058b2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800589e:	6879      	ldr	r1, [r7, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	440b      	add	r3, r1
 80058ac:	333d      	adds	r3, #61	; 0x3d
 80058ae:	2201      	movs	r2, #1
 80058b0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	0151      	lsls	r1, r2, #5
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	440a      	add	r2, r1
 80058c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058cc:	f043 0302 	orr.w	r3, r3, #2
 80058d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	4611      	mov	r1, r2
 80058dc:	4618      	mov	r0, r3
 80058de:	f004 fc92 	bl	800a206 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ee:	461a      	mov	r2, r3
 80058f0:	2310      	movs	r3, #16
 80058f2:	6093      	str	r3, [r2, #8]
}
 80058f4:	e19e      	b.n	8005c34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005908:	2b80      	cmp	r3, #128	; 0x80
 800590a:	d12b      	bne.n	8005964 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	4413      	add	r3, r2
 8005914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	0151      	lsls	r1, r2, #5
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	440a      	add	r2, r1
 8005922:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005926:	f043 0302 	orr.w	r3, r3, #2
 800592a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	4611      	mov	r1, r2
 8005936:	4618      	mov	r0, r3
 8005938:	f004 fc65 	bl	800a206 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800593c:	6879      	ldr	r1, [r7, #4]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	4613      	mov	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4413      	add	r3, r2
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	440b      	add	r3, r1
 800594a:	335d      	adds	r3, #93	; 0x5d
 800594c:	2206      	movs	r2, #6
 800594e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	4413      	add	r3, r2
 8005958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595c:	461a      	mov	r2, r3
 800595e:	2380      	movs	r3, #128	; 0x80
 8005960:	6093      	str	r3, [r2, #8]
}
 8005962:	e167      	b.n	8005c34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	4413      	add	r3, r2
 800596c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800597a:	d135      	bne.n	80059e8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	4413      	add	r3, r2
 8005984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	0151      	lsls	r1, r2, #5
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	440a      	add	r2, r1
 8005992:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005996:	f043 0302 	orr.w	r3, r3, #2
 800599a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	4611      	mov	r1, r2
 80059a6:	4618      	mov	r0, r3
 80059a8:	f004 fc2d 	bl	800a206 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b8:	461a      	mov	r2, r3
 80059ba:	2310      	movs	r3, #16
 80059bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ca:	461a      	mov	r2, r3
 80059cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80059d2:	6879      	ldr	r1, [r7, #4]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	4613      	mov	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	440b      	add	r3, r1
 80059e0:	335d      	adds	r3, #93	; 0x5d
 80059e2:	2208      	movs	r2, #8
 80059e4:	701a      	strb	r2, [r3, #0]
}
 80059e6:	e125      	b.n	8005c34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	f040 811a 	bne.w	8005c34 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	0151      	lsls	r1, r2, #5
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	440a      	add	r2, r1
 8005a16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a1a:	f023 0302 	bic.w	r3, r3, #2
 8005a1e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4613      	mov	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	440b      	add	r3, r1
 8005a2e:	335d      	adds	r3, #93	; 0x5d
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d137      	bne.n	8005aa6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4413      	add	r3, r2
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	440b      	add	r3, r1
 8005a44:	335c      	adds	r3, #92	; 0x5c
 8005a46:	2201      	movs	r2, #1
 8005a48:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005a4a:	6879      	ldr	r1, [r7, #4]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	440b      	add	r3, r1
 8005a58:	333f      	adds	r3, #63	; 0x3f
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d00b      	beq.n	8005a78 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005a60:	6879      	ldr	r1, [r7, #4]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4613      	mov	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	440b      	add	r3, r1
 8005a6e:	333f      	adds	r3, #63	; 0x3f
 8005a70:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005a72:	2b03      	cmp	r3, #3
 8005a74:	f040 80c5 	bne.w	8005c02 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005a78:	6879      	ldr	r1, [r7, #4]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	00db      	lsls	r3, r3, #3
 8005a84:	440b      	add	r3, r1
 8005a86:	3351      	adds	r3, #81	; 0x51
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	f083 0301 	eor.w	r3, r3, #1
 8005a8e:	b2d8      	uxtb	r0, r3
 8005a90:	6879      	ldr	r1, [r7, #4]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4613      	mov	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	440b      	add	r3, r1
 8005a9e:	3351      	adds	r3, #81	; 0x51
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	701a      	strb	r2, [r3, #0]
 8005aa4:	e0ad      	b.n	8005c02 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005aa6:	6879      	ldr	r1, [r7, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	440b      	add	r3, r1
 8005ab4:	335d      	adds	r3, #93	; 0x5d
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	2b03      	cmp	r3, #3
 8005aba:	d10a      	bne.n	8005ad2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005abc:	6879      	ldr	r1, [r7, #4]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	440b      	add	r3, r1
 8005aca:	335c      	adds	r3, #92	; 0x5c
 8005acc:	2202      	movs	r2, #2
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	e097      	b.n	8005c02 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005ad2:	6879      	ldr	r1, [r7, #4]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	00db      	lsls	r3, r3, #3
 8005ade:	440b      	add	r3, r1
 8005ae0:	335d      	adds	r3, #93	; 0x5d
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d10a      	bne.n	8005afe <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005ae8:	6879      	ldr	r1, [r7, #4]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	440b      	add	r3, r1
 8005af6:	335c      	adds	r3, #92	; 0x5c
 8005af8:	2202      	movs	r2, #2
 8005afa:	701a      	strb	r2, [r3, #0]
 8005afc:	e081      	b.n	8005c02 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	4613      	mov	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	440b      	add	r3, r1
 8005b0c:	335d      	adds	r3, #93	; 0x5d
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2b05      	cmp	r3, #5
 8005b12:	d10a      	bne.n	8005b2a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	440b      	add	r3, r1
 8005b22:	335c      	adds	r3, #92	; 0x5c
 8005b24:	2205      	movs	r2, #5
 8005b26:	701a      	strb	r2, [r3, #0]
 8005b28:	e06b      	b.n	8005c02 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005b2a:	6879      	ldr	r1, [r7, #4]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	440b      	add	r3, r1
 8005b38:	335d      	adds	r3, #93	; 0x5d
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b06      	cmp	r3, #6
 8005b3e:	d00a      	beq.n	8005b56 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005b40:	6879      	ldr	r1, [r7, #4]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	4613      	mov	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	440b      	add	r3, r1
 8005b4e:	335d      	adds	r3, #93	; 0x5d
 8005b50:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005b52:	2b08      	cmp	r3, #8
 8005b54:	d155      	bne.n	8005c02 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8005b56:	6879      	ldr	r1, [r7, #4]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	440b      	add	r3, r1
 8005b64:	3358      	adds	r3, #88	; 0x58
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	1c59      	adds	r1, r3, #1
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	00db      	lsls	r3, r3, #3
 8005b76:	4403      	add	r3, r0
 8005b78:	3358      	adds	r3, #88	; 0x58
 8005b7a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005b7c:	6879      	ldr	r1, [r7, #4]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4613      	mov	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	440b      	add	r3, r1
 8005b8a:	3358      	adds	r3, #88	; 0x58
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d914      	bls.n	8005bbc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005b92:	6879      	ldr	r1, [r7, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4613      	mov	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	440b      	add	r3, r1
 8005ba0:	3358      	adds	r3, #88	; 0x58
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005ba6:	6879      	ldr	r1, [r7, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4613      	mov	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	00db      	lsls	r3, r3, #3
 8005bb2:	440b      	add	r3, r1
 8005bb4:	335c      	adds	r3, #92	; 0x5c
 8005bb6:	2204      	movs	r2, #4
 8005bb8:	701a      	strb	r2, [r3, #0]
 8005bba:	e009      	b.n	8005bd0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005bbc:	6879      	ldr	r1, [r7, #4]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	440b      	add	r3, r1
 8005bca:	335c      	adds	r3, #92	; 0x5c
 8005bcc:	2202      	movs	r2, #2
 8005bce:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005be6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bee:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0e:	461a      	mov	r2, r3
 8005c10:	2302      	movs	r3, #2
 8005c12:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	b2d8      	uxtb	r0, r3
 8005c18:	6879      	ldr	r1, [r7, #4]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	440b      	add	r3, r1
 8005c26:	335c      	adds	r3, #92	; 0x5c
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	4601      	mov	r1, r0
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f00a f924 	bl	800fe7c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005c34:	bf00      	nop
 8005c36:	3718      	adds	r7, #24
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b08a      	sub	sp, #40	; 0x28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	f003 030f 	and.w	r3, r3, #15
 8005c5c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	0c5b      	lsrs	r3, r3, #17
 8005c62:	f003 030f 	and.w	r3, r3, #15
 8005c66:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	091b      	lsrs	r3, r3, #4
 8005c6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c70:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d003      	beq.n	8005c80 <HCD_RXQLVL_IRQHandler+0x44>
 8005c78:	2b05      	cmp	r3, #5
 8005c7a:	f000 8082 	beq.w	8005d82 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005c7e:	e083      	b.n	8005d88 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d07f      	beq.n	8005d86 <HCD_RXQLVL_IRQHandler+0x14a>
 8005c86:	6879      	ldr	r1, [r7, #4]
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	440b      	add	r3, r1
 8005c94:	3344      	adds	r3, #68	; 0x44
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d074      	beq.n	8005d86 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6818      	ldr	r0, [r3, #0]
 8005ca0:	6879      	ldr	r1, [r7, #4]
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	440b      	add	r3, r1
 8005cae:	3344      	adds	r3, #68	; 0x44
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	b292      	uxth	r2, r2
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	f003 fe45 	bl	8009946 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005cbc:	6879      	ldr	r1, [r7, #4]
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	440b      	add	r3, r1
 8005cca:	3344      	adds	r3, #68	; 0x44
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	18d1      	adds	r1, r2, r3
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	00db      	lsls	r3, r3, #3
 8005cde:	4403      	add	r3, r0
 8005ce0:	3344      	adds	r3, #68	; 0x44
 8005ce2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005ce4:	6879      	ldr	r1, [r7, #4]
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	440b      	add	r3, r1
 8005cf2:	334c      	adds	r3, #76	; 0x4c
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	18d1      	adds	r1, r2, r3
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	00db      	lsls	r3, r3, #3
 8005d06:	4403      	add	r3, r0
 8005d08:	334c      	adds	r3, #76	; 0x4c
 8005d0a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	4b1d      	ldr	r3, [pc, #116]	; (8005d90 <HCD_RXQLVL_IRQHandler+0x154>)
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d031      	beq.n	8005d86 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d38:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d40:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	6a3b      	ldr	r3, [r7, #32]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d4e:	461a      	mov	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005d54:	6879      	ldr	r1, [r7, #4]
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	00db      	lsls	r3, r3, #3
 8005d60:	440b      	add	r3, r1
 8005d62:	3350      	adds	r3, #80	; 0x50
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	f083 0301 	eor.w	r3, r3, #1
 8005d6a:	b2d8      	uxtb	r0, r3
 8005d6c:	6879      	ldr	r1, [r7, #4]
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	4613      	mov	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	440b      	add	r3, r1
 8005d7a:	3350      	adds	r3, #80	; 0x50
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	701a      	strb	r2, [r3, #0]
      break;
 8005d80:	e001      	b.n	8005d86 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8005d82:	bf00      	nop
 8005d84:	e000      	b.n	8005d88 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8005d86:	bf00      	nop
  }
}
 8005d88:	bf00      	nop
 8005d8a:	3728      	adds	r7, #40	; 0x28
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	1ff80000 	.word	0x1ff80000

08005d94 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005dc0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d10b      	bne.n	8005de4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d102      	bne.n	8005ddc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f00a f834 	bl	800fe44 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f043 0302 	orr.w	r3, r3, #2
 8005de2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f003 0308 	and.w	r3, r3, #8
 8005dea:	2b08      	cmp	r3, #8
 8005dec:	d132      	bne.n	8005e54 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	f043 0308 	orr.w	r3, r3, #8
 8005df4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	2b04      	cmp	r3, #4
 8005dfe:	d126      	bne.n	8005e4e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d113      	bne.n	8005e30 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005e0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e12:	d106      	bne.n	8005e22 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2102      	movs	r1, #2
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f003 fece 	bl	8009bbc <USB_InitFSLSPClkSel>
 8005e20:	e011      	b.n	8005e46 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2101      	movs	r1, #1
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f003 fec7 	bl	8009bbc <USB_InitFSLSPClkSel>
 8005e2e:	e00a      	b.n	8005e46 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d106      	bne.n	8005e46 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005e44:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f00a f826 	bl	800fe98 <HAL_HCD_PortEnabled_Callback>
 8005e4c:	e002      	b.n	8005e54 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f00a f830 	bl	800feb4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	d103      	bne.n	8005e66 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	f043 0320 	orr.w	r3, r3, #32
 8005e64:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	6013      	str	r3, [r2, #0]
}
 8005e72:	bf00      	nop
 8005e74:	3718      	adds	r7, #24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
	...

08005e7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e11f      	b.n	80060ce <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d106      	bne.n	8005ea8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7fc f852 	bl	8001f4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2224      	movs	r2, #36	; 0x24
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0201 	bic.w	r2, r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ece:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ede:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ee0:	f002 fc44 	bl	800876c <HAL_RCC_GetPCLK1Freq>
 8005ee4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	4a7b      	ldr	r2, [pc, #492]	; (80060d8 <HAL_I2C_Init+0x25c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d807      	bhi.n	8005f00 <HAL_I2C_Init+0x84>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4a7a      	ldr	r2, [pc, #488]	; (80060dc <HAL_I2C_Init+0x260>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	bf94      	ite	ls
 8005ef8:	2301      	movls	r3, #1
 8005efa:	2300      	movhi	r3, #0
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	e006      	b.n	8005f0e <HAL_I2C_Init+0x92>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4a77      	ldr	r2, [pc, #476]	; (80060e0 <HAL_I2C_Init+0x264>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	bf94      	ite	ls
 8005f08:	2301      	movls	r3, #1
 8005f0a:	2300      	movhi	r3, #0
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e0db      	b.n	80060ce <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4a72      	ldr	r2, [pc, #456]	; (80060e4 <HAL_I2C_Init+0x268>)
 8005f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f1e:	0c9b      	lsrs	r3, r3, #18
 8005f20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6a1b      	ldr	r3, [r3, #32]
 8005f3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	4a64      	ldr	r2, [pc, #400]	; (80060d8 <HAL_I2C_Init+0x25c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d802      	bhi.n	8005f50 <HAL_I2C_Init+0xd4>
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	e009      	b.n	8005f64 <HAL_I2C_Init+0xe8>
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005f56:	fb02 f303 	mul.w	r3, r2, r3
 8005f5a:	4a63      	ldr	r2, [pc, #396]	; (80060e8 <HAL_I2C_Init+0x26c>)
 8005f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f60:	099b      	lsrs	r3, r3, #6
 8005f62:	3301      	adds	r3, #1
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	6812      	ldr	r2, [r2, #0]
 8005f68:	430b      	orrs	r3, r1
 8005f6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005f76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	4956      	ldr	r1, [pc, #344]	; (80060d8 <HAL_I2C_Init+0x25c>)
 8005f80:	428b      	cmp	r3, r1
 8005f82:	d80d      	bhi.n	8005fa0 <HAL_I2C_Init+0x124>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	1e59      	subs	r1, r3, #1
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f92:	3301      	adds	r3, #1
 8005f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f98:	2b04      	cmp	r3, #4
 8005f9a:	bf38      	it	cc
 8005f9c:	2304      	movcc	r3, #4
 8005f9e:	e04f      	b.n	8006040 <HAL_I2C_Init+0x1c4>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d111      	bne.n	8005fcc <HAL_I2C_Init+0x150>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	1e58      	subs	r0, r3, #1
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6859      	ldr	r1, [r3, #4]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	440b      	add	r3, r1
 8005fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fba:	3301      	adds	r3, #1
 8005fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	bf0c      	ite	eq
 8005fc4:	2301      	moveq	r3, #1
 8005fc6:	2300      	movne	r3, #0
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	e012      	b.n	8005ff2 <HAL_I2C_Init+0x176>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	1e58      	subs	r0, r3, #1
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6859      	ldr	r1, [r3, #4]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	440b      	add	r3, r1
 8005fda:	0099      	lsls	r1, r3, #2
 8005fdc:	440b      	add	r3, r1
 8005fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	bf0c      	ite	eq
 8005fec:	2301      	moveq	r3, #1
 8005fee:	2300      	movne	r3, #0
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <HAL_I2C_Init+0x17e>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e022      	b.n	8006040 <HAL_I2C_Init+0x1c4>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10e      	bne.n	8006020 <HAL_I2C_Init+0x1a4>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	1e58      	subs	r0, r3, #1
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6859      	ldr	r1, [r3, #4]
 800600a:	460b      	mov	r3, r1
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	440b      	add	r3, r1
 8006010:	fbb0 f3f3 	udiv	r3, r0, r3
 8006014:	3301      	adds	r3, #1
 8006016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800601a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800601e:	e00f      	b.n	8006040 <HAL_I2C_Init+0x1c4>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	1e58      	subs	r0, r3, #1
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6859      	ldr	r1, [r3, #4]
 8006028:	460b      	mov	r3, r1
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	440b      	add	r3, r1
 800602e:	0099      	lsls	r1, r3, #2
 8006030:	440b      	add	r3, r1
 8006032:	fbb0 f3f3 	udiv	r3, r0, r3
 8006036:	3301      	adds	r3, #1
 8006038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800603c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006040:	6879      	ldr	r1, [r7, #4]
 8006042:	6809      	ldr	r1, [r1, #0]
 8006044:	4313      	orrs	r3, r2
 8006046:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	69da      	ldr	r2, [r3, #28]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	431a      	orrs	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800606e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6911      	ldr	r1, [r2, #16]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	68d2      	ldr	r2, [r2, #12]
 800607a:	4311      	orrs	r1, r2
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6812      	ldr	r2, [r2, #0]
 8006080:	430b      	orrs	r3, r1
 8006082:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	695a      	ldr	r2, [r3, #20]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	431a      	orrs	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	430a      	orrs	r2, r1
 800609e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f042 0201 	orr.w	r2, r2, #1
 80060ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	000186a0 	.word	0x000186a0
 80060dc:	001e847f 	.word	0x001e847f
 80060e0:	003d08ff 	.word	0x003d08ff
 80060e4:	431bde83 	.word	0x431bde83
 80060e8:	10624dd3 	.word	0x10624dd3

080060ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b088      	sub	sp, #32
 80060f0:	af02      	add	r7, sp, #8
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	607a      	str	r2, [r7, #4]
 80060f6:	461a      	mov	r2, r3
 80060f8:	460b      	mov	r3, r1
 80060fa:	817b      	strh	r3, [r7, #10]
 80060fc:	4613      	mov	r3, r2
 80060fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006100:	f7fc fe28 	bl	8002d54 <HAL_GetTick>
 8006104:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b20      	cmp	r3, #32
 8006110:	f040 80e0 	bne.w	80062d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	2319      	movs	r3, #25
 800611a:	2201      	movs	r2, #1
 800611c:	4970      	ldr	r1, [pc, #448]	; (80062e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f000 fc56 	bl	80069d0 <I2C_WaitOnFlagUntilTimeout>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800612a:	2302      	movs	r3, #2
 800612c:	e0d3      	b.n	80062d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006134:	2b01      	cmp	r3, #1
 8006136:	d101      	bne.n	800613c <HAL_I2C_Master_Transmit+0x50>
 8006138:	2302      	movs	r3, #2
 800613a:	e0cc      	b.n	80062d6 <HAL_I2C_Master_Transmit+0x1ea>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b01      	cmp	r3, #1
 8006150:	d007      	beq.n	8006162 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 0201 	orr.w	r2, r2, #1
 8006160:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006170:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2221      	movs	r2, #33	; 0x21
 8006176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2210      	movs	r2, #16
 800617e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	893a      	ldrh	r2, [r7, #8]
 8006192:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006198:	b29a      	uxth	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4a50      	ldr	r2, [pc, #320]	; (80062e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80061a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80061a4:	8979      	ldrh	r1, [r7, #10]
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	6a3a      	ldr	r2, [r7, #32]
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 fac2 	bl	8006734 <I2C_MasterRequestWrite>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e08d      	b.n	80062d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ba:	2300      	movs	r3, #0
 80061bc:	613b      	str	r3, [r7, #16]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	613b      	str	r3, [r7, #16]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80061d0:	e066      	b.n	80062a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	6a39      	ldr	r1, [r7, #32]
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 fcd0 	bl	8006b7c <I2C_WaitOnTXEFlagUntilTimeout>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00d      	beq.n	80061fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e6:	2b04      	cmp	r3, #4
 80061e8:	d107      	bne.n	80061fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e06b      	b.n	80062d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	781a      	ldrb	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006218:	b29b      	uxth	r3, r3
 800621a:	3b01      	subs	r3, #1
 800621c:	b29a      	uxth	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006226:	3b01      	subs	r3, #1
 8006228:	b29a      	uxth	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b04      	cmp	r3, #4
 800623a:	d11b      	bne.n	8006274 <HAL_I2C_Master_Transmit+0x188>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006240:	2b00      	cmp	r3, #0
 8006242:	d017      	beq.n	8006274 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	781a      	ldrb	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	1c5a      	adds	r2, r3, #1
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800625e:	b29b      	uxth	r3, r3
 8006260:	3b01      	subs	r3, #1
 8006262:	b29a      	uxth	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800626c:	3b01      	subs	r3, #1
 800626e:	b29a      	uxth	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	6a39      	ldr	r1, [r7, #32]
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f000 fcc0 	bl	8006bfe <I2C_WaitOnBTFFlagUntilTimeout>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00d      	beq.n	80062a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006288:	2b04      	cmp	r3, #4
 800628a:	d107      	bne.n	800629c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800629a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e01a      	b.n	80062d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d194      	bne.n	80061d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	e000      	b.n	80062d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80062d4:	2302      	movs	r3, #2
  }
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	00100002 	.word	0x00100002
 80062e4:	ffff0000 	.word	0xffff0000

080062e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08c      	sub	sp, #48	; 0x30
 80062ec:	af02      	add	r7, sp, #8
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	607a      	str	r2, [r7, #4]
 80062f2:	461a      	mov	r2, r3
 80062f4:	460b      	mov	r3, r1
 80062f6:	817b      	strh	r3, [r7, #10]
 80062f8:	4613      	mov	r3, r2
 80062fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80062fc:	f7fc fd2a 	bl	8002d54 <HAL_GetTick>
 8006300:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b20      	cmp	r3, #32
 800630c:	f040 820b 	bne.w	8006726 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	2319      	movs	r3, #25
 8006316:	2201      	movs	r2, #1
 8006318:	497c      	ldr	r1, [pc, #496]	; (800650c <HAL_I2C_Master_Receive+0x224>)
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f000 fb58 	bl	80069d0 <I2C_WaitOnFlagUntilTimeout>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006326:	2302      	movs	r3, #2
 8006328:	e1fe      	b.n	8006728 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <HAL_I2C_Master_Receive+0x50>
 8006334:	2302      	movs	r3, #2
 8006336:	e1f7      	b.n	8006728 <HAL_I2C_Master_Receive+0x440>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b01      	cmp	r3, #1
 800634c:	d007      	beq.n	800635e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f042 0201 	orr.w	r2, r2, #1
 800635c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800636c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2222      	movs	r2, #34	; 0x22
 8006372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2210      	movs	r2, #16
 800637a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	893a      	ldrh	r2, [r7, #8]
 800638e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006394:	b29a      	uxth	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4a5c      	ldr	r2, [pc, #368]	; (8006510 <HAL_I2C_Master_Receive+0x228>)
 800639e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80063a0:	8979      	ldrh	r1, [r7, #10]
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 fa46 	bl	8006838 <I2C_MasterRequestRead>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e1b8      	b.n	8006728 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d113      	bne.n	80063e6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063be:	2300      	movs	r3, #0
 80063c0:	623b      	str	r3, [r7, #32]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	623b      	str	r3, [r7, #32]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	623b      	str	r3, [r7, #32]
 80063d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	e18c      	b.n	8006700 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d11b      	bne.n	8006426 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063fe:	2300      	movs	r3, #0
 8006400:	61fb      	str	r3, [r7, #28]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	61fb      	str	r3, [r7, #28]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	61fb      	str	r3, [r7, #28]
 8006412:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	e16c      	b.n	8006700 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800642a:	2b02      	cmp	r3, #2
 800642c:	d11b      	bne.n	8006466 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800643c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800644c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800644e:	2300      	movs	r3, #0
 8006450:	61bb      	str	r3, [r7, #24]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	61bb      	str	r3, [r7, #24]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	61bb      	str	r3, [r7, #24]
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	e14c      	b.n	8006700 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006474:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006476:	2300      	movs	r3, #0
 8006478:	617b      	str	r3, [r7, #20]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	617b      	str	r3, [r7, #20]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	617b      	str	r3, [r7, #20]
 800648a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800648c:	e138      	b.n	8006700 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006492:	2b03      	cmp	r3, #3
 8006494:	f200 80f1 	bhi.w	800667a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800649c:	2b01      	cmp	r3, #1
 800649e:	d123      	bne.n	80064e8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 fbeb 	bl	8006c80 <I2C_WaitOnRXNEFlagUntilTimeout>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d001      	beq.n	80064b4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e139      	b.n	8006728 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	691a      	ldr	r2, [r3, #16]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064dc:	b29b      	uxth	r3, r3
 80064de:	3b01      	subs	r3, #1
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064e6:	e10b      	b.n	8006700 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d14e      	bne.n	800658e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f6:	2200      	movs	r2, #0
 80064f8:	4906      	ldr	r1, [pc, #24]	; (8006514 <HAL_I2C_Master_Receive+0x22c>)
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f000 fa68 	bl	80069d0 <I2C_WaitOnFlagUntilTimeout>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d008      	beq.n	8006518 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e10e      	b.n	8006728 <HAL_I2C_Master_Receive+0x440>
 800650a:	bf00      	nop
 800650c:	00100002 	.word	0x00100002
 8006510:	ffff0000 	.word	0xffff0000
 8006514:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006526:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	691a      	ldr	r2, [r3, #16]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006532:	b2d2      	uxtb	r2, r2
 8006534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	1c5a      	adds	r2, r3, #1
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006544:	3b01      	subs	r3, #1
 8006546:	b29a      	uxth	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006550:	b29b      	uxth	r3, r3
 8006552:	3b01      	subs	r3, #1
 8006554:	b29a      	uxth	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	691a      	ldr	r2, [r3, #16]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006564:	b2d2      	uxtb	r2, r2
 8006566:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006576:	3b01      	subs	r3, #1
 8006578:	b29a      	uxth	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006582:	b29b      	uxth	r3, r3
 8006584:	3b01      	subs	r3, #1
 8006586:	b29a      	uxth	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800658c:	e0b8      	b.n	8006700 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	2200      	movs	r2, #0
 8006596:	4966      	ldr	r1, [pc, #408]	; (8006730 <HAL_I2C_Master_Receive+0x448>)
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f000 fa19 	bl	80069d0 <I2C_WaitOnFlagUntilTimeout>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d001      	beq.n	80065a8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e0bf      	b.n	8006728 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	691a      	ldr	r2, [r3, #16]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d4:	3b01      	subs	r3, #1
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	3b01      	subs	r3, #1
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	9300      	str	r3, [sp, #0]
 80065ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f0:	2200      	movs	r2, #0
 80065f2:	494f      	ldr	r1, [pc, #316]	; (8006730 <HAL_I2C_Master_Receive+0x448>)
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 f9eb 	bl	80069d0 <I2C_WaitOnFlagUntilTimeout>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e091      	b.n	8006728 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006612:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	691a      	ldr	r2, [r3, #16]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	1c5a      	adds	r2, r3, #1
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006630:	3b01      	subs	r3, #1
 8006632:	b29a      	uxth	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663c:	b29b      	uxth	r3, r3
 800663e:	3b01      	subs	r3, #1
 8006640:	b29a      	uxth	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	691a      	ldr	r2, [r3, #16]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006650:	b2d2      	uxtb	r2, r2
 8006652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006662:	3b01      	subs	r3, #1
 8006664:	b29a      	uxth	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800666e:	b29b      	uxth	r3, r3
 8006670:	3b01      	subs	r3, #1
 8006672:	b29a      	uxth	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006678:	e042      	b.n	8006700 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800667a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800667c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f000 fafe 	bl	8006c80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e04c      	b.n	8006728 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	691a      	ldr	r2, [r3, #16]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006698:	b2d2      	uxtb	r2, r2
 800669a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	1c5a      	adds	r2, r3, #1
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066aa:	3b01      	subs	r3, #1
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	3b01      	subs	r3, #1
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	f003 0304 	and.w	r3, r3, #4
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	d118      	bne.n	8006700 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	691a      	ldr	r2, [r3, #16]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	b2d2      	uxtb	r2, r2
 80066da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ea:	3b01      	subs	r3, #1
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	3b01      	subs	r3, #1
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006704:	2b00      	cmp	r3, #0
 8006706:	f47f aec2 	bne.w	800648e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2220      	movs	r2, #32
 800670e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	e000      	b.n	8006728 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006726:	2302      	movs	r3, #2
  }
}
 8006728:	4618      	mov	r0, r3
 800672a:	3728      	adds	r7, #40	; 0x28
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	00010004 	.word	0x00010004

08006734 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b088      	sub	sp, #32
 8006738:	af02      	add	r7, sp, #8
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	607a      	str	r2, [r7, #4]
 800673e:	603b      	str	r3, [r7, #0]
 8006740:	460b      	mov	r3, r1
 8006742:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2b08      	cmp	r3, #8
 800674e:	d006      	beq.n	800675e <I2C_MasterRequestWrite+0x2a>
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d003      	beq.n	800675e <I2C_MasterRequestWrite+0x2a>
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800675c:	d108      	bne.n	8006770 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	e00b      	b.n	8006788 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006774:	2b12      	cmp	r3, #18
 8006776:	d107      	bne.n	8006788 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006786:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 f91b 	bl	80069d0 <I2C_WaitOnFlagUntilTimeout>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00c      	beq.n	80067ba <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e035      	b.n	8006826 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067c2:	d108      	bne.n	80067d6 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067c4:	897b      	ldrh	r3, [r7, #10]
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	461a      	mov	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067d2:	611a      	str	r2, [r3, #16]
 80067d4:	e01b      	b.n	800680e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80067d6:	897b      	ldrh	r3, [r7, #10]
 80067d8:	11db      	asrs	r3, r3, #7
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	f003 0306 	and.w	r3, r3, #6
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	f063 030f 	orn	r3, r3, #15
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	490f      	ldr	r1, [pc, #60]	; (8006830 <I2C_MasterRequestWrite+0xfc>)
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f000 f942 	bl	8006a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e010      	b.n	8006826 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006804:	897b      	ldrh	r3, [r7, #10]
 8006806:	b2da      	uxtb	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	4908      	ldr	r1, [pc, #32]	; (8006834 <I2C_MasterRequestWrite+0x100>)
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f000 f932 	bl	8006a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e000      	b.n	8006826 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	00010008 	.word	0x00010008
 8006834:	00010002 	.word	0x00010002

08006838 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b088      	sub	sp, #32
 800683c:	af02      	add	r7, sp, #8
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	607a      	str	r2, [r7, #4]
 8006842:	603b      	str	r3, [r7, #0]
 8006844:	460b      	mov	r3, r1
 8006846:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800685c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2b08      	cmp	r3, #8
 8006862:	d006      	beq.n	8006872 <I2C_MasterRequestRead+0x3a>
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d003      	beq.n	8006872 <I2C_MasterRequestRead+0x3a>
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006870:	d108      	bne.n	8006884 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	e00b      	b.n	800689c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006888:	2b11      	cmp	r3, #17
 800688a:	d107      	bne.n	800689c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800689a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 f891 	bl	80069d0 <I2C_WaitOnFlagUntilTimeout>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00c      	beq.n	80068ce <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e078      	b.n	80069c0 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068d6:	d108      	bne.n	80068ea <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80068d8:	897b      	ldrh	r3, [r7, #10]
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	f043 0301 	orr.w	r3, r3, #1
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	611a      	str	r2, [r3, #16]
 80068e8:	e05e      	b.n	80069a8 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80068ea:	897b      	ldrh	r3, [r7, #10]
 80068ec:	11db      	asrs	r3, r3, #7
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	f003 0306 	and.w	r3, r3, #6
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	f063 030f 	orn	r3, r3, #15
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	4930      	ldr	r1, [pc, #192]	; (80069c8 <I2C_MasterRequestRead+0x190>)
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 f8b8 	bl	8006a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e053      	b.n	80069c0 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006918:	897b      	ldrh	r3, [r7, #10]
 800691a:	b2da      	uxtb	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	4929      	ldr	r1, [pc, #164]	; (80069cc <I2C_MasterRequestRead+0x194>)
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f000 f8a8 	bl	8006a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d001      	beq.n	8006938 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e043      	b.n	80069c0 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006938:	2300      	movs	r3, #0
 800693a:	613b      	str	r3, [r7, #16]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	613b      	str	r3, [r7, #16]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	613b      	str	r3, [r7, #16]
 800694c:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800695c:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 f830 	bl	80069d0 <I2C_WaitOnFlagUntilTimeout>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00c      	beq.n	8006990 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006980:	2b00      	cmp	r3, #0
 8006982:	d003      	beq.n	800698c <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800698a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e017      	b.n	80069c0 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006990:	897b      	ldrh	r3, [r7, #10]
 8006992:	11db      	asrs	r3, r3, #7
 8006994:	b2db      	uxtb	r3, r3
 8006996:	f003 0306 	and.w	r3, r3, #6
 800699a:	b2db      	uxtb	r3, r3
 800699c:	f063 030e 	orn	r3, r3, #14
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	4907      	ldr	r1, [pc, #28]	; (80069cc <I2C_MasterRequestRead+0x194>)
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f000 f865 	bl	8006a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e000      	b.n	80069c0 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	00010008 	.word	0x00010008
 80069cc:	00010002 	.word	0x00010002

080069d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	603b      	str	r3, [r7, #0]
 80069dc:	4613      	mov	r3, r2
 80069de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069e0:	e025      	b.n	8006a2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e8:	d021      	beq.n	8006a2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ea:	f7fc f9b3 	bl	8002d54 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d302      	bcc.n	8006a00 <I2C_WaitOnFlagUntilTimeout+0x30>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d116      	bne.n	8006a2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2220      	movs	r2, #32
 8006a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1a:	f043 0220 	orr.w	r2, r3, #32
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e023      	b.n	8006a76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	0c1b      	lsrs	r3, r3, #16
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d10d      	bne.n	8006a54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	43da      	mvns	r2, r3
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	4013      	ands	r3, r2
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	bf0c      	ite	eq
 8006a4a:	2301      	moveq	r3, #1
 8006a4c:	2300      	movne	r3, #0
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	461a      	mov	r2, r3
 8006a52:	e00c      	b.n	8006a6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	43da      	mvns	r2, r3
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	4013      	ands	r3, r2
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	bf0c      	ite	eq
 8006a66:	2301      	moveq	r3, #1
 8006a68:	2300      	movne	r3, #0
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	79fb      	ldrb	r3, [r7, #7]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d0b6      	beq.n	80069e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b084      	sub	sp, #16
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	60f8      	str	r0, [r7, #12]
 8006a86:	60b9      	str	r1, [r7, #8]
 8006a88:	607a      	str	r2, [r7, #4]
 8006a8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a8c:	e051      	b.n	8006b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a9c:	d123      	bne.n	8006ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ab6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	f043 0204 	orr.w	r2, r3, #4
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e046      	b.n	8006b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aec:	d021      	beq.n	8006b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aee:	f7fc f931 	bl	8002d54 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d302      	bcc.n	8006b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d116      	bne.n	8006b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1e:	f043 0220 	orr.w	r2, r3, #32
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e020      	b.n	8006b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	0c1b      	lsrs	r3, r3, #16
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d10c      	bne.n	8006b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	43da      	mvns	r2, r3
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	4013      	ands	r3, r2
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	bf14      	ite	ne
 8006b4e:	2301      	movne	r3, #1
 8006b50:	2300      	moveq	r3, #0
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	e00b      	b.n	8006b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	43da      	mvns	r2, r3
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	4013      	ands	r3, r2
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	bf14      	ite	ne
 8006b68:	2301      	movne	r3, #1
 8006b6a:	2300      	moveq	r3, #0
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d18d      	bne.n	8006a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b88:	e02d      	b.n	8006be6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 f8ce 	bl	8006d2c <I2C_IsAcknowledgeFailed>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e02d      	b.n	8006bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba0:	d021      	beq.n	8006be6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ba2:	f7fc f8d7 	bl	8002d54 <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d302      	bcc.n	8006bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d116      	bne.n	8006be6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	f043 0220 	orr.w	r2, r3, #32
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e007      	b.n	8006bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	695b      	ldr	r3, [r3, #20]
 8006bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf0:	2b80      	cmp	r3, #128	; 0x80
 8006bf2:	d1ca      	bne.n	8006b8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b084      	sub	sp, #16
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	60f8      	str	r0, [r7, #12]
 8006c06:	60b9      	str	r1, [r7, #8]
 8006c08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c0a:	e02d      	b.n	8006c68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 f88d 	bl	8006d2c <I2C_IsAcknowledgeFailed>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e02d      	b.n	8006c78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c22:	d021      	beq.n	8006c68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c24:	f7fc f896 	bl	8002d54 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d302      	bcc.n	8006c3a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d116      	bne.n	8006c68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2220      	movs	r2, #32
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c54:	f043 0220 	orr.w	r2, r3, #32
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e007      	b.n	8006c78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	f003 0304 	and.w	r3, r3, #4
 8006c72:	2b04      	cmp	r3, #4
 8006c74:	d1ca      	bne.n	8006c0c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c8c:	e042      	b.n	8006d14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	f003 0310 	and.w	r3, r3, #16
 8006c98:	2b10      	cmp	r3, #16
 8006c9a:	d119      	bne.n	8006cd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f06f 0210 	mvn.w	r2, #16
 8006ca4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e029      	b.n	8006d24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cd0:	f7fc f840 	bl	8002d54 <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d302      	bcc.n	8006ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d116      	bne.n	8006d14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d00:	f043 0220 	orr.w	r2, r3, #32
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e007      	b.n	8006d24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1e:	2b40      	cmp	r3, #64	; 0x40
 8006d20:	d1b5      	bne.n	8006c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d42:	d11b      	bne.n	8006d7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2220      	movs	r2, #32
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d68:	f043 0204 	orr.w	r2, r3, #4
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e000      	b.n	8006d7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
	...

08006d8c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b088      	sub	sp, #32
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e128      	b.n	8006ff0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d109      	bne.n	8006dbe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a90      	ldr	r2, [pc, #576]	; (8006ff8 <HAL_I2S_Init+0x26c>)
 8006db6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7fb f93d 	bl	8002038 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	6812      	ldr	r2, [r2, #0]
 8006dd0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006dd4:	f023 030f 	bic.w	r3, r3, #15
 8006dd8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2202      	movs	r2, #2
 8006de0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d060      	beq.n	8006eac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d102      	bne.n	8006df8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006df2:	2310      	movs	r3, #16
 8006df4:	617b      	str	r3, [r7, #20]
 8006df6:	e001      	b.n	8006dfc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006df8:	2320      	movs	r3, #32
 8006dfa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	2b20      	cmp	r3, #32
 8006e02:	d802      	bhi.n	8006e0a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006e0a:	2001      	movs	r0, #1
 8006e0c:	f001 fdd0 	bl	80089b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006e10:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e1a:	d125      	bne.n	8006e68 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d010      	beq.n	8006e46 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e2e:	4613      	mov	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	005b      	lsls	r3, r3, #1
 8006e36:	461a      	mov	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	695b      	ldr	r3, [r3, #20]
 8006e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e40:	3305      	adds	r3, #5
 8006e42:	613b      	str	r3, [r7, #16]
 8006e44:	e01f      	b.n	8006e86 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	00db      	lsls	r3, r3, #3
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e50:	4613      	mov	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	005b      	lsls	r3, r3, #1
 8006e58:	461a      	mov	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e62:	3305      	adds	r3, #5
 8006e64:	613b      	str	r3, [r7, #16]
 8006e66:	e00e      	b.n	8006e86 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e70:	4613      	mov	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	005b      	lsls	r3, r3, #1
 8006e78:	461a      	mov	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e82:	3305      	adds	r3, #5
 8006e84:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	4a5c      	ldr	r2, [pc, #368]	; (8006ffc <HAL_I2S_Init+0x270>)
 8006e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e8e:	08db      	lsrs	r3, r3, #3
 8006e90:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	085b      	lsrs	r3, r3, #1
 8006ea2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	021b      	lsls	r3, r3, #8
 8006ea8:	61bb      	str	r3, [r7, #24]
 8006eaa:	e003      	b.n	8006eb4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006eac:	2302      	movs	r3, #2
 8006eae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d902      	bls.n	8006ec0 <HAL_I2S_Init+0x134>
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	2bff      	cmp	r3, #255	; 0xff
 8006ebe:	d907      	bls.n	8006ed0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec4:	f043 0210 	orr.w	r2, r3, #16
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e08f      	b.n	8006ff0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	691a      	ldr	r2, [r3, #16]
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	ea42 0103 	orr.w	r1, r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	69fa      	ldr	r2, [r7, #28]
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006eee:	f023 030f 	bic.w	r3, r3, #15
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	6851      	ldr	r1, [r2, #4]
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	6892      	ldr	r2, [r2, #8]
 8006efa:	4311      	orrs	r1, r2
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	68d2      	ldr	r2, [r2, #12]
 8006f00:	4311      	orrs	r1, r2
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	6992      	ldr	r2, [r2, #24]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	431a      	orrs	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f12:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d161      	bne.n	8006fe0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a38      	ldr	r2, [pc, #224]	; (8007000 <HAL_I2S_Init+0x274>)
 8006f20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a37      	ldr	r2, [pc, #220]	; (8007004 <HAL_I2S_Init+0x278>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d101      	bne.n	8006f30 <HAL_I2S_Init+0x1a4>
 8006f2c:	4b36      	ldr	r3, [pc, #216]	; (8007008 <HAL_I2S_Init+0x27c>)
 8006f2e:	e001      	b.n	8006f34 <HAL_I2S_Init+0x1a8>
 8006f30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	6812      	ldr	r2, [r2, #0]
 8006f3a:	4932      	ldr	r1, [pc, #200]	; (8007004 <HAL_I2S_Init+0x278>)
 8006f3c:	428a      	cmp	r2, r1
 8006f3e:	d101      	bne.n	8006f44 <HAL_I2S_Init+0x1b8>
 8006f40:	4a31      	ldr	r2, [pc, #196]	; (8007008 <HAL_I2S_Init+0x27c>)
 8006f42:	e001      	b.n	8006f48 <HAL_I2S_Init+0x1bc>
 8006f44:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006f48:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006f4c:	f023 030f 	bic.w	r3, r3, #15
 8006f50:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a2b      	ldr	r2, [pc, #172]	; (8007004 <HAL_I2S_Init+0x278>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d101      	bne.n	8006f60 <HAL_I2S_Init+0x1d4>
 8006f5c:	4b2a      	ldr	r3, [pc, #168]	; (8007008 <HAL_I2S_Init+0x27c>)
 8006f5e:	e001      	b.n	8006f64 <HAL_I2S_Init+0x1d8>
 8006f60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f64:	2202      	movs	r2, #2
 8006f66:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a25      	ldr	r2, [pc, #148]	; (8007004 <HAL_I2S_Init+0x278>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d101      	bne.n	8006f76 <HAL_I2S_Init+0x1ea>
 8006f72:	4b25      	ldr	r3, [pc, #148]	; (8007008 <HAL_I2S_Init+0x27c>)
 8006f74:	e001      	b.n	8006f7a <HAL_I2S_Init+0x1ee>
 8006f76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f7a:	69db      	ldr	r3, [r3, #28]
 8006f7c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f86:	d003      	beq.n	8006f90 <HAL_I2S_Init+0x204>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d103      	bne.n	8006f98 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006f90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f94:	613b      	str	r3, [r7, #16]
 8006f96:	e001      	b.n	8006f9c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	b299      	uxth	r1, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006fb2:	4303      	orrs	r3, r0
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	430b      	orrs	r3, r1
 8006fb8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	897b      	ldrh	r3, [r7, #10]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006fc8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a0d      	ldr	r2, [pc, #52]	; (8007004 <HAL_I2S_Init+0x278>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d101      	bne.n	8006fd8 <HAL_I2S_Init+0x24c>
 8006fd4:	4b0c      	ldr	r3, [pc, #48]	; (8007008 <HAL_I2S_Init+0x27c>)
 8006fd6:	e001      	b.n	8006fdc <HAL_I2S_Init+0x250>
 8006fd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006fdc:	897a      	ldrh	r2, [r7, #10]
 8006fde:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3720      	adds	r7, #32
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	08007889 	.word	0x08007889
 8006ffc:	cccccccd 	.word	0xcccccccd
 8007000:	08007a11 	.word	0x08007a11
 8007004:	40003800 	.word	0x40003800
 8007008:	40003400 	.word	0x40003400

0800700c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	4613      	mov	r3, r2
 8007018:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <HAL_I2S_Transmit_DMA+0x1a>
 8007020:	88fb      	ldrh	r3, [r7, #6]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e08e      	b.n	8007148 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b01      	cmp	r3, #1
 8007034:	d101      	bne.n	800703a <HAL_I2S_Transmit_DMA+0x2e>
 8007036:	2302      	movs	r3, #2
 8007038:	e086      	b.n	8007148 <HAL_I2S_Transmit_DMA+0x13c>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b01      	cmp	r3, #1
 800704c:	d005      	beq.n	800705a <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8007056:	2302      	movs	r3, #2
 8007058:	e076      	b.n	8007148 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2203      	movs	r2, #3
 800705e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	f003 0307 	and.w	r3, r3, #7
 8007078:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2b03      	cmp	r3, #3
 800707e:	d002      	beq.n	8007086 <HAL_I2S_Transmit_DMA+0x7a>
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	2b05      	cmp	r3, #5
 8007084:	d10a      	bne.n	800709c <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8007086:	88fb      	ldrh	r3, [r7, #6]
 8007088:	005b      	lsls	r3, r3, #1
 800708a:	b29a      	uxth	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8007090:	88fb      	ldrh	r3, [r7, #6]
 8007092:	005b      	lsls	r3, r3, #1
 8007094:	b29a      	uxth	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	855a      	strh	r2, [r3, #42]	; 0x2a
 800709a:	e005      	b.n	80070a8 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	88fa      	ldrh	r2, [r7, #6]
 80070a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	88fa      	ldrh	r2, [r7, #6]
 80070a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	4a28      	ldr	r2, [pc, #160]	; (8007150 <HAL_I2S_Transmit_DMA+0x144>)
 80070ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b4:	4a27      	ldr	r2, [pc, #156]	; (8007154 <HAL_I2S_Transmit_DMA+0x148>)
 80070b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070bc:	4a26      	ldr	r2, [pc, #152]	; (8007158 <HAL_I2S_Transmit_DMA+0x14c>)
 80070be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80070c8:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80070d0:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070d6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80070d8:	f7fc fcc8 	bl	8003a6c <HAL_DMA_Start_IT>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00f      	beq.n	8007102 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070e6:	f043 0208 	orr.w	r2, r3, #8
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e022      	b.n	8007148 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	69db      	ldr	r3, [r3, #28]
 8007108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800710c:	2b00      	cmp	r3, #0
 800710e:	d107      	bne.n	8007120 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	69da      	ldr	r2, [r3, #28]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800711e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f003 0302 	and.w	r3, r3, #2
 800712a:	2b00      	cmp	r3, #0
 800712c:	d107      	bne.n	800713e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f042 0202 	orr.w	r2, r2, #2
 800713c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3718      	adds	r7, #24
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	08007767 	.word	0x08007767
 8007154:	08007725 	.word	0x08007725
 8007158:	08007783 	.word	0x08007783

0800715c <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b01      	cmp	r3, #1
 800716e:	d101      	bne.n	8007174 <HAL_I2S_DMAPause+0x18>
 8007170:	2302      	movs	r3, #2
 8007172:	e04a      	b.n	800720a <HAL_I2S_DMAPause+0xae>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b03      	cmp	r3, #3
 8007186:	d108      	bne.n	800719a <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f022 0202 	bic.w	r2, r2, #2
 8007196:	605a      	str	r2, [r3, #4]
 8007198:	e032      	b.n	8007200 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	d108      	bne.n	80071b8 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f022 0201 	bic.w	r2, r2, #1
 80071b4:	605a      	str	r2, [r3, #4]
 80071b6:	e023      	b.n	8007200 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b05      	cmp	r3, #5
 80071c2:	d11d      	bne.n	8007200 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685a      	ldr	r2, [r3, #4]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f022 0203 	bic.w	r2, r2, #3
 80071d2:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a0f      	ldr	r2, [pc, #60]	; (8007218 <HAL_I2S_DMAPause+0xbc>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d101      	bne.n	80071e2 <HAL_I2S_DMAPause+0x86>
 80071de:	4b0f      	ldr	r3, [pc, #60]	; (800721c <HAL_I2S_DMAPause+0xc0>)
 80071e0:	e001      	b.n	80071e6 <HAL_I2S_DMAPause+0x8a>
 80071e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	490a      	ldr	r1, [pc, #40]	; (8007218 <HAL_I2S_DMAPause+0xbc>)
 80071ee:	428b      	cmp	r3, r1
 80071f0:	d101      	bne.n	80071f6 <HAL_I2S_DMAPause+0x9a>
 80071f2:	4b0a      	ldr	r3, [pc, #40]	; (800721c <HAL_I2S_DMAPause+0xc0>)
 80071f4:	e001      	b.n	80071fa <HAL_I2S_DMAPause+0x9e>
 80071f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071fa:	f022 0203 	bic.w	r2, r2, #3
 80071fe:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	40003800 	.word	0x40003800
 800721c:	40003400 	.word	0x40003400

08007220 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b01      	cmp	r3, #1
 8007232:	d101      	bne.n	8007238 <HAL_I2S_DMAResume+0x18>
 8007234:	2302      	movs	r3, #2
 8007236:	e07d      	b.n	8007334 <HAL_I2S_DMAResume+0x114>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b03      	cmp	r3, #3
 800724a:	d108      	bne.n	800725e <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	685a      	ldr	r2, [r3, #4]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f042 0202 	orr.w	r2, r2, #2
 800725a:	605a      	str	r2, [r3, #4]
 800725c:	e056      	b.n	800730c <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b04      	cmp	r3, #4
 8007268:	d108      	bne.n	800727c <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f042 0201 	orr.w	r2, r2, #1
 8007278:	605a      	str	r2, [r3, #4]
 800727a:	e047      	b.n	800730c <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b05      	cmp	r3, #5
 8007286:	d141      	bne.n	800730c <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f042 0203 	orr.w	r2, r2, #3
 8007296:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a28      	ldr	r2, [pc, #160]	; (8007340 <HAL_I2S_DMAResume+0x120>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d101      	bne.n	80072a6 <HAL_I2S_DMAResume+0x86>
 80072a2:	4b28      	ldr	r3, [pc, #160]	; (8007344 <HAL_I2S_DMAResume+0x124>)
 80072a4:	e001      	b.n	80072aa <HAL_I2S_DMAResume+0x8a>
 80072a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4923      	ldr	r1, [pc, #140]	; (8007340 <HAL_I2S_DMAResume+0x120>)
 80072b2:	428b      	cmp	r3, r1
 80072b4:	d101      	bne.n	80072ba <HAL_I2S_DMAResume+0x9a>
 80072b6:	4b23      	ldr	r3, [pc, #140]	; (8007344 <HAL_I2S_DMAResume+0x124>)
 80072b8:	e001      	b.n	80072be <HAL_I2S_DMAResume+0x9e>
 80072ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072be:	f042 0203 	orr.w	r2, r2, #3
 80072c2:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a1d      	ldr	r2, [pc, #116]	; (8007340 <HAL_I2S_DMAResume+0x120>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d101      	bne.n	80072d2 <HAL_I2S_DMAResume+0xb2>
 80072ce:	4b1d      	ldr	r3, [pc, #116]	; (8007344 <HAL_I2S_DMAResume+0x124>)
 80072d0:	e001      	b.n	80072d6 <HAL_I2S_DMAResume+0xb6>
 80072d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d115      	bne.n	800730c <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a16      	ldr	r2, [pc, #88]	; (8007340 <HAL_I2S_DMAResume+0x120>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d101      	bne.n	80072ee <HAL_I2S_DMAResume+0xce>
 80072ea:	4b16      	ldr	r3, [pc, #88]	; (8007344 <HAL_I2S_DMAResume+0x124>)
 80072ec:	e001      	b.n	80072f2 <HAL_I2S_DMAResume+0xd2>
 80072ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072f2:	69da      	ldr	r2, [r3, #28]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4911      	ldr	r1, [pc, #68]	; (8007340 <HAL_I2S_DMAResume+0x120>)
 80072fa:	428b      	cmp	r3, r1
 80072fc:	d101      	bne.n	8007302 <HAL_I2S_DMAResume+0xe2>
 80072fe:	4b11      	ldr	r3, [pc, #68]	; (8007344 <HAL_I2S_DMAResume+0x124>)
 8007300:	e001      	b.n	8007306 <HAL_I2S_DMAResume+0xe6>
 8007302:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007306:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800730a:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007316:	2b00      	cmp	r3, #0
 8007318:	d107      	bne.n	800732a <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	69da      	ldr	r2, [r3, #28]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007328:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr
 8007340:	40003800 	.word	0x40003800
 8007344:	40003400 	.word	0x40003400

08007348 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b088      	sub	sp, #32
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007350:	2300      	movs	r3, #0
 8007352:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800735c:	d004      	beq.n	8007368 <HAL_I2S_DMAStop+0x20>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	f040 80d1 	bne.w	800750a <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00f      	beq.n	8007390 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007374:	4618      	mov	r0, r3
 8007376:	f7fc fbd1 	bl	8003b1c <HAL_DMA_Abort>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d007      	beq.n	8007390 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007384:	f043 0208 	orr.w	r2, r3, #8
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8007390:	2364      	movs	r3, #100	; 0x64
 8007392:	2201      	movs	r2, #1
 8007394:	2102      	movs	r1, #2
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fb00 	bl	800799c <I2S_WaitFlagStateUntilTimeout>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00b      	beq.n	80073ba <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a6:	f043 0201 	orr.w	r2, r3, #1
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80073ba:	2364      	movs	r3, #100	; 0x64
 80073bc:	2200      	movs	r2, #0
 80073be:	2180      	movs	r1, #128	; 0x80
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 faeb 	bl	800799c <I2S_WaitFlagStateUntilTimeout>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00b      	beq.n	80073e4 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d0:	f043 0201 	orr.w	r2, r3, #1
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	69da      	ldr	r2, [r3, #28]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073f2:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80073f4:	2300      	movs	r3, #0
 80073f6:	617b      	str	r3, [r7, #20]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	617b      	str	r3, [r7, #20]
 8007400:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	685a      	ldr	r2, [r3, #4]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0202 	bic.w	r2, r2, #2
 8007410:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b05      	cmp	r3, #5
 800741c:	f040 8165 	bne.w	80076ea <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00f      	beq.n	8007448 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742c:	4618      	mov	r0, r3
 800742e:	f7fc fb75 	bl	8003b1c <HAL_DMA_Abort>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d007      	beq.n	8007448 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743c:	f043 0208 	orr.w	r2, r3, #8
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a8a      	ldr	r2, [pc, #552]	; (8007678 <HAL_I2S_DMAStop+0x330>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d101      	bne.n	8007456 <HAL_I2S_DMAStop+0x10e>
 8007452:	4b8a      	ldr	r3, [pc, #552]	; (800767c <HAL_I2S_DMAStop+0x334>)
 8007454:	e001      	b.n	800745a <HAL_I2S_DMAStop+0x112>
 8007456:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800745a:	69da      	ldr	r2, [r3, #28]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4985      	ldr	r1, [pc, #532]	; (8007678 <HAL_I2S_DMAStop+0x330>)
 8007462:	428b      	cmp	r3, r1
 8007464:	d101      	bne.n	800746a <HAL_I2S_DMAStop+0x122>
 8007466:	4b85      	ldr	r3, [pc, #532]	; (800767c <HAL_I2S_DMAStop+0x334>)
 8007468:	e001      	b.n	800746e <HAL_I2S_DMAStop+0x126>
 800746a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800746e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007472:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8007474:	2300      	movs	r3, #0
 8007476:	613b      	str	r3, [r7, #16]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a7e      	ldr	r2, [pc, #504]	; (8007678 <HAL_I2S_DMAStop+0x330>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d101      	bne.n	8007486 <HAL_I2S_DMAStop+0x13e>
 8007482:	4b7e      	ldr	r3, [pc, #504]	; (800767c <HAL_I2S_DMAStop+0x334>)
 8007484:	e001      	b.n	800748a <HAL_I2S_DMAStop+0x142>
 8007486:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	613b      	str	r3, [r7, #16]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a79      	ldr	r2, [pc, #484]	; (8007678 <HAL_I2S_DMAStop+0x330>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d101      	bne.n	800749c <HAL_I2S_DMAStop+0x154>
 8007498:	4b78      	ldr	r3, [pc, #480]	; (800767c <HAL_I2S_DMAStop+0x334>)
 800749a:	e001      	b.n	80074a0 <HAL_I2S_DMAStop+0x158>
 800749c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	613b      	str	r3, [r7, #16]
 80074a4:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a73      	ldr	r2, [pc, #460]	; (8007678 <HAL_I2S_DMAStop+0x330>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d101      	bne.n	80074b4 <HAL_I2S_DMAStop+0x16c>
 80074b0:	4b72      	ldr	r3, [pc, #456]	; (800767c <HAL_I2S_DMAStop+0x334>)
 80074b2:	e001      	b.n	80074b8 <HAL_I2S_DMAStop+0x170>
 80074b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074b8:	685a      	ldr	r2, [r3, #4]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	496e      	ldr	r1, [pc, #440]	; (8007678 <HAL_I2S_DMAStop+0x330>)
 80074c0:	428b      	cmp	r3, r1
 80074c2:	d101      	bne.n	80074c8 <HAL_I2S_DMAStop+0x180>
 80074c4:	4b6d      	ldr	r3, [pc, #436]	; (800767c <HAL_I2S_DMAStop+0x334>)
 80074c6:	e001      	b.n	80074cc <HAL_I2S_DMAStop+0x184>
 80074c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074cc:	f022 0201 	bic.w	r2, r2, #1
 80074d0:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10c      	bne.n	80074f4 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80074f2:	e0fa      	b.n	80076ea <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a5f      	ldr	r2, [pc, #380]	; (8007678 <HAL_I2S_DMAStop+0x330>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d101      	bne.n	8007502 <HAL_I2S_DMAStop+0x1ba>
 80074fe:	4b5f      	ldr	r3, [pc, #380]	; (800767c <HAL_I2S_DMAStop+0x334>)
 8007500:	e001      	b.n	8007506 <HAL_I2S_DMAStop+0x1be>
 8007502:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007506:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8007508:	e0ef      	b.n	80076ea <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007512:	d005      	beq.n	8007520 <HAL_I2S_DMAStop+0x1d8>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800751c:	f040 80e5 	bne.w	80076ea <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00f      	beq.n	8007548 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800752c:	4618      	mov	r0, r3
 800752e:	f7fc faf5 	bl	8003b1c <HAL_DMA_Abort>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d007      	beq.n	8007548 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800753c:	f043 0208 	orr.w	r2, r3, #8
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800754e:	b2db      	uxtb	r3, r3
 8007550:	2b05      	cmp	r3, #5
 8007552:	f040 809a 	bne.w	800768a <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00f      	beq.n	800757e <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007562:	4618      	mov	r0, r3
 8007564:	f7fc fada 	bl	8003b1c <HAL_DMA_Abort>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d007      	beq.n	800757e <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007572:	f043 0208 	orr.w	r2, r3, #8
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 800757e:	f7fb fbe9 	bl	8002d54 <HAL_GetTick>
 8007582:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8007584:	e012      	b.n	80075ac <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8007586:	f7fb fbe5 	bl	8002d54 <HAL_GetTick>
 800758a:	4602      	mov	r2, r0
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	2b64      	cmp	r3, #100	; 0x64
 8007592:	d90b      	bls.n	80075ac <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007598:	f043 0201 	orr.w	r2, r3, #1
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a31      	ldr	r2, [pc, #196]	; (8007678 <HAL_I2S_DMAStop+0x330>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d101      	bne.n	80075ba <HAL_I2S_DMAStop+0x272>
 80075b6:	4b31      	ldr	r3, [pc, #196]	; (800767c <HAL_I2S_DMAStop+0x334>)
 80075b8:	e001      	b.n	80075be <HAL_I2S_DMAStop+0x276>
 80075ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d1de      	bne.n	8007586 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80075c8:	e012      	b.n	80075f0 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80075ca:	f7fb fbc3 	bl	8002d54 <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	2b64      	cmp	r3, #100	; 0x64
 80075d6:	d90b      	bls.n	80075f0 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075dc:	f043 0201 	orr.w	r2, r3, #1
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a20      	ldr	r2, [pc, #128]	; (8007678 <HAL_I2S_DMAStop+0x330>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d101      	bne.n	80075fe <HAL_I2S_DMAStop+0x2b6>
 80075fa:	4b20      	ldr	r3, [pc, #128]	; (800767c <HAL_I2S_DMAStop+0x334>)
 80075fc:	e001      	b.n	8007602 <HAL_I2S_DMAStop+0x2ba>
 80075fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007608:	2b80      	cmp	r3, #128	; 0x80
 800760a:	d0de      	beq.n	80075ca <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a19      	ldr	r2, [pc, #100]	; (8007678 <HAL_I2S_DMAStop+0x330>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d101      	bne.n	800761a <HAL_I2S_DMAStop+0x2d2>
 8007616:	4b19      	ldr	r3, [pc, #100]	; (800767c <HAL_I2S_DMAStop+0x334>)
 8007618:	e001      	b.n	800761e <HAL_I2S_DMAStop+0x2d6>
 800761a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800761e:	69da      	ldr	r2, [r3, #28]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4914      	ldr	r1, [pc, #80]	; (8007678 <HAL_I2S_DMAStop+0x330>)
 8007626:	428b      	cmp	r3, r1
 8007628:	d101      	bne.n	800762e <HAL_I2S_DMAStop+0x2e6>
 800762a:	4b14      	ldr	r3, [pc, #80]	; (800767c <HAL_I2S_DMAStop+0x334>)
 800762c:	e001      	b.n	8007632 <HAL_I2S_DMAStop+0x2ea>
 800762e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007636:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8007638:	2300      	movs	r3, #0
 800763a:	60fb      	str	r3, [r7, #12]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a0d      	ldr	r2, [pc, #52]	; (8007678 <HAL_I2S_DMAStop+0x330>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d101      	bne.n	800764a <HAL_I2S_DMAStop+0x302>
 8007646:	4b0d      	ldr	r3, [pc, #52]	; (800767c <HAL_I2S_DMAStop+0x334>)
 8007648:	e001      	b.n	800764e <HAL_I2S_DMAStop+0x306>
 800764a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	60fb      	str	r3, [r7, #12]
 8007652:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a07      	ldr	r2, [pc, #28]	; (8007678 <HAL_I2S_DMAStop+0x330>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d101      	bne.n	8007662 <HAL_I2S_DMAStop+0x31a>
 800765e:	4b07      	ldr	r3, [pc, #28]	; (800767c <HAL_I2S_DMAStop+0x334>)
 8007660:	e001      	b.n	8007666 <HAL_I2S_DMAStop+0x31e>
 8007662:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4902      	ldr	r1, [pc, #8]	; (8007678 <HAL_I2S_DMAStop+0x330>)
 800766e:	428b      	cmp	r3, r1
 8007670:	d106      	bne.n	8007680 <HAL_I2S_DMAStop+0x338>
 8007672:	4b02      	ldr	r3, [pc, #8]	; (800767c <HAL_I2S_DMAStop+0x334>)
 8007674:	e006      	b.n	8007684 <HAL_I2S_DMAStop+0x33c>
 8007676:	bf00      	nop
 8007678:	40003800 	.word	0x40003800
 800767c:	40003400 	.word	0x40003400
 8007680:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007684:	f022 0202 	bic.w	r2, r2, #2
 8007688:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	69da      	ldr	r2, [r3, #28]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007698:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800769a:	2300      	movs	r3, #0
 800769c:	60bb      	str	r3, [r7, #8]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	60bb      	str	r3, [r7, #8]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	60bb      	str	r3, [r7, #8]
 80076ae:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f022 0201 	bic.w	r2, r2, #1
 80076be:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076c8:	d10c      	bne.n	80076e4 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	77fb      	strb	r3, [r7, #31]
 80076e2:	e002      	b.n	80076ea <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 80076f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3720      	adds	r7, #32
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007730:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	69db      	ldr	r3, [r3, #28]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10e      	bne.n	8007758 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f022 0202 	bic.w	r2, r2, #2
 8007748:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f7f9 fe69 	bl	8001430 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800775e:	bf00      	nop
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b084      	sub	sp, #16
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007772:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f7f9 fe6d 	bl	8001454 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800777a:	bf00      	nop
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f022 0203 	bic.w	r2, r2, #3
 800779e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b8:	f043 0208 	orr.w	r2, r3, #8
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f7ff ffa5 	bl	8007710 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80077c6:	bf00      	nop
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b082      	sub	sp, #8
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077da:	881a      	ldrh	r2, [r3, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e6:	1c9a      	adds	r2, r3, #2
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	3b01      	subs	r3, #1
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077fe:	b29b      	uxth	r3, r3
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10e      	bne.n	8007822 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	685a      	ldr	r2, [r3, #4]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007812:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f7f9 fe07 	bl	8001430 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007822:	bf00      	nop
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b082      	sub	sp, #8
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68da      	ldr	r2, [r3, #12]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783c:	b292      	uxth	r2, r2
 800783e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007844:	1c9a      	adds	r2, r3, #2
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800784e:	b29b      	uxth	r3, r3
 8007850:	3b01      	subs	r3, #1
 8007852:	b29a      	uxth	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800785c:	b29b      	uxth	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10e      	bne.n	8007880 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007870:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7ff ff3e 	bl	80076fc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007880:	bf00      	nop
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b04      	cmp	r3, #4
 80078a2:	d13a      	bne.n	800791a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d109      	bne.n	80078c2 <I2S_IRQHandler+0x3a>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b8:	2b40      	cmp	r3, #64	; 0x40
 80078ba:	d102      	bne.n	80078c2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7ff ffb4 	bl	800782a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c8:	2b40      	cmp	r3, #64	; 0x40
 80078ca:	d126      	bne.n	800791a <I2S_IRQHandler+0x92>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f003 0320 	and.w	r3, r3, #32
 80078d6:	2b20      	cmp	r3, #32
 80078d8:	d11f      	bne.n	800791a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80078e8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80078ea:	2300      	movs	r3, #0
 80078ec:	613b      	str	r3, [r7, #16]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	613b      	str	r3, [r7, #16]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	613b      	str	r3, [r7, #16]
 80078fe:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800790c:	f043 0202 	orr.w	r2, r3, #2
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7ff fefb 	bl	8007710 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b03      	cmp	r3, #3
 8007924:	d136      	bne.n	8007994 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f003 0302 	and.w	r3, r3, #2
 800792c:	2b02      	cmp	r3, #2
 800792e:	d109      	bne.n	8007944 <I2S_IRQHandler+0xbc>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800793a:	2b80      	cmp	r3, #128	; 0x80
 800793c:	d102      	bne.n	8007944 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7ff ff45 	bl	80077ce <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	f003 0308 	and.w	r3, r3, #8
 800794a:	2b08      	cmp	r3, #8
 800794c:	d122      	bne.n	8007994 <I2S_IRQHandler+0x10c>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	f003 0320 	and.w	r3, r3, #32
 8007958:	2b20      	cmp	r3, #32
 800795a:	d11b      	bne.n	8007994 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800796a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800796c:	2300      	movs	r3, #0
 800796e:	60fb      	str	r3, [r7, #12]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	60fb      	str	r3, [r7, #12]
 8007978:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007986:	f043 0204 	orr.w	r2, r3, #4
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7ff febe 	bl	8007710 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007994:	bf00      	nop
 8007996:	3718      	adds	r7, #24
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	603b      	str	r3, [r7, #0]
 80079a8:	4613      	mov	r3, r2
 80079aa:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80079ac:	f7fb f9d2 	bl	8002d54 <HAL_GetTick>
 80079b0:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80079b2:	e018      	b.n	80079e6 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ba:	d014      	beq.n	80079e6 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80079bc:	f7fb f9ca 	bl	8002d54 <HAL_GetTick>
 80079c0:	4602      	mov	r2, r0
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d902      	bls.n	80079d2 <I2S_WaitFlagStateUntilTimeout+0x36>
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d109      	bne.n	80079e6 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e00f      	b.n	8007a06 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689a      	ldr	r2, [r3, #8]
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	4013      	ands	r3, r2
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	bf0c      	ite	eq
 80079f6:	2301      	moveq	r3, #1
 80079f8:	2300      	movne	r3, #0
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	461a      	mov	r2, r3
 80079fe:	79fb      	ldrb	r3, [r7, #7]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d1d7      	bne.n	80079b4 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3718      	adds	r7, #24
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
	...

08007a10 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b088      	sub	sp, #32
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4aa2      	ldr	r2, [pc, #648]	; (8007cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d101      	bne.n	8007a2e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007a2a:	4ba2      	ldr	r3, [pc, #648]	; (8007cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007a2c:	e001      	b.n	8007a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8007a2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a9b      	ldr	r2, [pc, #620]	; (8007cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d101      	bne.n	8007a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007a48:	4b9a      	ldr	r3, [pc, #616]	; (8007cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007a4a:	e001      	b.n	8007a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007a4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a5c:	d004      	beq.n	8007a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f040 8099 	bne.w	8007b9a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	f003 0302 	and.w	r3, r3, #2
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d107      	bne.n	8007a82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d002      	beq.n	8007a82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f925 	bl	8007ccc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d107      	bne.n	8007a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d002      	beq.n	8007a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f9c8 	bl	8007e2c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa2:	2b40      	cmp	r3, #64	; 0x40
 8007aa4:	d13a      	bne.n	8007b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	f003 0320 	and.w	r3, r3, #32
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d035      	beq.n	8007b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a7e      	ldr	r2, [pc, #504]	; (8007cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d101      	bne.n	8007abe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8007aba:	4b7e      	ldr	r3, [pc, #504]	; (8007cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007abc:	e001      	b.n	8007ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8007abe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4979      	ldr	r1, [pc, #484]	; (8007cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007aca:	428b      	cmp	r3, r1
 8007acc:	d101      	bne.n	8007ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8007ace:	4b79      	ldr	r3, [pc, #484]	; (8007cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007ad0:	e001      	b.n	8007ad6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8007ad2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007ad6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007ada:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007aea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007aec:	2300      	movs	r3, #0
 8007aee:	60fb      	str	r3, [r7, #12]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	60fb      	str	r3, [r7, #12]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	60fb      	str	r3, [r7, #12]
 8007b00:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b0e:	f043 0202 	orr.w	r2, r3, #2
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7ff fdfa 	bl	8007710 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	f003 0308 	and.w	r3, r3, #8
 8007b22:	2b08      	cmp	r3, #8
 8007b24:	f040 80be 	bne.w	8007ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	f003 0320 	and.w	r3, r3, #32
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 80b8 	beq.w	8007ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	685a      	ldr	r2, [r3, #4]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007b42:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a59      	ldr	r2, [pc, #356]	; (8007cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d101      	bne.n	8007b52 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8007b4e:	4b59      	ldr	r3, [pc, #356]	; (8007cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007b50:	e001      	b.n	8007b56 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8007b52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4954      	ldr	r1, [pc, #336]	; (8007cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007b5e:	428b      	cmp	r3, r1
 8007b60:	d101      	bne.n	8007b66 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007b62:	4b54      	ldr	r3, [pc, #336]	; (8007cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007b64:	e001      	b.n	8007b6a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007b66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007b6e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007b70:	2300      	movs	r3, #0
 8007b72:	60bb      	str	r3, [r7, #8]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	60bb      	str	r3, [r7, #8]
 8007b7c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b8a:	f043 0204 	orr.w	r2, r3, #4
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7ff fdbc 	bl	8007710 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007b98:	e084      	b.n	8007ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	f003 0302 	and.w	r3, r3, #2
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d107      	bne.n	8007bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d002      	beq.n	8007bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f8be 	bl	8007d30 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d107      	bne.n	8007bce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d002      	beq.n	8007bce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f8fd 	bl	8007dc8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd4:	2b40      	cmp	r3, #64	; 0x40
 8007bd6:	d12f      	bne.n	8007c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	f003 0320 	and.w	r3, r3, #32
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d02a      	beq.n	8007c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007bf0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a2e      	ldr	r2, [pc, #184]	; (8007cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d101      	bne.n	8007c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007bfc:	4b2d      	ldr	r3, [pc, #180]	; (8007cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007bfe:	e001      	b.n	8007c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007c00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c04:	685a      	ldr	r2, [r3, #4]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4929      	ldr	r1, [pc, #164]	; (8007cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007c0c:	428b      	cmp	r3, r1
 8007c0e:	d101      	bne.n	8007c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007c10:	4b28      	ldr	r3, [pc, #160]	; (8007cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007c12:	e001      	b.n	8007c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007c14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007c1c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c2a:	f043 0202 	orr.w	r2, r3, #2
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f7ff fd6c 	bl	8007710 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	f003 0308 	and.w	r3, r3, #8
 8007c3e:	2b08      	cmp	r3, #8
 8007c40:	d131      	bne.n	8007ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f003 0320 	and.w	r3, r3, #32
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d02c      	beq.n	8007ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a17      	ldr	r2, [pc, #92]	; (8007cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d101      	bne.n	8007c5a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007c56:	4b17      	ldr	r3, [pc, #92]	; (8007cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007c58:	e001      	b.n	8007c5e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007c5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4912      	ldr	r1, [pc, #72]	; (8007cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007c66:	428b      	cmp	r3, r1
 8007c68:	d101      	bne.n	8007c6e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8007c6a:	4b12      	ldr	r3, [pc, #72]	; (8007cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007c6c:	e001      	b.n	8007c72 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8007c6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007c76:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	685a      	ldr	r2, [r3, #4]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007c86:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c94:	f043 0204 	orr.w	r2, r3, #4
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f7ff fd37 	bl	8007710 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007ca2:	e000      	b.n	8007ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007ca4:	bf00      	nop
}
 8007ca6:	bf00      	nop
 8007ca8:	3720      	adds	r7, #32
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	40003800 	.word	0x40003800
 8007cb4:	40003400 	.word	0x40003400

08007cb8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd8:	1c99      	adds	r1, r3, #2
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	6251      	str	r1, [r2, #36]	; 0x24
 8007cde:	881a      	ldrh	r2, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	3b01      	subs	r3, #1
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d113      	bne.n	8007d26 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007d0c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d106      	bne.n	8007d26 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7ff ffc9 	bl	8007cb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007d26:	bf00      	nop
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
	...

08007d30 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3c:	1c99      	adds	r1, r3, #2
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	6251      	str	r1, [r2, #36]	; 0x24
 8007d42:	8819      	ldrh	r1, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a1d      	ldr	r2, [pc, #116]	; (8007dc0 <I2SEx_TxISR_I2SExt+0x90>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d101      	bne.n	8007d52 <I2SEx_TxISR_I2SExt+0x22>
 8007d4e:	4b1d      	ldr	r3, [pc, #116]	; (8007dc4 <I2SEx_TxISR_I2SExt+0x94>)
 8007d50:	e001      	b.n	8007d56 <I2SEx_TxISR_I2SExt+0x26>
 8007d52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007d56:	460a      	mov	r2, r1
 8007d58:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	3b01      	subs	r3, #1
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d121      	bne.n	8007db6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a12      	ldr	r2, [pc, #72]	; (8007dc0 <I2SEx_TxISR_I2SExt+0x90>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d101      	bne.n	8007d80 <I2SEx_TxISR_I2SExt+0x50>
 8007d7c:	4b11      	ldr	r3, [pc, #68]	; (8007dc4 <I2SEx_TxISR_I2SExt+0x94>)
 8007d7e:	e001      	b.n	8007d84 <I2SEx_TxISR_I2SExt+0x54>
 8007d80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007d84:	685a      	ldr	r2, [r3, #4]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	490d      	ldr	r1, [pc, #52]	; (8007dc0 <I2SEx_TxISR_I2SExt+0x90>)
 8007d8c:	428b      	cmp	r3, r1
 8007d8e:	d101      	bne.n	8007d94 <I2SEx_TxISR_I2SExt+0x64>
 8007d90:	4b0c      	ldr	r3, [pc, #48]	; (8007dc4 <I2SEx_TxISR_I2SExt+0x94>)
 8007d92:	e001      	b.n	8007d98 <I2SEx_TxISR_I2SExt+0x68>
 8007d94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007d98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007d9c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d106      	bne.n	8007db6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f7ff ff81 	bl	8007cb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007db6:	bf00      	nop
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	40003800 	.word	0x40003800
 8007dc4:	40003400 	.word	0x40003400

08007dc8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68d8      	ldr	r0, [r3, #12]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dda:	1c99      	adds	r1, r3, #2
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007de0:	b282      	uxth	r2, r0
 8007de2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	3b01      	subs	r3, #1
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d113      	bne.n	8007e24 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007e0a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d106      	bne.n	8007e24 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f7ff ff4a 	bl	8007cb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007e24:	bf00      	nop
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a20      	ldr	r2, [pc, #128]	; (8007ebc <I2SEx_RxISR_I2SExt+0x90>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d101      	bne.n	8007e42 <I2SEx_RxISR_I2SExt+0x16>
 8007e3e:	4b20      	ldr	r3, [pc, #128]	; (8007ec0 <I2SEx_RxISR_I2SExt+0x94>)
 8007e40:	e001      	b.n	8007e46 <I2SEx_RxISR_I2SExt+0x1a>
 8007e42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007e46:	68d8      	ldr	r0, [r3, #12]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4c:	1c99      	adds	r1, r3, #2
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007e52:	b282      	uxth	r2, r0
 8007e54:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d121      	bne.n	8007eb2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a12      	ldr	r2, [pc, #72]	; (8007ebc <I2SEx_RxISR_I2SExt+0x90>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d101      	bne.n	8007e7c <I2SEx_RxISR_I2SExt+0x50>
 8007e78:	4b11      	ldr	r3, [pc, #68]	; (8007ec0 <I2SEx_RxISR_I2SExt+0x94>)
 8007e7a:	e001      	b.n	8007e80 <I2SEx_RxISR_I2SExt+0x54>
 8007e7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007e80:	685a      	ldr	r2, [r3, #4]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	490d      	ldr	r1, [pc, #52]	; (8007ebc <I2SEx_RxISR_I2SExt+0x90>)
 8007e88:	428b      	cmp	r3, r1
 8007e8a:	d101      	bne.n	8007e90 <I2SEx_RxISR_I2SExt+0x64>
 8007e8c:	4b0c      	ldr	r3, [pc, #48]	; (8007ec0 <I2SEx_RxISR_I2SExt+0x94>)
 8007e8e:	e001      	b.n	8007e94 <I2SEx_RxISR_I2SExt+0x68>
 8007e90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007e94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007e98:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d106      	bne.n	8007eb2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7ff ff03 	bl	8007cb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007eb2:	bf00      	nop
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	40003800 	.word	0x40003800
 8007ec0:	40003400 	.word	0x40003400

08007ec4 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8007ec8:	4b06      	ldr	r3, [pc, #24]	; (8007ee4 <HAL_PWR_PVD_IRQHandler+0x20>)
 8007eca:	695b      	ldr	r3, [r3, #20]
 8007ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8007ed4:	f000 f808 	bl	8007ee8 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8007ed8:	4b02      	ldr	r3, [pc, #8]	; (8007ee4 <HAL_PWR_PVD_IRQHandler+0x20>)
 8007eda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007ede:	615a      	str	r2, [r3, #20]
  }
}
 8007ee0:	bf00      	nop
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	40013c00 	.word	0x40013c00

08007ee8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8007eec:	bf00      	nop
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
	...

08007ef8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d101      	bne.n	8007f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e25b      	b.n	80083c2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d075      	beq.n	8008002 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f16:	4ba3      	ldr	r3, [pc, #652]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f003 030c 	and.w	r3, r3, #12
 8007f1e:	2b04      	cmp	r3, #4
 8007f20:	d00c      	beq.n	8007f3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f22:	4ba0      	ldr	r3, [pc, #640]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f2a:	2b08      	cmp	r3, #8
 8007f2c:	d112      	bne.n	8007f54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f2e:	4b9d      	ldr	r3, [pc, #628]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f3a:	d10b      	bne.n	8007f54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f3c:	4b99      	ldr	r3, [pc, #612]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d05b      	beq.n	8008000 <HAL_RCC_OscConfig+0x108>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d157      	bne.n	8008000 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e236      	b.n	80083c2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f5c:	d106      	bne.n	8007f6c <HAL_RCC_OscConfig+0x74>
 8007f5e:	4b91      	ldr	r3, [pc, #580]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a90      	ldr	r2, [pc, #576]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 8007f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f68:	6013      	str	r3, [r2, #0]
 8007f6a:	e01d      	b.n	8007fa8 <HAL_RCC_OscConfig+0xb0>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f74:	d10c      	bne.n	8007f90 <HAL_RCC_OscConfig+0x98>
 8007f76:	4b8b      	ldr	r3, [pc, #556]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a8a      	ldr	r2, [pc, #552]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 8007f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f80:	6013      	str	r3, [r2, #0]
 8007f82:	4b88      	ldr	r3, [pc, #544]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a87      	ldr	r2, [pc, #540]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 8007f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f8c:	6013      	str	r3, [r2, #0]
 8007f8e:	e00b      	b.n	8007fa8 <HAL_RCC_OscConfig+0xb0>
 8007f90:	4b84      	ldr	r3, [pc, #528]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a83      	ldr	r2, [pc, #524]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 8007f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f9a:	6013      	str	r3, [r2, #0]
 8007f9c:	4b81      	ldr	r3, [pc, #516]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a80      	ldr	r2, [pc, #512]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 8007fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d013      	beq.n	8007fd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fb0:	f7fa fed0 	bl	8002d54 <HAL_GetTick>
 8007fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fb6:	e008      	b.n	8007fca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007fb8:	f7fa fecc 	bl	8002d54 <HAL_GetTick>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	2b64      	cmp	r3, #100	; 0x64
 8007fc4:	d901      	bls.n	8007fca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e1fb      	b.n	80083c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fca:	4b76      	ldr	r3, [pc, #472]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0f0      	beq.n	8007fb8 <HAL_RCC_OscConfig+0xc0>
 8007fd6:	e014      	b.n	8008002 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fd8:	f7fa febc 	bl	8002d54 <HAL_GetTick>
 8007fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fde:	e008      	b.n	8007ff2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007fe0:	f7fa feb8 	bl	8002d54 <HAL_GetTick>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	2b64      	cmp	r3, #100	; 0x64
 8007fec:	d901      	bls.n	8007ff2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	e1e7      	b.n	80083c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ff2:	4b6c      	ldr	r3, [pc, #432]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1f0      	bne.n	8007fe0 <HAL_RCC_OscConfig+0xe8>
 8007ffe:	e000      	b.n	8008002 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0302 	and.w	r3, r3, #2
 800800a:	2b00      	cmp	r3, #0
 800800c:	d063      	beq.n	80080d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800800e:	4b65      	ldr	r3, [pc, #404]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f003 030c 	and.w	r3, r3, #12
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00b      	beq.n	8008032 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800801a:	4b62      	ldr	r3, [pc, #392]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008022:	2b08      	cmp	r3, #8
 8008024:	d11c      	bne.n	8008060 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008026:	4b5f      	ldr	r3, [pc, #380]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d116      	bne.n	8008060 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008032:	4b5c      	ldr	r3, [pc, #368]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0302 	and.w	r3, r3, #2
 800803a:	2b00      	cmp	r3, #0
 800803c:	d005      	beq.n	800804a <HAL_RCC_OscConfig+0x152>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d001      	beq.n	800804a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e1bb      	b.n	80083c2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800804a:	4b56      	ldr	r3, [pc, #344]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	00db      	lsls	r3, r3, #3
 8008058:	4952      	ldr	r1, [pc, #328]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 800805a:	4313      	orrs	r3, r2
 800805c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800805e:	e03a      	b.n	80080d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d020      	beq.n	80080aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008068:	4b4f      	ldr	r3, [pc, #316]	; (80081a8 <HAL_RCC_OscConfig+0x2b0>)
 800806a:	2201      	movs	r2, #1
 800806c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800806e:	f7fa fe71 	bl	8002d54 <HAL_GetTick>
 8008072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008074:	e008      	b.n	8008088 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008076:	f7fa fe6d 	bl	8002d54 <HAL_GetTick>
 800807a:	4602      	mov	r2, r0
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	2b02      	cmp	r3, #2
 8008082:	d901      	bls.n	8008088 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	e19c      	b.n	80083c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008088:	4b46      	ldr	r3, [pc, #280]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b00      	cmp	r3, #0
 8008092:	d0f0      	beq.n	8008076 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008094:	4b43      	ldr	r3, [pc, #268]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	00db      	lsls	r3, r3, #3
 80080a2:	4940      	ldr	r1, [pc, #256]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 80080a4:	4313      	orrs	r3, r2
 80080a6:	600b      	str	r3, [r1, #0]
 80080a8:	e015      	b.n	80080d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080aa:	4b3f      	ldr	r3, [pc, #252]	; (80081a8 <HAL_RCC_OscConfig+0x2b0>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b0:	f7fa fe50 	bl	8002d54 <HAL_GetTick>
 80080b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080b6:	e008      	b.n	80080ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080b8:	f7fa fe4c 	bl	8002d54 <HAL_GetTick>
 80080bc:	4602      	mov	r2, r0
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d901      	bls.n	80080ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80080c6:	2303      	movs	r3, #3
 80080c8:	e17b      	b.n	80083c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080ca:	4b36      	ldr	r3, [pc, #216]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0302 	and.w	r3, r3, #2
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1f0      	bne.n	80080b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 0308 	and.w	r3, r3, #8
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d030      	beq.n	8008144 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d016      	beq.n	8008118 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080ea:	4b30      	ldr	r3, [pc, #192]	; (80081ac <HAL_RCC_OscConfig+0x2b4>)
 80080ec:	2201      	movs	r2, #1
 80080ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080f0:	f7fa fe30 	bl	8002d54 <HAL_GetTick>
 80080f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080f6:	e008      	b.n	800810a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080f8:	f7fa fe2c 	bl	8002d54 <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	2b02      	cmp	r3, #2
 8008104:	d901      	bls.n	800810a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e15b      	b.n	80083c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800810a:	4b26      	ldr	r3, [pc, #152]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 800810c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800810e:	f003 0302 	and.w	r3, r3, #2
 8008112:	2b00      	cmp	r3, #0
 8008114:	d0f0      	beq.n	80080f8 <HAL_RCC_OscConfig+0x200>
 8008116:	e015      	b.n	8008144 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008118:	4b24      	ldr	r3, [pc, #144]	; (80081ac <HAL_RCC_OscConfig+0x2b4>)
 800811a:	2200      	movs	r2, #0
 800811c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800811e:	f7fa fe19 	bl	8002d54 <HAL_GetTick>
 8008122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008124:	e008      	b.n	8008138 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008126:	f7fa fe15 	bl	8002d54 <HAL_GetTick>
 800812a:	4602      	mov	r2, r0
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	2b02      	cmp	r3, #2
 8008132:	d901      	bls.n	8008138 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008134:	2303      	movs	r3, #3
 8008136:	e144      	b.n	80083c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008138:	4b1a      	ldr	r3, [pc, #104]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 800813a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800813c:	f003 0302 	and.w	r3, r3, #2
 8008140:	2b00      	cmp	r3, #0
 8008142:	d1f0      	bne.n	8008126 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 0304 	and.w	r3, r3, #4
 800814c:	2b00      	cmp	r3, #0
 800814e:	f000 80a0 	beq.w	8008292 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008152:	2300      	movs	r3, #0
 8008154:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008156:	4b13      	ldr	r3, [pc, #76]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 8008158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10f      	bne.n	8008182 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008162:	2300      	movs	r3, #0
 8008164:	60bb      	str	r3, [r7, #8]
 8008166:	4b0f      	ldr	r3, [pc, #60]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 8008168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816a:	4a0e      	ldr	r2, [pc, #56]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 800816c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008170:	6413      	str	r3, [r2, #64]	; 0x40
 8008172:	4b0c      	ldr	r3, [pc, #48]	; (80081a4 <HAL_RCC_OscConfig+0x2ac>)
 8008174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800817a:	60bb      	str	r3, [r7, #8]
 800817c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800817e:	2301      	movs	r3, #1
 8008180:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008182:	4b0b      	ldr	r3, [pc, #44]	; (80081b0 <HAL_RCC_OscConfig+0x2b8>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800818a:	2b00      	cmp	r3, #0
 800818c:	d121      	bne.n	80081d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800818e:	4b08      	ldr	r3, [pc, #32]	; (80081b0 <HAL_RCC_OscConfig+0x2b8>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a07      	ldr	r2, [pc, #28]	; (80081b0 <HAL_RCC_OscConfig+0x2b8>)
 8008194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800819a:	f7fa fddb 	bl	8002d54 <HAL_GetTick>
 800819e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081a0:	e011      	b.n	80081c6 <HAL_RCC_OscConfig+0x2ce>
 80081a2:	bf00      	nop
 80081a4:	40023800 	.word	0x40023800
 80081a8:	42470000 	.word	0x42470000
 80081ac:	42470e80 	.word	0x42470e80
 80081b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081b4:	f7fa fdce 	bl	8002d54 <HAL_GetTick>
 80081b8:	4602      	mov	r2, r0
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d901      	bls.n	80081c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e0fd      	b.n	80083c2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081c6:	4b81      	ldr	r3, [pc, #516]	; (80083cc <HAL_RCC_OscConfig+0x4d4>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d0f0      	beq.n	80081b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d106      	bne.n	80081e8 <HAL_RCC_OscConfig+0x2f0>
 80081da:	4b7d      	ldr	r3, [pc, #500]	; (80083d0 <HAL_RCC_OscConfig+0x4d8>)
 80081dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081de:	4a7c      	ldr	r2, [pc, #496]	; (80083d0 <HAL_RCC_OscConfig+0x4d8>)
 80081e0:	f043 0301 	orr.w	r3, r3, #1
 80081e4:	6713      	str	r3, [r2, #112]	; 0x70
 80081e6:	e01c      	b.n	8008222 <HAL_RCC_OscConfig+0x32a>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	2b05      	cmp	r3, #5
 80081ee:	d10c      	bne.n	800820a <HAL_RCC_OscConfig+0x312>
 80081f0:	4b77      	ldr	r3, [pc, #476]	; (80083d0 <HAL_RCC_OscConfig+0x4d8>)
 80081f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f4:	4a76      	ldr	r2, [pc, #472]	; (80083d0 <HAL_RCC_OscConfig+0x4d8>)
 80081f6:	f043 0304 	orr.w	r3, r3, #4
 80081fa:	6713      	str	r3, [r2, #112]	; 0x70
 80081fc:	4b74      	ldr	r3, [pc, #464]	; (80083d0 <HAL_RCC_OscConfig+0x4d8>)
 80081fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008200:	4a73      	ldr	r2, [pc, #460]	; (80083d0 <HAL_RCC_OscConfig+0x4d8>)
 8008202:	f043 0301 	orr.w	r3, r3, #1
 8008206:	6713      	str	r3, [r2, #112]	; 0x70
 8008208:	e00b      	b.n	8008222 <HAL_RCC_OscConfig+0x32a>
 800820a:	4b71      	ldr	r3, [pc, #452]	; (80083d0 <HAL_RCC_OscConfig+0x4d8>)
 800820c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800820e:	4a70      	ldr	r2, [pc, #448]	; (80083d0 <HAL_RCC_OscConfig+0x4d8>)
 8008210:	f023 0301 	bic.w	r3, r3, #1
 8008214:	6713      	str	r3, [r2, #112]	; 0x70
 8008216:	4b6e      	ldr	r3, [pc, #440]	; (80083d0 <HAL_RCC_OscConfig+0x4d8>)
 8008218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800821a:	4a6d      	ldr	r2, [pc, #436]	; (80083d0 <HAL_RCC_OscConfig+0x4d8>)
 800821c:	f023 0304 	bic.w	r3, r3, #4
 8008220:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d015      	beq.n	8008256 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800822a:	f7fa fd93 	bl	8002d54 <HAL_GetTick>
 800822e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008230:	e00a      	b.n	8008248 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008232:	f7fa fd8f 	bl	8002d54 <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008240:	4293      	cmp	r3, r2
 8008242:	d901      	bls.n	8008248 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008244:	2303      	movs	r3, #3
 8008246:	e0bc      	b.n	80083c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008248:	4b61      	ldr	r3, [pc, #388]	; (80083d0 <HAL_RCC_OscConfig+0x4d8>)
 800824a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824c:	f003 0302 	and.w	r3, r3, #2
 8008250:	2b00      	cmp	r3, #0
 8008252:	d0ee      	beq.n	8008232 <HAL_RCC_OscConfig+0x33a>
 8008254:	e014      	b.n	8008280 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008256:	f7fa fd7d 	bl	8002d54 <HAL_GetTick>
 800825a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800825c:	e00a      	b.n	8008274 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800825e:	f7fa fd79 	bl	8002d54 <HAL_GetTick>
 8008262:	4602      	mov	r2, r0
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	f241 3288 	movw	r2, #5000	; 0x1388
 800826c:	4293      	cmp	r3, r2
 800826e:	d901      	bls.n	8008274 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008270:	2303      	movs	r3, #3
 8008272:	e0a6      	b.n	80083c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008274:	4b56      	ldr	r3, [pc, #344]	; (80083d0 <HAL_RCC_OscConfig+0x4d8>)
 8008276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008278:	f003 0302 	and.w	r3, r3, #2
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1ee      	bne.n	800825e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008280:	7dfb      	ldrb	r3, [r7, #23]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d105      	bne.n	8008292 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008286:	4b52      	ldr	r3, [pc, #328]	; (80083d0 <HAL_RCC_OscConfig+0x4d8>)
 8008288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828a:	4a51      	ldr	r2, [pc, #324]	; (80083d0 <HAL_RCC_OscConfig+0x4d8>)
 800828c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008290:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	2b00      	cmp	r3, #0
 8008298:	f000 8092 	beq.w	80083c0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800829c:	4b4c      	ldr	r3, [pc, #304]	; (80083d0 <HAL_RCC_OscConfig+0x4d8>)
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	f003 030c 	and.w	r3, r3, #12
 80082a4:	2b08      	cmp	r3, #8
 80082a6:	d05c      	beq.n	8008362 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d141      	bne.n	8008334 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082b0:	4b48      	ldr	r3, [pc, #288]	; (80083d4 <HAL_RCC_OscConfig+0x4dc>)
 80082b2:	2200      	movs	r2, #0
 80082b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082b6:	f7fa fd4d 	bl	8002d54 <HAL_GetTick>
 80082ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082bc:	e008      	b.n	80082d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082be:	f7fa fd49 	bl	8002d54 <HAL_GetTick>
 80082c2:	4602      	mov	r2, r0
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d901      	bls.n	80082d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e078      	b.n	80083c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082d0:	4b3f      	ldr	r3, [pc, #252]	; (80083d0 <HAL_RCC_OscConfig+0x4d8>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1f0      	bne.n	80082be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	69da      	ldr	r2, [r3, #28]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a1b      	ldr	r3, [r3, #32]
 80082e4:	431a      	orrs	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ea:	019b      	lsls	r3, r3, #6
 80082ec:	431a      	orrs	r2, r3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f2:	085b      	lsrs	r3, r3, #1
 80082f4:	3b01      	subs	r3, #1
 80082f6:	041b      	lsls	r3, r3, #16
 80082f8:	431a      	orrs	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fe:	061b      	lsls	r3, r3, #24
 8008300:	4933      	ldr	r1, [pc, #204]	; (80083d0 <HAL_RCC_OscConfig+0x4d8>)
 8008302:	4313      	orrs	r3, r2
 8008304:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008306:	4b33      	ldr	r3, [pc, #204]	; (80083d4 <HAL_RCC_OscConfig+0x4dc>)
 8008308:	2201      	movs	r2, #1
 800830a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800830c:	f7fa fd22 	bl	8002d54 <HAL_GetTick>
 8008310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008312:	e008      	b.n	8008326 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008314:	f7fa fd1e 	bl	8002d54 <HAL_GetTick>
 8008318:	4602      	mov	r2, r0
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	2b02      	cmp	r3, #2
 8008320:	d901      	bls.n	8008326 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e04d      	b.n	80083c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008326:	4b2a      	ldr	r3, [pc, #168]	; (80083d0 <HAL_RCC_OscConfig+0x4d8>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d0f0      	beq.n	8008314 <HAL_RCC_OscConfig+0x41c>
 8008332:	e045      	b.n	80083c0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008334:	4b27      	ldr	r3, [pc, #156]	; (80083d4 <HAL_RCC_OscConfig+0x4dc>)
 8008336:	2200      	movs	r2, #0
 8008338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800833a:	f7fa fd0b 	bl	8002d54 <HAL_GetTick>
 800833e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008340:	e008      	b.n	8008354 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008342:	f7fa fd07 	bl	8002d54 <HAL_GetTick>
 8008346:	4602      	mov	r2, r0
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	2b02      	cmp	r3, #2
 800834e:	d901      	bls.n	8008354 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	e036      	b.n	80083c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008354:	4b1e      	ldr	r3, [pc, #120]	; (80083d0 <HAL_RCC_OscConfig+0x4d8>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1f0      	bne.n	8008342 <HAL_RCC_OscConfig+0x44a>
 8008360:	e02e      	b.n	80083c0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d101      	bne.n	800836e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e029      	b.n	80083c2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800836e:	4b18      	ldr	r3, [pc, #96]	; (80083d0 <HAL_RCC_OscConfig+0x4d8>)
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	69db      	ldr	r3, [r3, #28]
 800837e:	429a      	cmp	r2, r3
 8008380:	d11c      	bne.n	80083bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800838c:	429a      	cmp	r2, r3
 800838e:	d115      	bne.n	80083bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008396:	4013      	ands	r3, r2
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800839c:	4293      	cmp	r3, r2
 800839e:	d10d      	bne.n	80083bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d106      	bne.n	80083bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d001      	beq.n	80083c0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	e000      	b.n	80083c2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3718      	adds	r7, #24
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	40007000 	.word	0x40007000
 80083d0:	40023800 	.word	0x40023800
 80083d4:	42470060 	.word	0x42470060

080083d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d101      	bne.n	80083ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e0cc      	b.n	8008586 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80083ec:	4b68      	ldr	r3, [pc, #416]	; (8008590 <HAL_RCC_ClockConfig+0x1b8>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 030f 	and.w	r3, r3, #15
 80083f4:	683a      	ldr	r2, [r7, #0]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d90c      	bls.n	8008414 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083fa:	4b65      	ldr	r3, [pc, #404]	; (8008590 <HAL_RCC_ClockConfig+0x1b8>)
 80083fc:	683a      	ldr	r2, [r7, #0]
 80083fe:	b2d2      	uxtb	r2, r2
 8008400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008402:	4b63      	ldr	r3, [pc, #396]	; (8008590 <HAL_RCC_ClockConfig+0x1b8>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 030f 	and.w	r3, r3, #15
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	429a      	cmp	r2, r3
 800840e:	d001      	beq.n	8008414 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e0b8      	b.n	8008586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 0302 	and.w	r3, r3, #2
 800841c:	2b00      	cmp	r3, #0
 800841e:	d020      	beq.n	8008462 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 0304 	and.w	r3, r3, #4
 8008428:	2b00      	cmp	r3, #0
 800842a:	d005      	beq.n	8008438 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800842c:	4b59      	ldr	r3, [pc, #356]	; (8008594 <HAL_RCC_ClockConfig+0x1bc>)
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	4a58      	ldr	r2, [pc, #352]	; (8008594 <HAL_RCC_ClockConfig+0x1bc>)
 8008432:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008436:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 0308 	and.w	r3, r3, #8
 8008440:	2b00      	cmp	r3, #0
 8008442:	d005      	beq.n	8008450 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008444:	4b53      	ldr	r3, [pc, #332]	; (8008594 <HAL_RCC_ClockConfig+0x1bc>)
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	4a52      	ldr	r2, [pc, #328]	; (8008594 <HAL_RCC_ClockConfig+0x1bc>)
 800844a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800844e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008450:	4b50      	ldr	r3, [pc, #320]	; (8008594 <HAL_RCC_ClockConfig+0x1bc>)
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	494d      	ldr	r1, [pc, #308]	; (8008594 <HAL_RCC_ClockConfig+0x1bc>)
 800845e:	4313      	orrs	r3, r2
 8008460:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 0301 	and.w	r3, r3, #1
 800846a:	2b00      	cmp	r3, #0
 800846c:	d044      	beq.n	80084f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d107      	bne.n	8008486 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008476:	4b47      	ldr	r3, [pc, #284]	; (8008594 <HAL_RCC_ClockConfig+0x1bc>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800847e:	2b00      	cmp	r3, #0
 8008480:	d119      	bne.n	80084b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e07f      	b.n	8008586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	2b02      	cmp	r3, #2
 800848c:	d003      	beq.n	8008496 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008492:	2b03      	cmp	r3, #3
 8008494:	d107      	bne.n	80084a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008496:	4b3f      	ldr	r3, [pc, #252]	; (8008594 <HAL_RCC_ClockConfig+0x1bc>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d109      	bne.n	80084b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e06f      	b.n	8008586 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084a6:	4b3b      	ldr	r3, [pc, #236]	; (8008594 <HAL_RCC_ClockConfig+0x1bc>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 0302 	and.w	r3, r3, #2
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d101      	bne.n	80084b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e067      	b.n	8008586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80084b6:	4b37      	ldr	r3, [pc, #220]	; (8008594 <HAL_RCC_ClockConfig+0x1bc>)
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f023 0203 	bic.w	r2, r3, #3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	4934      	ldr	r1, [pc, #208]	; (8008594 <HAL_RCC_ClockConfig+0x1bc>)
 80084c4:	4313      	orrs	r3, r2
 80084c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80084c8:	f7fa fc44 	bl	8002d54 <HAL_GetTick>
 80084cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084ce:	e00a      	b.n	80084e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084d0:	f7fa fc40 	bl	8002d54 <HAL_GetTick>
 80084d4:	4602      	mov	r2, r0
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	f241 3288 	movw	r2, #5000	; 0x1388
 80084de:	4293      	cmp	r3, r2
 80084e0:	d901      	bls.n	80084e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e04f      	b.n	8008586 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084e6:	4b2b      	ldr	r3, [pc, #172]	; (8008594 <HAL_RCC_ClockConfig+0x1bc>)
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	f003 020c 	and.w	r2, r3, #12
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d1eb      	bne.n	80084d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80084f8:	4b25      	ldr	r3, [pc, #148]	; (8008590 <HAL_RCC_ClockConfig+0x1b8>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 030f 	and.w	r3, r3, #15
 8008500:	683a      	ldr	r2, [r7, #0]
 8008502:	429a      	cmp	r2, r3
 8008504:	d20c      	bcs.n	8008520 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008506:	4b22      	ldr	r3, [pc, #136]	; (8008590 <HAL_RCC_ClockConfig+0x1b8>)
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	b2d2      	uxtb	r2, r2
 800850c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800850e:	4b20      	ldr	r3, [pc, #128]	; (8008590 <HAL_RCC_ClockConfig+0x1b8>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 030f 	and.w	r3, r3, #15
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	429a      	cmp	r2, r3
 800851a:	d001      	beq.n	8008520 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e032      	b.n	8008586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 0304 	and.w	r3, r3, #4
 8008528:	2b00      	cmp	r3, #0
 800852a:	d008      	beq.n	800853e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800852c:	4b19      	ldr	r3, [pc, #100]	; (8008594 <HAL_RCC_ClockConfig+0x1bc>)
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	4916      	ldr	r1, [pc, #88]	; (8008594 <HAL_RCC_ClockConfig+0x1bc>)
 800853a:	4313      	orrs	r3, r2
 800853c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0308 	and.w	r3, r3, #8
 8008546:	2b00      	cmp	r3, #0
 8008548:	d009      	beq.n	800855e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800854a:	4b12      	ldr	r3, [pc, #72]	; (8008594 <HAL_RCC_ClockConfig+0x1bc>)
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	00db      	lsls	r3, r3, #3
 8008558:	490e      	ldr	r1, [pc, #56]	; (8008594 <HAL_RCC_ClockConfig+0x1bc>)
 800855a:	4313      	orrs	r3, r2
 800855c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800855e:	f000 f821 	bl	80085a4 <HAL_RCC_GetSysClockFreq>
 8008562:	4601      	mov	r1, r0
 8008564:	4b0b      	ldr	r3, [pc, #44]	; (8008594 <HAL_RCC_ClockConfig+0x1bc>)
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	091b      	lsrs	r3, r3, #4
 800856a:	f003 030f 	and.w	r3, r3, #15
 800856e:	4a0a      	ldr	r2, [pc, #40]	; (8008598 <HAL_RCC_ClockConfig+0x1c0>)
 8008570:	5cd3      	ldrb	r3, [r2, r3]
 8008572:	fa21 f303 	lsr.w	r3, r1, r3
 8008576:	4a09      	ldr	r2, [pc, #36]	; (800859c <HAL_RCC_ClockConfig+0x1c4>)
 8008578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800857a:	4b09      	ldr	r3, [pc, #36]	; (80085a0 <HAL_RCC_ClockConfig+0x1c8>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4618      	mov	r0, r3
 8008580:	f7fa fba4 	bl	8002ccc <HAL_InitTick>

  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	40023c00 	.word	0x40023c00
 8008594:	40023800 	.word	0x40023800
 8008598:	080116d8 	.word	0x080116d8
 800859c:	20000008 	.word	0x20000008
 80085a0:	2000000c 	.word	0x2000000c

080085a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80085aa:	2300      	movs	r3, #0
 80085ac:	607b      	str	r3, [r7, #4]
 80085ae:	2300      	movs	r3, #0
 80085b0:	60fb      	str	r3, [r7, #12]
 80085b2:	2300      	movs	r3, #0
 80085b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80085b6:	2300      	movs	r3, #0
 80085b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085ba:	4b63      	ldr	r3, [pc, #396]	; (8008748 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	f003 030c 	and.w	r3, r3, #12
 80085c2:	2b04      	cmp	r3, #4
 80085c4:	d007      	beq.n	80085d6 <HAL_RCC_GetSysClockFreq+0x32>
 80085c6:	2b08      	cmp	r3, #8
 80085c8:	d008      	beq.n	80085dc <HAL_RCC_GetSysClockFreq+0x38>
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f040 80b4 	bne.w	8008738 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80085d0:	4b5e      	ldr	r3, [pc, #376]	; (800874c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80085d2:	60bb      	str	r3, [r7, #8]
       break;
 80085d4:	e0b3      	b.n	800873e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80085d6:	4b5e      	ldr	r3, [pc, #376]	; (8008750 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80085d8:	60bb      	str	r3, [r7, #8]
      break;
 80085da:	e0b0      	b.n	800873e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80085dc:	4b5a      	ldr	r3, [pc, #360]	; (8008748 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80085e6:	4b58      	ldr	r3, [pc, #352]	; (8008748 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d04a      	beq.n	8008688 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085f2:	4b55      	ldr	r3, [pc, #340]	; (8008748 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	099b      	lsrs	r3, r3, #6
 80085f8:	f04f 0400 	mov.w	r4, #0
 80085fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008600:	f04f 0200 	mov.w	r2, #0
 8008604:	ea03 0501 	and.w	r5, r3, r1
 8008608:	ea04 0602 	and.w	r6, r4, r2
 800860c:	4629      	mov	r1, r5
 800860e:	4632      	mov	r2, r6
 8008610:	f04f 0300 	mov.w	r3, #0
 8008614:	f04f 0400 	mov.w	r4, #0
 8008618:	0154      	lsls	r4, r2, #5
 800861a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800861e:	014b      	lsls	r3, r1, #5
 8008620:	4619      	mov	r1, r3
 8008622:	4622      	mov	r2, r4
 8008624:	1b49      	subs	r1, r1, r5
 8008626:	eb62 0206 	sbc.w	r2, r2, r6
 800862a:	f04f 0300 	mov.w	r3, #0
 800862e:	f04f 0400 	mov.w	r4, #0
 8008632:	0194      	lsls	r4, r2, #6
 8008634:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008638:	018b      	lsls	r3, r1, #6
 800863a:	1a5b      	subs	r3, r3, r1
 800863c:	eb64 0402 	sbc.w	r4, r4, r2
 8008640:	f04f 0100 	mov.w	r1, #0
 8008644:	f04f 0200 	mov.w	r2, #0
 8008648:	00e2      	lsls	r2, r4, #3
 800864a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800864e:	00d9      	lsls	r1, r3, #3
 8008650:	460b      	mov	r3, r1
 8008652:	4614      	mov	r4, r2
 8008654:	195b      	adds	r3, r3, r5
 8008656:	eb44 0406 	adc.w	r4, r4, r6
 800865a:	f04f 0100 	mov.w	r1, #0
 800865e:	f04f 0200 	mov.w	r2, #0
 8008662:	0262      	lsls	r2, r4, #9
 8008664:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008668:	0259      	lsls	r1, r3, #9
 800866a:	460b      	mov	r3, r1
 800866c:	4614      	mov	r4, r2
 800866e:	4618      	mov	r0, r3
 8008670:	4621      	mov	r1, r4
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f04f 0400 	mov.w	r4, #0
 8008678:	461a      	mov	r2, r3
 800867a:	4623      	mov	r3, r4
 800867c:	f7f8 fa16 	bl	8000aac <__aeabi_uldivmod>
 8008680:	4603      	mov	r3, r0
 8008682:	460c      	mov	r4, r1
 8008684:	60fb      	str	r3, [r7, #12]
 8008686:	e049      	b.n	800871c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008688:	4b2f      	ldr	r3, [pc, #188]	; (8008748 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	099b      	lsrs	r3, r3, #6
 800868e:	f04f 0400 	mov.w	r4, #0
 8008692:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008696:	f04f 0200 	mov.w	r2, #0
 800869a:	ea03 0501 	and.w	r5, r3, r1
 800869e:	ea04 0602 	and.w	r6, r4, r2
 80086a2:	4629      	mov	r1, r5
 80086a4:	4632      	mov	r2, r6
 80086a6:	f04f 0300 	mov.w	r3, #0
 80086aa:	f04f 0400 	mov.w	r4, #0
 80086ae:	0154      	lsls	r4, r2, #5
 80086b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80086b4:	014b      	lsls	r3, r1, #5
 80086b6:	4619      	mov	r1, r3
 80086b8:	4622      	mov	r2, r4
 80086ba:	1b49      	subs	r1, r1, r5
 80086bc:	eb62 0206 	sbc.w	r2, r2, r6
 80086c0:	f04f 0300 	mov.w	r3, #0
 80086c4:	f04f 0400 	mov.w	r4, #0
 80086c8:	0194      	lsls	r4, r2, #6
 80086ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80086ce:	018b      	lsls	r3, r1, #6
 80086d0:	1a5b      	subs	r3, r3, r1
 80086d2:	eb64 0402 	sbc.w	r4, r4, r2
 80086d6:	f04f 0100 	mov.w	r1, #0
 80086da:	f04f 0200 	mov.w	r2, #0
 80086de:	00e2      	lsls	r2, r4, #3
 80086e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80086e4:	00d9      	lsls	r1, r3, #3
 80086e6:	460b      	mov	r3, r1
 80086e8:	4614      	mov	r4, r2
 80086ea:	195b      	adds	r3, r3, r5
 80086ec:	eb44 0406 	adc.w	r4, r4, r6
 80086f0:	f04f 0100 	mov.w	r1, #0
 80086f4:	f04f 0200 	mov.w	r2, #0
 80086f8:	02a2      	lsls	r2, r4, #10
 80086fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80086fe:	0299      	lsls	r1, r3, #10
 8008700:	460b      	mov	r3, r1
 8008702:	4614      	mov	r4, r2
 8008704:	4618      	mov	r0, r3
 8008706:	4621      	mov	r1, r4
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f04f 0400 	mov.w	r4, #0
 800870e:	461a      	mov	r2, r3
 8008710:	4623      	mov	r3, r4
 8008712:	f7f8 f9cb 	bl	8000aac <__aeabi_uldivmod>
 8008716:	4603      	mov	r3, r0
 8008718:	460c      	mov	r4, r1
 800871a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800871c:	4b0a      	ldr	r3, [pc, #40]	; (8008748 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	0c1b      	lsrs	r3, r3, #16
 8008722:	f003 0303 	and.w	r3, r3, #3
 8008726:	3301      	adds	r3, #1
 8008728:	005b      	lsls	r3, r3, #1
 800872a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	fbb2 f3f3 	udiv	r3, r2, r3
 8008734:	60bb      	str	r3, [r7, #8]
      break;
 8008736:	e002      	b.n	800873e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008738:	4b04      	ldr	r3, [pc, #16]	; (800874c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800873a:	60bb      	str	r3, [r7, #8]
      break;
 800873c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800873e:	68bb      	ldr	r3, [r7, #8]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3714      	adds	r7, #20
 8008744:	46bd      	mov	sp, r7
 8008746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008748:	40023800 	.word	0x40023800
 800874c:	00f42400 	.word	0x00f42400
 8008750:	007a1200 	.word	0x007a1200

08008754 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008754:	b480      	push	{r7}
 8008756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008758:	4b03      	ldr	r3, [pc, #12]	; (8008768 <HAL_RCC_GetHCLKFreq+0x14>)
 800875a:	681b      	ldr	r3, [r3, #0]
}
 800875c:	4618      	mov	r0, r3
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	20000008 	.word	0x20000008

0800876c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008770:	f7ff fff0 	bl	8008754 <HAL_RCC_GetHCLKFreq>
 8008774:	4601      	mov	r1, r0
 8008776:	4b05      	ldr	r3, [pc, #20]	; (800878c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	0a9b      	lsrs	r3, r3, #10
 800877c:	f003 0307 	and.w	r3, r3, #7
 8008780:	4a03      	ldr	r2, [pc, #12]	; (8008790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008782:	5cd3      	ldrb	r3, [r2, r3]
 8008784:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008788:	4618      	mov	r0, r3
 800878a:	bd80      	pop	{r7, pc}
 800878c:	40023800 	.word	0x40023800
 8008790:	080116e8 	.word	0x080116e8

08008794 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b086      	sub	sp, #24
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800879c:	2300      	movs	r3, #0
 800879e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80087a0:	2300      	movs	r3, #0
 80087a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 0301 	and.w	r3, r3, #1
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d105      	bne.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d035      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80087bc:	4b62      	ldr	r3, [pc, #392]	; (8008948 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80087be:	2200      	movs	r2, #0
 80087c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80087c2:	f7fa fac7 	bl	8002d54 <HAL_GetTick>
 80087c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80087c8:	e008      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80087ca:	f7fa fac3 	bl	8002d54 <HAL_GetTick>
 80087ce:	4602      	mov	r2, r0
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d901      	bls.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087d8:	2303      	movs	r3, #3
 80087da:	e0b0      	b.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80087dc:	4b5b      	ldr	r3, [pc, #364]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d1f0      	bne.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	019a      	lsls	r2, r3, #6
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	071b      	lsls	r3, r3, #28
 80087f4:	4955      	ldr	r1, [pc, #340]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80087f6:	4313      	orrs	r3, r2
 80087f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80087fc:	4b52      	ldr	r3, [pc, #328]	; (8008948 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80087fe:	2201      	movs	r2, #1
 8008800:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008802:	f7fa faa7 	bl	8002d54 <HAL_GetTick>
 8008806:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008808:	e008      	b.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800880a:	f7fa faa3 	bl	8002d54 <HAL_GetTick>
 800880e:	4602      	mov	r2, r0
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	2b02      	cmp	r3, #2
 8008816:	d901      	bls.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008818:	2303      	movs	r3, #3
 800881a:	e090      	b.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800881c:	4b4b      	ldr	r3, [pc, #300]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d0f0      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0302 	and.w	r3, r3, #2
 8008830:	2b00      	cmp	r3, #0
 8008832:	f000 8083 	beq.w	800893c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008836:	2300      	movs	r3, #0
 8008838:	60fb      	str	r3, [r7, #12]
 800883a:	4b44      	ldr	r3, [pc, #272]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800883c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883e:	4a43      	ldr	r2, [pc, #268]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008844:	6413      	str	r3, [r2, #64]	; 0x40
 8008846:	4b41      	ldr	r3, [pc, #260]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800884e:	60fb      	str	r3, [r7, #12]
 8008850:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008852:	4b3f      	ldr	r3, [pc, #252]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a3e      	ldr	r2, [pc, #248]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800885c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800885e:	f7fa fa79 	bl	8002d54 <HAL_GetTick>
 8008862:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008864:	e008      	b.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008866:	f7fa fa75 	bl	8002d54 <HAL_GetTick>
 800886a:	4602      	mov	r2, r0
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	1ad3      	subs	r3, r2, r3
 8008870:	2b02      	cmp	r3, #2
 8008872:	d901      	bls.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008874:	2303      	movs	r3, #3
 8008876:	e062      	b.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008878:	4b35      	ldr	r3, [pc, #212]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008880:	2b00      	cmp	r3, #0
 8008882:	d0f0      	beq.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008884:	4b31      	ldr	r3, [pc, #196]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008888:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800888c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d02f      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d028      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80088a2:	4b2a      	ldr	r3, [pc, #168]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80088a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80088ac:	4b29      	ldr	r3, [pc, #164]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80088ae:	2201      	movs	r2, #1
 80088b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80088b2:	4b28      	ldr	r3, [pc, #160]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80088b4:	2200      	movs	r2, #0
 80088b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80088b8:	4a24      	ldr	r2, [pc, #144]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80088be:	4b23      	ldr	r3, [pc, #140]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80088c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c2:	f003 0301 	and.w	r3, r3, #1
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d114      	bne.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80088ca:	f7fa fa43 	bl	8002d54 <HAL_GetTick>
 80088ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088d0:	e00a      	b.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088d2:	f7fa fa3f 	bl	8002d54 <HAL_GetTick>
 80088d6:	4602      	mov	r2, r0
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d901      	bls.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80088e4:	2303      	movs	r3, #3
 80088e6:	e02a      	b.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088e8:	4b18      	ldr	r3, [pc, #96]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80088ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ec:	f003 0302 	and.w	r3, r3, #2
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d0ee      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008900:	d10d      	bne.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008902:	4b12      	ldr	r3, [pc, #72]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008916:	490d      	ldr	r1, [pc, #52]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008918:	4313      	orrs	r3, r2
 800891a:	608b      	str	r3, [r1, #8]
 800891c:	e005      	b.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800891e:	4b0b      	ldr	r3, [pc, #44]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	4a0a      	ldr	r2, [pc, #40]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008924:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008928:	6093      	str	r3, [r2, #8]
 800892a:	4b08      	ldr	r3, [pc, #32]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800892c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008936:	4905      	ldr	r1, [pc, #20]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008938:	4313      	orrs	r3, r2
 800893a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3718      	adds	r7, #24
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	42470068 	.word	0x42470068
 800894c:	40023800 	.word	0x40023800
 8008950:	40007000 	.word	0x40007000
 8008954:	42470e40 	.word	0x42470e40

08008958 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2203      	movs	r2, #3
 8008964:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8008966:	4b11      	ldr	r3, [pc, #68]	; (80089ac <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8008968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800896c:	099b      	lsrs	r3, r3, #6
 800896e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008976:	4b0d      	ldr	r3, [pc, #52]	; (80089ac <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8008978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800897c:	0f1b      	lsrs	r3, r3, #28
 800897e:	f003 0207 	and.w	r2, r3, #7
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8008986:	4b09      	ldr	r3, [pc, #36]	; (80089ac <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800898e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8008990:	4b06      	ldr	r3, [pc, #24]	; (80089ac <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8008992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008994:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	431a      	orrs	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80089a0:	bf00      	nop
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	40023800 	.word	0x40023800

080089b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b087      	sub	sp, #28
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80089b8:	2300      	movs	r3, #0
 80089ba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80089bc:	2300      	movs	r3, #0
 80089be:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80089c0:	2300      	movs	r3, #0
 80089c2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80089c4:	2300      	movs	r3, #0
 80089c6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d13d      	bne.n	8008a4a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80089ce:	4b22      	ldr	r3, [pc, #136]	; (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089d6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d004      	beq.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d12f      	bne.n	8008a42 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80089e2:	4b1e      	ldr	r3, [pc, #120]	; (8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80089e4:	617b      	str	r3, [r7, #20]
          break;
 80089e6:	e02f      	b.n	8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80089e8:	4b1b      	ldr	r3, [pc, #108]	; (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089f4:	d108      	bne.n	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80089f6:	4b18      	ldr	r3, [pc, #96]	; (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089fe:	4a18      	ldr	r2, [pc, #96]	; (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a04:	613b      	str	r3, [r7, #16]
 8008a06:	e007      	b.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008a08:	4b13      	ldr	r3, [pc, #76]	; (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a10:	4a14      	ldr	r2, [pc, #80]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a16:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008a18:	4b0f      	ldr	r3, [pc, #60]	; (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8008a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a1e:	099b      	lsrs	r3, r3, #6
 8008a20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	fb02 f303 	mul.w	r3, r2, r3
 8008a2a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008a2c:	4b0a      	ldr	r3, [pc, #40]	; (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8008a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a32:	0f1b      	lsrs	r3, r3, #28
 8008a34:	f003 0307 	and.w	r3, r3, #7
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a3e:	617b      	str	r3, [r7, #20]
          break;
 8008a40:	e002      	b.n	8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008a42:	2300      	movs	r3, #0
 8008a44:	617b      	str	r3, [r7, #20]
          break;
 8008a46:	bf00      	nop
        }
      }
      break;
 8008a48:	bf00      	nop
    }
  }
  return frequency;
 8008a4a:	697b      	ldr	r3, [r7, #20]
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	371c      	adds	r7, #28
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr
 8008a58:	40023800 	.word	0x40023800
 8008a5c:	00bb8000 	.word	0x00bb8000
 8008a60:	007a1200 	.word	0x007a1200
 8008a64:	00f42400 	.word	0x00f42400

08008a68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d101      	bne.n	8008a7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e056      	b.n	8008b28 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d106      	bne.n	8008a9a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f7f9 fecd 	bl	8002834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2202      	movs	r2, #2
 8008a9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ab0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	431a      	orrs	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	431a      	orrs	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	695b      	ldr	r3, [r3, #20]
 8008acc:	431a      	orrs	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	699b      	ldr	r3, [r3, #24]
 8008ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ad6:	431a      	orrs	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	69db      	ldr	r3, [r3, #28]
 8008adc:	431a      	orrs	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a1b      	ldr	r3, [r3, #32]
 8008ae2:	ea42 0103 	orr.w	r1, r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	430a      	orrs	r2, r1
 8008af0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	0c1b      	lsrs	r3, r3, #16
 8008af8:	f003 0104 	and.w	r1, r3, #4
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	430a      	orrs	r2, r1
 8008b06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	69da      	ldr	r2, [r3, #28]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2201      	movs	r2, #1
 8008b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b088      	sub	sp, #32
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	603b      	str	r3, [r7, #0]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b40:	2300      	movs	r3, #0
 8008b42:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d101      	bne.n	8008b52 <HAL_SPI_Transmit+0x22>
 8008b4e:	2302      	movs	r3, #2
 8008b50:	e11e      	b.n	8008d90 <HAL_SPI_Transmit+0x260>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b5a:	f7fa f8fb 	bl	8002d54 <HAL_GetTick>
 8008b5e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008b60:	88fb      	ldrh	r3, [r7, #6]
 8008b62:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d002      	beq.n	8008b76 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008b70:	2302      	movs	r3, #2
 8008b72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008b74:	e103      	b.n	8008d7e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d002      	beq.n	8008b82 <HAL_SPI_Transmit+0x52>
 8008b7c:	88fb      	ldrh	r3, [r7, #6]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d102      	bne.n	8008b88 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008b86:	e0fa      	b.n	8008d7e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2203      	movs	r2, #3
 8008b8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	88fa      	ldrh	r2, [r7, #6]
 8008ba0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	88fa      	ldrh	r2, [r7, #6]
 8008ba6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bce:	d107      	bne.n	8008be0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bde:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bea:	2b40      	cmp	r3, #64	; 0x40
 8008bec:	d007      	beq.n	8008bfe <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bfc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c06:	d14b      	bne.n	8008ca0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d002      	beq.n	8008c16 <HAL_SPI_Transmit+0xe6>
 8008c10:	8afb      	ldrh	r3, [r7, #22]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d13e      	bne.n	8008c94 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c1a:	881a      	ldrh	r2, [r3, #0]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c26:	1c9a      	adds	r2, r3, #2
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	3b01      	subs	r3, #1
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008c3a:	e02b      	b.n	8008c94 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	f003 0302 	and.w	r3, r3, #2
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d112      	bne.n	8008c70 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c4e:	881a      	ldrh	r2, [r3, #0]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5a:	1c9a      	adds	r2, r3, #2
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	3b01      	subs	r3, #1
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	86da      	strh	r2, [r3, #54]	; 0x36
 8008c6e:	e011      	b.n	8008c94 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c70:	f7fa f870 	bl	8002d54 <HAL_GetTick>
 8008c74:	4602      	mov	r2, r0
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	683a      	ldr	r2, [r7, #0]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d803      	bhi.n	8008c88 <HAL_SPI_Transmit+0x158>
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c86:	d102      	bne.n	8008c8e <HAL_SPI_Transmit+0x15e>
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d102      	bne.n	8008c94 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008c92:	e074      	b.n	8008d7e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1ce      	bne.n	8008c3c <HAL_SPI_Transmit+0x10c>
 8008c9e:	e04c      	b.n	8008d3a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d002      	beq.n	8008cae <HAL_SPI_Transmit+0x17e>
 8008ca8:	8afb      	ldrh	r3, [r7, #22]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d140      	bne.n	8008d30 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	330c      	adds	r3, #12
 8008cb8:	7812      	ldrb	r2, [r2, #0]
 8008cba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc0:	1c5a      	adds	r2, r3, #1
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008cd4:	e02c      	b.n	8008d30 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	f003 0302 	and.w	r3, r3, #2
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d113      	bne.n	8008d0c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	330c      	adds	r3, #12
 8008cee:	7812      	ldrb	r2, [r2, #0]
 8008cf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf6:	1c5a      	adds	r2, r3, #1
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	3b01      	subs	r3, #1
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	86da      	strh	r2, [r3, #54]	; 0x36
 8008d0a:	e011      	b.n	8008d30 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d0c:	f7fa f822 	bl	8002d54 <HAL_GetTick>
 8008d10:	4602      	mov	r2, r0
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	1ad3      	subs	r3, r2, r3
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d803      	bhi.n	8008d24 <HAL_SPI_Transmit+0x1f4>
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d22:	d102      	bne.n	8008d2a <HAL_SPI_Transmit+0x1fa>
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d102      	bne.n	8008d30 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008d2e:	e026      	b.n	8008d7e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1cd      	bne.n	8008cd6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d3a:	69ba      	ldr	r2, [r7, #24]
 8008d3c:	6839      	ldr	r1, [r7, #0]
 8008d3e:	68f8      	ldr	r0, [r7, #12]
 8008d40:	f000 f894 	bl	8008e6c <SPI_EndRxTxTransaction>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d002      	beq.n	8008d50 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2220      	movs	r2, #32
 8008d4e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10a      	bne.n	8008d6e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d58:	2300      	movs	r3, #0
 8008d5a:	613b      	str	r3, [r7, #16]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	613b      	str	r3, [r7, #16]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	613b      	str	r3, [r7, #16]
 8008d6c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d002      	beq.n	8008d7c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	77fb      	strb	r3, [r7, #31]
 8008d7a:	e000      	b.n	8008d7e <HAL_SPI_Transmit+0x24e>
  }

error:
 8008d7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008d8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3720      	adds	r7, #32
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	603b      	str	r3, [r7, #0]
 8008da4:	4613      	mov	r3, r2
 8008da6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008da8:	e04c      	b.n	8008e44 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db0:	d048      	beq.n	8008e44 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008db2:	f7f9 ffcf 	bl	8002d54 <HAL_GetTick>
 8008db6:	4602      	mov	r2, r0
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	683a      	ldr	r2, [r7, #0]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d902      	bls.n	8008dc8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d13d      	bne.n	8008e44 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	685a      	ldr	r2, [r3, #4]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008dd6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008de0:	d111      	bne.n	8008e06 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dea:	d004      	beq.n	8008df6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008df4:	d107      	bne.n	8008e06 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e0e:	d10f      	bne.n	8008e30 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e1e:	601a      	str	r2, [r3, #0]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008e40:	2303      	movs	r3, #3
 8008e42:	e00f      	b.n	8008e64 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	689a      	ldr	r2, [r3, #8]
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	bf0c      	ite	eq
 8008e54:	2301      	moveq	r3, #1
 8008e56:	2300      	movne	r3, #0
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	79fb      	ldrb	r3, [r7, #7]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d1a3      	bne.n	8008daa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b088      	sub	sp, #32
 8008e70:	af02      	add	r7, sp, #8
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008e78:	4b1b      	ldr	r3, [pc, #108]	; (8008ee8 <SPI_EndRxTxTransaction+0x7c>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a1b      	ldr	r2, [pc, #108]	; (8008eec <SPI_EndRxTxTransaction+0x80>)
 8008e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e82:	0d5b      	lsrs	r3, r3, #21
 8008e84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008e88:	fb02 f303 	mul.w	r3, r2, r3
 8008e8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e96:	d112      	bne.n	8008ebe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	2180      	movs	r1, #128	; 0x80
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f7ff ff78 	bl	8008d98 <SPI_WaitFlagStateUntilTimeout>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d016      	beq.n	8008edc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eb2:	f043 0220 	orr.w	r2, r3, #32
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e00f      	b.n	8008ede <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00a      	beq.n	8008eda <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed4:	2b80      	cmp	r3, #128	; 0x80
 8008ed6:	d0f2      	beq.n	8008ebe <SPI_EndRxTxTransaction+0x52>
 8008ed8:	e000      	b.n	8008edc <SPI_EndRxTxTransaction+0x70>
        break;
 8008eda:	bf00      	nop
  }

  return HAL_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3718      	adds	r7, #24
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	20000008 	.word	0x20000008
 8008eec:	165e9f81 	.word	0x165e9f81

08008ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d101      	bne.n	8008f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	e01d      	b.n	8008f3e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d106      	bne.n	8008f1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f7f9 fe48 	bl	8002bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2202      	movs	r2, #2
 8008f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	3304      	adds	r3, #4
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	4610      	mov	r0, r2
 8008f30:	f000 fa14 	bl	800935c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b085      	sub	sp, #20
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68da      	ldr	r2, [r3, #12]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f042 0201 	orr.w	r2, r2, #1
 8008f5c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f003 0307 	and.w	r3, r3, #7
 8008f68:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2b06      	cmp	r3, #6
 8008f6e:	d007      	beq.n	8008f80 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f042 0201 	orr.w	r2, r2, #1
 8008f7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3714      	adds	r7, #20
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr

08008f8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b082      	sub	sp, #8
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	691b      	ldr	r3, [r3, #16]
 8008f9c:	f003 0302 	and.w	r3, r3, #2
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d122      	bne.n	8008fea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	f003 0302 	and.w	r3, r3, #2
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d11b      	bne.n	8008fea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f06f 0202 	mvn.w	r2, #2
 8008fba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	699b      	ldr	r3, [r3, #24]
 8008fc8:	f003 0303 	and.w	r3, r3, #3
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d003      	beq.n	8008fd8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 f9a5 	bl	8009320 <HAL_TIM_IC_CaptureCallback>
 8008fd6:	e005      	b.n	8008fe4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 f997 	bl	800930c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f9a8 	bl	8009334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	f003 0304 	and.w	r3, r3, #4
 8008ff4:	2b04      	cmp	r3, #4
 8008ff6:	d122      	bne.n	800903e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	f003 0304 	and.w	r3, r3, #4
 8009002:	2b04      	cmp	r3, #4
 8009004:	d11b      	bne.n	800903e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f06f 0204 	mvn.w	r2, #4
 800900e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2202      	movs	r2, #2
 8009014:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	699b      	ldr	r3, [r3, #24]
 800901c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009020:	2b00      	cmp	r3, #0
 8009022:	d003      	beq.n	800902c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 f97b 	bl	8009320 <HAL_TIM_IC_CaptureCallback>
 800902a:	e005      	b.n	8009038 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 f96d 	bl	800930c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 f97e 	bl	8009334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	f003 0308 	and.w	r3, r3, #8
 8009048:	2b08      	cmp	r3, #8
 800904a:	d122      	bne.n	8009092 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	f003 0308 	and.w	r3, r3, #8
 8009056:	2b08      	cmp	r3, #8
 8009058:	d11b      	bne.n	8009092 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f06f 0208 	mvn.w	r2, #8
 8009062:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2204      	movs	r2, #4
 8009068:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	69db      	ldr	r3, [r3, #28]
 8009070:	f003 0303 	and.w	r3, r3, #3
 8009074:	2b00      	cmp	r3, #0
 8009076:	d003      	beq.n	8009080 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f951 	bl	8009320 <HAL_TIM_IC_CaptureCallback>
 800907e:	e005      	b.n	800908c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 f943 	bl	800930c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f954 	bl	8009334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	691b      	ldr	r3, [r3, #16]
 8009098:	f003 0310 	and.w	r3, r3, #16
 800909c:	2b10      	cmp	r3, #16
 800909e:	d122      	bne.n	80090e6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	f003 0310 	and.w	r3, r3, #16
 80090aa:	2b10      	cmp	r3, #16
 80090ac:	d11b      	bne.n	80090e6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f06f 0210 	mvn.w	r2, #16
 80090b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2208      	movs	r2, #8
 80090bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	69db      	ldr	r3, [r3, #28]
 80090c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d003      	beq.n	80090d4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 f927 	bl	8009320 <HAL_TIM_IC_CaptureCallback>
 80090d2:	e005      	b.n	80090e0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f919 	bl	800930c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f92a 	bl	8009334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	f003 0301 	and.w	r3, r3, #1
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d10e      	bne.n	8009112 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	f003 0301 	and.w	r3, r3, #1
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d107      	bne.n	8009112 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f06f 0201 	mvn.w	r2, #1
 800910a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f7f9 f895 	bl	800223c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800911c:	2b80      	cmp	r3, #128	; 0x80
 800911e:	d10e      	bne.n	800913e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800912a:	2b80      	cmp	r3, #128	; 0x80
 800912c:	d107      	bne.n	800913e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 facf 	bl	80096dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009148:	2b40      	cmp	r3, #64	; 0x40
 800914a:	d10e      	bne.n	800916a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009156:	2b40      	cmp	r3, #64	; 0x40
 8009158:	d107      	bne.n	800916a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f8ef 	bl	8009348 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	f003 0320 	and.w	r3, r3, #32
 8009174:	2b20      	cmp	r3, #32
 8009176:	d10e      	bne.n	8009196 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	f003 0320 	and.w	r3, r3, #32
 8009182:	2b20      	cmp	r3, #32
 8009184:	d107      	bne.n	8009196 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f06f 0220 	mvn.w	r2, #32
 800918e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fa99 	bl	80096c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009196:	bf00      	nop
 8009198:	3708      	adds	r7, #8
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b084      	sub	sp, #16
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d101      	bne.n	80091b6 <HAL_TIM_ConfigClockSource+0x18>
 80091b2:	2302      	movs	r3, #2
 80091b4:	e0a6      	b.n	8009304 <HAL_TIM_ConfigClockSource+0x166>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2201      	movs	r2, #1
 80091ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2202      	movs	r2, #2
 80091c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80091d4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091dc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2b40      	cmp	r3, #64	; 0x40
 80091ec:	d067      	beq.n	80092be <HAL_TIM_ConfigClockSource+0x120>
 80091ee:	2b40      	cmp	r3, #64	; 0x40
 80091f0:	d80b      	bhi.n	800920a <HAL_TIM_ConfigClockSource+0x6c>
 80091f2:	2b10      	cmp	r3, #16
 80091f4:	d073      	beq.n	80092de <HAL_TIM_ConfigClockSource+0x140>
 80091f6:	2b10      	cmp	r3, #16
 80091f8:	d802      	bhi.n	8009200 <HAL_TIM_ConfigClockSource+0x62>
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d06f      	beq.n	80092de <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80091fe:	e078      	b.n	80092f2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009200:	2b20      	cmp	r3, #32
 8009202:	d06c      	beq.n	80092de <HAL_TIM_ConfigClockSource+0x140>
 8009204:	2b30      	cmp	r3, #48	; 0x30
 8009206:	d06a      	beq.n	80092de <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009208:	e073      	b.n	80092f2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800920a:	2b70      	cmp	r3, #112	; 0x70
 800920c:	d00d      	beq.n	800922a <HAL_TIM_ConfigClockSource+0x8c>
 800920e:	2b70      	cmp	r3, #112	; 0x70
 8009210:	d804      	bhi.n	800921c <HAL_TIM_ConfigClockSource+0x7e>
 8009212:	2b50      	cmp	r3, #80	; 0x50
 8009214:	d033      	beq.n	800927e <HAL_TIM_ConfigClockSource+0xe0>
 8009216:	2b60      	cmp	r3, #96	; 0x60
 8009218:	d041      	beq.n	800929e <HAL_TIM_ConfigClockSource+0x100>
      break;
 800921a:	e06a      	b.n	80092f2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800921c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009220:	d066      	beq.n	80092f0 <HAL_TIM_ConfigClockSource+0x152>
 8009222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009226:	d017      	beq.n	8009258 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009228:	e063      	b.n	80092f2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6818      	ldr	r0, [r3, #0]
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	6899      	ldr	r1, [r3, #8]
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	685a      	ldr	r2, [r3, #4]
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	f000 f9a9 	bl	8009590 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800924c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	609a      	str	r2, [r3, #8]
      break;
 8009256:	e04c      	b.n	80092f2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6818      	ldr	r0, [r3, #0]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	6899      	ldr	r1, [r3, #8]
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	685a      	ldr	r2, [r3, #4]
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	f000 f992 	bl	8009590 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	689a      	ldr	r2, [r3, #8]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800927a:	609a      	str	r2, [r3, #8]
      break;
 800927c:	e039      	b.n	80092f2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6818      	ldr	r0, [r3, #0]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	6859      	ldr	r1, [r3, #4]
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	461a      	mov	r2, r3
 800928c:	f000 f906 	bl	800949c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2150      	movs	r1, #80	; 0x50
 8009296:	4618      	mov	r0, r3
 8009298:	f000 f95f 	bl	800955a <TIM_ITRx_SetConfig>
      break;
 800929c:	e029      	b.n	80092f2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6818      	ldr	r0, [r3, #0]
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	6859      	ldr	r1, [r3, #4]
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	461a      	mov	r2, r3
 80092ac:	f000 f925 	bl	80094fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2160      	movs	r1, #96	; 0x60
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 f94f 	bl	800955a <TIM_ITRx_SetConfig>
      break;
 80092bc:	e019      	b.n	80092f2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6818      	ldr	r0, [r3, #0]
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	6859      	ldr	r1, [r3, #4]
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	461a      	mov	r2, r3
 80092cc:	f000 f8e6 	bl	800949c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2140      	movs	r1, #64	; 0x40
 80092d6:	4618      	mov	r0, r3
 80092d8:	f000 f93f 	bl	800955a <TIM_ITRx_SetConfig>
      break;
 80092dc:	e009      	b.n	80092f2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4619      	mov	r1, r3
 80092e8:	4610      	mov	r0, r2
 80092ea:	f000 f936 	bl	800955a <TIM_ITRx_SetConfig>
      break;
 80092ee:	e000      	b.n	80092f2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80092f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3710      	adds	r7, #16
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009314:	bf00      	nop
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009350:	bf00      	nop
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a40      	ldr	r2, [pc, #256]	; (8009470 <TIM_Base_SetConfig+0x114>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d013      	beq.n	800939c <TIM_Base_SetConfig+0x40>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800937a:	d00f      	beq.n	800939c <TIM_Base_SetConfig+0x40>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a3d      	ldr	r2, [pc, #244]	; (8009474 <TIM_Base_SetConfig+0x118>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d00b      	beq.n	800939c <TIM_Base_SetConfig+0x40>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a3c      	ldr	r2, [pc, #240]	; (8009478 <TIM_Base_SetConfig+0x11c>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d007      	beq.n	800939c <TIM_Base_SetConfig+0x40>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a3b      	ldr	r2, [pc, #236]	; (800947c <TIM_Base_SetConfig+0x120>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d003      	beq.n	800939c <TIM_Base_SetConfig+0x40>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4a3a      	ldr	r2, [pc, #232]	; (8009480 <TIM_Base_SetConfig+0x124>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d108      	bne.n	80093ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a2f      	ldr	r2, [pc, #188]	; (8009470 <TIM_Base_SetConfig+0x114>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d02b      	beq.n	800940e <TIM_Base_SetConfig+0xb2>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093bc:	d027      	beq.n	800940e <TIM_Base_SetConfig+0xb2>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a2c      	ldr	r2, [pc, #176]	; (8009474 <TIM_Base_SetConfig+0x118>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d023      	beq.n	800940e <TIM_Base_SetConfig+0xb2>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a2b      	ldr	r2, [pc, #172]	; (8009478 <TIM_Base_SetConfig+0x11c>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d01f      	beq.n	800940e <TIM_Base_SetConfig+0xb2>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a2a      	ldr	r2, [pc, #168]	; (800947c <TIM_Base_SetConfig+0x120>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d01b      	beq.n	800940e <TIM_Base_SetConfig+0xb2>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a29      	ldr	r2, [pc, #164]	; (8009480 <TIM_Base_SetConfig+0x124>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d017      	beq.n	800940e <TIM_Base_SetConfig+0xb2>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a28      	ldr	r2, [pc, #160]	; (8009484 <TIM_Base_SetConfig+0x128>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d013      	beq.n	800940e <TIM_Base_SetConfig+0xb2>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a27      	ldr	r2, [pc, #156]	; (8009488 <TIM_Base_SetConfig+0x12c>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d00f      	beq.n	800940e <TIM_Base_SetConfig+0xb2>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a26      	ldr	r2, [pc, #152]	; (800948c <TIM_Base_SetConfig+0x130>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d00b      	beq.n	800940e <TIM_Base_SetConfig+0xb2>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a25      	ldr	r2, [pc, #148]	; (8009490 <TIM_Base_SetConfig+0x134>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d007      	beq.n	800940e <TIM_Base_SetConfig+0xb2>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a24      	ldr	r2, [pc, #144]	; (8009494 <TIM_Base_SetConfig+0x138>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d003      	beq.n	800940e <TIM_Base_SetConfig+0xb2>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a23      	ldr	r2, [pc, #140]	; (8009498 <TIM_Base_SetConfig+0x13c>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d108      	bne.n	8009420 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	4313      	orrs	r3, r2
 800941e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	695b      	ldr	r3, [r3, #20]
 800942a:	4313      	orrs	r3, r2
 800942c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	689a      	ldr	r2, [r3, #8]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a0a      	ldr	r2, [pc, #40]	; (8009470 <TIM_Base_SetConfig+0x114>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d003      	beq.n	8009454 <TIM_Base_SetConfig+0xf8>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a0c      	ldr	r2, [pc, #48]	; (8009480 <TIM_Base_SetConfig+0x124>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d103      	bne.n	800945c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	691a      	ldr	r2, [r3, #16]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	615a      	str	r2, [r3, #20]
}
 8009462:	bf00      	nop
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	40010000 	.word	0x40010000
 8009474:	40000400 	.word	0x40000400
 8009478:	40000800 	.word	0x40000800
 800947c:	40000c00 	.word	0x40000c00
 8009480:	40010400 	.word	0x40010400
 8009484:	40014000 	.word	0x40014000
 8009488:	40014400 	.word	0x40014400
 800948c:	40014800 	.word	0x40014800
 8009490:	40001800 	.word	0x40001800
 8009494:	40001c00 	.word	0x40001c00
 8009498:	40002000 	.word	0x40002000

0800949c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800949c:	b480      	push	{r7}
 800949e:	b087      	sub	sp, #28
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6a1b      	ldr	r3, [r3, #32]
 80094ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	6a1b      	ldr	r3, [r3, #32]
 80094b2:	f023 0201 	bic.w	r2, r3, #1
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	699b      	ldr	r3, [r3, #24]
 80094be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	011b      	lsls	r3, r3, #4
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	4313      	orrs	r3, r2
 80094d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	f023 030a 	bic.w	r3, r3, #10
 80094d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80094da:	697a      	ldr	r2, [r7, #20]
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	4313      	orrs	r3, r2
 80094e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	693a      	ldr	r2, [r7, #16]
 80094e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	697a      	ldr	r2, [r7, #20]
 80094ec:	621a      	str	r2, [r3, #32]
}
 80094ee:	bf00      	nop
 80094f0:	371c      	adds	r7, #28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b087      	sub	sp, #28
 80094fe:	af00      	add	r7, sp, #0
 8009500:	60f8      	str	r0, [r7, #12]
 8009502:	60b9      	str	r1, [r7, #8]
 8009504:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6a1b      	ldr	r3, [r3, #32]
 800950a:	f023 0210 	bic.w	r2, r3, #16
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	699b      	ldr	r3, [r3, #24]
 8009516:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6a1b      	ldr	r3, [r3, #32]
 800951c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009524:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	031b      	lsls	r3, r3, #12
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	4313      	orrs	r3, r2
 800952e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009536:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	011b      	lsls	r3, r3, #4
 800953c:	693a      	ldr	r2, [r7, #16]
 800953e:	4313      	orrs	r3, r2
 8009540:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	697a      	ldr	r2, [r7, #20]
 8009546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	693a      	ldr	r2, [r7, #16]
 800954c:	621a      	str	r2, [r3, #32]
}
 800954e:	bf00      	nop
 8009550:	371c      	adds	r7, #28
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr

0800955a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800955a:	b480      	push	{r7}
 800955c:	b085      	sub	sp, #20
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009570:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	4313      	orrs	r3, r2
 8009578:	f043 0307 	orr.w	r3, r3, #7
 800957c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	609a      	str	r2, [r3, #8]
}
 8009584:	bf00      	nop
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009590:	b480      	push	{r7}
 8009592:	b087      	sub	sp, #28
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	60b9      	str	r1, [r7, #8]
 800959a:	607a      	str	r2, [r7, #4]
 800959c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	021a      	lsls	r2, r3, #8
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	431a      	orrs	r2, r3
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	697a      	ldr	r2, [r7, #20]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	609a      	str	r2, [r3, #8]
}
 80095c4:	bf00      	nop
 80095c6:	371c      	adds	r7, #28
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d101      	bne.n	80095e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095e4:	2302      	movs	r3, #2
 80095e6:	e05a      	b.n	800969e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2202      	movs	r2, #2
 80095f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800960e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	4313      	orrs	r3, r2
 8009618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a21      	ldr	r2, [pc, #132]	; (80096ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d022      	beq.n	8009672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009634:	d01d      	beq.n	8009672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a1d      	ldr	r2, [pc, #116]	; (80096b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d018      	beq.n	8009672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a1b      	ldr	r2, [pc, #108]	; (80096b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d013      	beq.n	8009672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a1a      	ldr	r2, [pc, #104]	; (80096b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d00e      	beq.n	8009672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a18      	ldr	r2, [pc, #96]	; (80096bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d009      	beq.n	8009672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a17      	ldr	r2, [pc, #92]	; (80096c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d004      	beq.n	8009672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a15      	ldr	r2, [pc, #84]	; (80096c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d10c      	bne.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009678:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	68ba      	ldr	r2, [r7, #8]
 8009680:	4313      	orrs	r3, r2
 8009682:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3714      	adds	r7, #20
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	40010000 	.word	0x40010000
 80096b0:	40000400 	.word	0x40000400
 80096b4:	40000800 	.word	0x40000800
 80096b8:	40000c00 	.word	0x40000c00
 80096bc:	40010400 	.word	0x40010400
 80096c0:	40014000 	.word	0x40014000
 80096c4:	40001800 	.word	0x40001800

080096c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096d0:	bf00      	nop
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096e4:	bf00      	nop
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096f0:	b084      	sub	sp, #16
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b084      	sub	sp, #16
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
 80096fa:	f107 001c 	add.w	r0, r7, #28
 80096fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009704:	2b01      	cmp	r3, #1
 8009706:	d122      	bne.n	800974e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800971c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009732:	2b01      	cmp	r3, #1
 8009734:	d105      	bne.n	8009742 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f94a 	bl	80099dc <USB_CoreReset>
 8009748:	4603      	mov	r3, r0
 800974a:	73fb      	strb	r3, [r7, #15]
 800974c:	e01a      	b.n	8009784 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 f93e 	bl	80099dc <USB_CoreReset>
 8009760:	4603      	mov	r3, r0
 8009762:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009766:	2b00      	cmp	r3, #0
 8009768:	d106      	bne.n	8009778 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	639a      	str	r2, [r3, #56]	; 0x38
 8009776:	e005      	b.n	8009784 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009786:	2b01      	cmp	r3, #1
 8009788:	d10b      	bne.n	80097a2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	f043 0206 	orr.w	r2, r3, #6
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	f043 0220 	orr.w	r2, r3, #32
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80097a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097ae:	b004      	add	sp, #16
 80097b0:	4770      	bx	lr

080097b2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80097b2:	b480      	push	{r7}
 80097b4:	b083      	sub	sp, #12
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	f043 0201 	orr.w	r2, r3, #1
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80097c6:	2300      	movs	r3, #0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	f023 0201 	bic.w	r2, r3, #1
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	370c      	adds	r7, #12
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b082      	sub	sp, #8
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
 80097fe:	460b      	mov	r3, r1
 8009800:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800980e:	78fb      	ldrb	r3, [r7, #3]
 8009810:	2b01      	cmp	r3, #1
 8009812:	d106      	bne.n	8009822 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	60da      	str	r2, [r3, #12]
 8009820:	e00b      	b.n	800983a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009822:	78fb      	ldrb	r3, [r7, #3]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d106      	bne.n	8009836 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	60da      	str	r2, [r3, #12]
 8009834:	e001      	b.n	800983a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	e003      	b.n	8009842 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800983a:	2032      	movs	r0, #50	; 0x32
 800983c:	f7f9 fa96 	bl	8002d6c <HAL_Delay>

  return HAL_OK;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
	...

0800984c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800984c:	b480      	push	{r7}
 800984e:	b085      	sub	sp, #20
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009856:	2300      	movs	r3, #0
 8009858:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	019b      	lsls	r3, r3, #6
 800985e:	f043 0220 	orr.w	r2, r3, #32
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	3301      	adds	r3, #1
 800986a:	60fb      	str	r3, [r7, #12]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	4a09      	ldr	r2, [pc, #36]	; (8009894 <USB_FlushTxFifo+0x48>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d901      	bls.n	8009878 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009874:	2303      	movs	r3, #3
 8009876:	e006      	b.n	8009886 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	f003 0320 	and.w	r3, r3, #32
 8009880:	2b20      	cmp	r3, #32
 8009882:	d0f0      	beq.n	8009866 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	00030d40 	.word	0x00030d40

08009898 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80098a0:	2300      	movs	r3, #0
 80098a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2210      	movs	r2, #16
 80098a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	3301      	adds	r3, #1
 80098ae:	60fb      	str	r3, [r7, #12]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	4a09      	ldr	r2, [pc, #36]	; (80098d8 <USB_FlushRxFifo+0x40>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d901      	bls.n	80098bc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80098b8:	2303      	movs	r3, #3
 80098ba:	e006      	b.n	80098ca <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	f003 0310 	and.w	r3, r3, #16
 80098c4:	2b10      	cmp	r3, #16
 80098c6:	d0f0      	beq.n	80098aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	00030d40 	.word	0x00030d40

080098dc <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80098dc:	b480      	push	{r7}
 80098de:	b089      	sub	sp, #36	; 0x24
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	4611      	mov	r1, r2
 80098e8:	461a      	mov	r2, r3
 80098ea:	460b      	mov	r3, r1
 80098ec:	71fb      	strb	r3, [r7, #7]
 80098ee:	4613      	mov	r3, r2
 80098f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80098fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d11a      	bne.n	8009938 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009902:	88bb      	ldrh	r3, [r7, #4]
 8009904:	3303      	adds	r3, #3
 8009906:	089b      	lsrs	r3, r3, #2
 8009908:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800990a:	2300      	movs	r3, #0
 800990c:	61bb      	str	r3, [r7, #24]
 800990e:	e00f      	b.n	8009930 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009910:	79fb      	ldrb	r3, [r7, #7]
 8009912:	031a      	lsls	r2, r3, #12
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	4413      	add	r3, r2
 8009918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800991c:	461a      	mov	r2, r3
 800991e:	69fb      	ldr	r3, [r7, #28]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	3304      	adds	r3, #4
 8009928:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	3301      	adds	r3, #1
 800992e:	61bb      	str	r3, [r7, #24]
 8009930:	69ba      	ldr	r2, [r7, #24]
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	429a      	cmp	r2, r3
 8009936:	d3eb      	bcc.n	8009910 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3724      	adds	r7, #36	; 0x24
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr

08009946 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009946:	b480      	push	{r7}
 8009948:	b089      	sub	sp, #36	; 0x24
 800994a:	af00      	add	r7, sp, #0
 800994c:	60f8      	str	r0, [r7, #12]
 800994e:	60b9      	str	r1, [r7, #8]
 8009950:	4613      	mov	r3, r2
 8009952:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800995c:	88fb      	ldrh	r3, [r7, #6]
 800995e:	3303      	adds	r3, #3
 8009960:	089b      	lsrs	r3, r3, #2
 8009962:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009964:	2300      	movs	r3, #0
 8009966:	61bb      	str	r3, [r7, #24]
 8009968:	e00b      	b.n	8009982 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	601a      	str	r2, [r3, #0]
    pDest++;
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	3304      	adds	r3, #4
 800997a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800997c:	69bb      	ldr	r3, [r7, #24]
 800997e:	3301      	adds	r3, #1
 8009980:	61bb      	str	r3, [r7, #24]
 8009982:	69ba      	ldr	r2, [r7, #24]
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	429a      	cmp	r2, r3
 8009988:	d3ef      	bcc.n	800996a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800998a:	69fb      	ldr	r3, [r7, #28]
}
 800998c:	4618      	mov	r0, r3
 800998e:	3724      	adds	r7, #36	; 0x24
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	695b      	ldr	r3, [r3, #20]
 80099a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	699b      	ldr	r3, [r3, #24]
 80099aa:	68fa      	ldr	r2, [r7, #12]
 80099ac:	4013      	ands	r3, r2
 80099ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80099b0:	68fb      	ldr	r3, [r7, #12]
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3714      	adds	r7, #20
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr

080099be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80099be:	b480      	push	{r7}
 80099c0:	b083      	sub	sp, #12
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	695b      	ldr	r3, [r3, #20]
 80099ca:	f003 0301 	and.w	r3, r3, #1
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	370c      	adds	r7, #12
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
	...

080099dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80099e4:	2300      	movs	r3, #0
 80099e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	3301      	adds	r3, #1
 80099ec:	60fb      	str	r3, [r7, #12]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	4a13      	ldr	r2, [pc, #76]	; (8009a40 <USB_CoreReset+0x64>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d901      	bls.n	80099fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80099f6:	2303      	movs	r3, #3
 80099f8:	e01b      	b.n	8009a32 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	daf2      	bge.n	80099e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009a02:	2300      	movs	r3, #0
 8009a04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	f043 0201 	orr.w	r2, r3, #1
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	3301      	adds	r3, #1
 8009a16:	60fb      	str	r3, [r7, #12]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	4a09      	ldr	r2, [pc, #36]	; (8009a40 <USB_CoreReset+0x64>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d901      	bls.n	8009a24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009a20:	2303      	movs	r3, #3
 8009a22:	e006      	b.n	8009a32 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d0f0      	beq.n	8009a12 <USB_CoreReset+0x36>

  return HAL_OK;
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3714      	adds	r7, #20
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	00030d40 	.word	0x00030d40

08009a44 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a44:	b084      	sub	sp, #16
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b084      	sub	sp, #16
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	f107 001c 	add.w	r0, r7, #28
 8009a52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a60:	461a      	mov	r2, r3
 8009a62:	2300      	movs	r3, #0
 8009a64:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a76:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a82:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d018      	beq.n	8009ac8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d10a      	bne.n	8009ab2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68ba      	ldr	r2, [r7, #8]
 8009aa6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009aaa:	f043 0304 	orr.w	r3, r3, #4
 8009aae:	6013      	str	r3, [r2, #0]
 8009ab0:	e014      	b.n	8009adc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	68ba      	ldr	r2, [r7, #8]
 8009abc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ac0:	f023 0304 	bic.w	r3, r3, #4
 8009ac4:	6013      	str	r3, [r2, #0]
 8009ac6:	e009      	b.n	8009adc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ad6:	f023 0304 	bic.w	r3, r3, #4
 8009ada:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009adc:	2110      	movs	r1, #16
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f7ff feb4 	bl	800984c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f7ff fed7 	bl	8009898 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009aea:	2300      	movs	r3, #0
 8009aec:	60fb      	str	r3, [r7, #12]
 8009aee:	e015      	b.n	8009b1c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	015a      	lsls	r2, r3, #5
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	4413      	add	r3, r2
 8009af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009afc:	461a      	mov	r2, r3
 8009afe:	f04f 33ff 	mov.w	r3, #4294967295
 8009b02:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	015a      	lsls	r2, r3, #5
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b10:	461a      	mov	r2, r3
 8009b12:	2300      	movs	r3, #0
 8009b14:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	3301      	adds	r3, #1
 8009b1a:	60fb      	str	r3, [r7, #12]
 8009b1c:	6a3b      	ldr	r3, [r7, #32]
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d3e5      	bcc.n	8009af0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8009b24:	2101      	movs	r1, #1
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f8ac 	bl	8009c84 <USB_DriveVbus>

  HAL_Delay(200U);
 8009b2c:	20c8      	movs	r0, #200	; 0xc8
 8009b2e:	f7f9 f91d 	bl	8002d6c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b3e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00b      	beq.n	8009b64 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b52:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	4a14      	ldr	r2, [pc, #80]	; (8009ba8 <USB_HostInit+0x164>)
 8009b58:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	4a13      	ldr	r2, [pc, #76]	; (8009bac <USB_HostInit+0x168>)
 8009b5e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009b62:	e009      	b.n	8009b78 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2280      	movs	r2, #128	; 0x80
 8009b68:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4a10      	ldr	r2, [pc, #64]	; (8009bb0 <USB_HostInit+0x16c>)
 8009b6e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	4a10      	ldr	r2, [pc, #64]	; (8009bb4 <USB_HostInit+0x170>)
 8009b74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d105      	bne.n	8009b8a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	699b      	ldr	r3, [r3, #24]
 8009b82:	f043 0210 	orr.w	r2, r3, #16
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	699a      	ldr	r2, [r3, #24]
 8009b8e:	4b0a      	ldr	r3, [pc, #40]	; (8009bb8 <USB_HostInit+0x174>)
 8009b90:	4313      	orrs	r3, r2
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ba2:	b004      	add	sp, #16
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	01000200 	.word	0x01000200
 8009bac:	00e00300 	.word	0x00e00300
 8009bb0:	00600080 	.word	0x00600080
 8009bb4:	004000e0 	.word	0x004000e0
 8009bb8:	a3200008 	.word	0xa3200008

08009bbc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009bda:	f023 0303 	bic.w	r3, r3, #3
 8009bde:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	78fb      	ldrb	r3, [r7, #3]
 8009bea:	f003 0303 	and.w	r3, r3, #3
 8009bee:	68f9      	ldr	r1, [r7, #12]
 8009bf0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009bf8:	78fb      	ldrb	r3, [r7, #3]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d107      	bne.n	8009c0e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c04:	461a      	mov	r2, r3
 8009c06:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009c0a:	6053      	str	r3, [r2, #4]
 8009c0c:	e009      	b.n	8009c22 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009c0e:	78fb      	ldrb	r3, [r7, #3]
 8009c10:	2b02      	cmp	r3, #2
 8009c12:	d106      	bne.n	8009c22 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	f241 7370 	movw	r3, #6000	; 0x1770
 8009c20:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009c22:	2300      	movs	r3, #0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3714      	adds	r7, #20
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009c50:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c5e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009c60:	2064      	movs	r0, #100	; 0x64
 8009c62:	f7f9 f883 	bl	8002d6c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009c6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c72:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009c74:	200a      	movs	r0, #10
 8009c76:	f7f9 f879 	bl	8002d6c <HAL_Delay>

  return HAL_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009c94:	2300      	movs	r3, #0
 8009c96:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009ca8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d109      	bne.n	8009cc8 <USB_DriveVbus+0x44>
 8009cb4:	78fb      	ldrb	r3, [r7, #3]
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d106      	bne.n	8009cc8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009cc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009cc6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cd2:	d109      	bne.n	8009ce8 <USB_DriveVbus+0x64>
 8009cd4:	78fb      	ldrb	r3, [r7, #3]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d106      	bne.n	8009ce8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009ce2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ce6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3714      	adds	r7, #20
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b085      	sub	sp, #20
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009d02:	2300      	movs	r3, #0
 8009d04:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	0c5b      	lsrs	r3, r3, #17
 8009d14:	f003 0303 	and.w	r3, r3, #3
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3714      	adds	r7, #20
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr

08009d24 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	b29b      	uxth	r3, r3
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3714      	adds	r7, #20
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
	...

08009d48 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b087      	sub	sp, #28
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	4608      	mov	r0, r1
 8009d52:	4611      	mov	r1, r2
 8009d54:	461a      	mov	r2, r3
 8009d56:	4603      	mov	r3, r0
 8009d58:	70fb      	strb	r3, [r7, #3]
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	70bb      	strb	r3, [r7, #2]
 8009d5e:	4613      	mov	r3, r2
 8009d60:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009d62:	2300      	movs	r3, #0
 8009d64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009d6a:	78fb      	ldrb	r3, [r7, #3]
 8009d6c:	015a      	lsls	r2, r3, #5
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	4413      	add	r3, r2
 8009d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d76:	461a      	mov	r2, r3
 8009d78:	f04f 33ff 	mov.w	r3, #4294967295
 8009d7c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009d7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009d82:	2b03      	cmp	r3, #3
 8009d84:	d87e      	bhi.n	8009e84 <USB_HC_Init+0x13c>
 8009d86:	a201      	add	r2, pc, #4	; (adr r2, 8009d8c <USB_HC_Init+0x44>)
 8009d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d8c:	08009d9d 	.word	0x08009d9d
 8009d90:	08009e47 	.word	0x08009e47
 8009d94:	08009d9d 	.word	0x08009d9d
 8009d98:	08009e09 	.word	0x08009e09
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009d9c:	78fb      	ldrb	r3, [r7, #3]
 8009d9e:	015a      	lsls	r2, r3, #5
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	4413      	add	r3, r2
 8009da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009da8:	461a      	mov	r2, r3
 8009daa:	f240 439d 	movw	r3, #1181	; 0x49d
 8009dae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009db0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	da10      	bge.n	8009dda <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009db8:	78fb      	ldrb	r3, [r7, #3]
 8009dba:	015a      	lsls	r2, r3, #5
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	78fa      	ldrb	r2, [r7, #3]
 8009dc8:	0151      	lsls	r1, r2, #5
 8009dca:	68ba      	ldr	r2, [r7, #8]
 8009dcc:	440a      	add	r2, r1
 8009dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dd6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8009dd8:	e057      	b.n	8009e8a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d051      	beq.n	8009e8a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8009de6:	78fb      	ldrb	r3, [r7, #3]
 8009de8:	015a      	lsls	r2, r3, #5
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	4413      	add	r3, r2
 8009dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	78fa      	ldrb	r2, [r7, #3]
 8009df6:	0151      	lsls	r1, r2, #5
 8009df8:	68ba      	ldr	r2, [r7, #8]
 8009dfa:	440a      	add	r2, r1
 8009dfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009e04:	60d3      	str	r3, [r2, #12]
      break;
 8009e06:	e040      	b.n	8009e8a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009e08:	78fb      	ldrb	r3, [r7, #3]
 8009e0a:	015a      	lsls	r2, r3, #5
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	4413      	add	r3, r2
 8009e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e14:	461a      	mov	r2, r3
 8009e16:	f240 639d 	movw	r3, #1693	; 0x69d
 8009e1a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009e1c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	da34      	bge.n	8009e8e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009e24:	78fb      	ldrb	r3, [r7, #3]
 8009e26:	015a      	lsls	r2, r3, #5
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	78fa      	ldrb	r2, [r7, #3]
 8009e34:	0151      	lsls	r1, r2, #5
 8009e36:	68ba      	ldr	r2, [r7, #8]
 8009e38:	440a      	add	r2, r1
 8009e3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e42:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009e44:	e023      	b.n	8009e8e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009e46:	78fb      	ldrb	r3, [r7, #3]
 8009e48:	015a      	lsls	r2, r3, #5
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e52:	461a      	mov	r2, r3
 8009e54:	f240 2325 	movw	r3, #549	; 0x225
 8009e58:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009e5a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	da17      	bge.n	8009e92 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009e62:	78fb      	ldrb	r3, [r7, #3]
 8009e64:	015a      	lsls	r2, r3, #5
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	4413      	add	r3, r2
 8009e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	78fa      	ldrb	r2, [r7, #3]
 8009e72:	0151      	lsls	r1, r2, #5
 8009e74:	68ba      	ldr	r2, [r7, #8]
 8009e76:	440a      	add	r2, r1
 8009e78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e7c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009e80:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009e82:	e006      	b.n	8009e92 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009e84:	2301      	movs	r3, #1
 8009e86:	75fb      	strb	r3, [r7, #23]
      break;
 8009e88:	e004      	b.n	8009e94 <USB_HC_Init+0x14c>
      break;
 8009e8a:	bf00      	nop
 8009e8c:	e002      	b.n	8009e94 <USB_HC_Init+0x14c>
      break;
 8009e8e:	bf00      	nop
 8009e90:	e000      	b.n	8009e94 <USB_HC_Init+0x14c>
      break;
 8009e92:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e9a:	699a      	ldr	r2, [r3, #24]
 8009e9c:	78fb      	ldrb	r3, [r7, #3]
 8009e9e:	f003 030f 	and.w	r3, r3, #15
 8009ea2:	2101      	movs	r1, #1
 8009ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ea8:	68b9      	ldr	r1, [r7, #8]
 8009eaa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	699b      	ldr	r3, [r3, #24]
 8009eb6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009ebe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	da03      	bge.n	8009ece <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009eca:	613b      	str	r3, [r7, #16]
 8009ecc:	e001      	b.n	8009ed2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8009ed2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009ed6:	2b02      	cmp	r3, #2
 8009ed8:	d103      	bne.n	8009ee2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009eda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009ede:	60fb      	str	r3, [r7, #12]
 8009ee0:	e001      	b.n	8009ee6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009ee6:	787b      	ldrb	r3, [r7, #1]
 8009ee8:	059b      	lsls	r3, r3, #22
 8009eea:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009eee:	78bb      	ldrb	r3, [r7, #2]
 8009ef0:	02db      	lsls	r3, r3, #11
 8009ef2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009ef6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009ef8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009efc:	049b      	lsls	r3, r3, #18
 8009efe:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009f02:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009f04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009f06:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009f0a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f10:	78fb      	ldrb	r3, [r7, #3]
 8009f12:	0159      	lsls	r1, r3, #5
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	440b      	add	r3, r1
 8009f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f1c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f22:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8009f24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009f28:	2b03      	cmp	r3, #3
 8009f2a:	d10f      	bne.n	8009f4c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009f2c:	78fb      	ldrb	r3, [r7, #3]
 8009f2e:	015a      	lsls	r2, r3, #5
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	4413      	add	r3, r2
 8009f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	78fa      	ldrb	r2, [r7, #3]
 8009f3c:	0151      	lsls	r1, r2, #5
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	440a      	add	r2, r1
 8009f42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f4a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	371c      	adds	r7, #28
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop

08009f5c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b08c      	sub	sp, #48	; 0x30
 8009f60:	af02      	add	r7, sp, #8
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	4613      	mov	r3, r2
 8009f68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	785b      	ldrb	r3, [r3, #1]
 8009f72:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009f74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f78:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d028      	beq.n	8009fd8 <USB_HC_StartXfer+0x7c>
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	791b      	ldrb	r3, [r3, #4]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d124      	bne.n	8009fd8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8009f8e:	79fb      	ldrb	r3, [r7, #7]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d10b      	bne.n	8009fac <USB_HC_StartXfer+0x50>
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	795b      	ldrb	r3, [r3, #5]
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d107      	bne.n	8009fac <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	785b      	ldrb	r3, [r3, #1]
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f000 fa2e 	bl	800a404 <USB_DoPing>
      return HAL_OK;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	e112      	b.n	800a1d2 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8009fac:	79fb      	ldrb	r3, [r7, #7]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d112      	bne.n	8009fd8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	015a      	lsls	r2, r3, #5
 8009fb6:	6a3b      	ldr	r3, [r7, #32]
 8009fb8:	4413      	add	r3, r2
 8009fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	69fa      	ldr	r2, [r7, #28]
 8009fc2:	0151      	lsls	r1, r2, #5
 8009fc4:	6a3a      	ldr	r2, [r7, #32]
 8009fc6:	440a      	add	r2, r1
 8009fc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fcc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8009fd0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	691b      	ldr	r3, [r3, #16]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d018      	beq.n	800a012 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	68ba      	ldr	r2, [r7, #8]
 8009fe6:	8912      	ldrh	r2, [r2, #8]
 8009fe8:	4413      	add	r3, r2
 8009fea:	3b01      	subs	r3, #1
 8009fec:	68ba      	ldr	r2, [r7, #8]
 8009fee:	8912      	ldrh	r2, [r2, #8]
 8009ff0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ff4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009ff6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009ff8:	8b7b      	ldrh	r3, [r7, #26]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d90b      	bls.n	800a016 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8009ffe:	8b7b      	ldrh	r3, [r7, #26]
 800a000:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a002:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a004:	68ba      	ldr	r2, [r7, #8]
 800a006:	8912      	ldrh	r2, [r2, #8]
 800a008:	fb02 f203 	mul.w	r2, r2, r3
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	611a      	str	r2, [r3, #16]
 800a010:	e001      	b.n	800a016 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800a012:	2301      	movs	r3, #1
 800a014:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	78db      	ldrb	r3, [r3, #3]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d006      	beq.n	800a02c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a01e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a020:	68ba      	ldr	r2, [r7, #8]
 800a022:	8912      	ldrh	r2, [r2, #8]
 800a024:	fb02 f203 	mul.w	r2, r2, r3
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a034:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a036:	04d9      	lsls	r1, r3, #19
 800a038:	4b68      	ldr	r3, [pc, #416]	; (800a1dc <USB_HC_StartXfer+0x280>)
 800a03a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a03c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	7a9b      	ldrb	r3, [r3, #10]
 800a042:	075b      	lsls	r3, r3, #29
 800a044:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a048:	69f9      	ldr	r1, [r7, #28]
 800a04a:	0148      	lsls	r0, r1, #5
 800a04c:	6a39      	ldr	r1, [r7, #32]
 800a04e:	4401      	add	r1, r0
 800a050:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a054:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a056:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a058:	79fb      	ldrb	r3, [r7, #7]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d009      	beq.n	800a072 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	68d9      	ldr	r1, [r3, #12]
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	015a      	lsls	r2, r3, #5
 800a066:	6a3b      	ldr	r3, [r7, #32]
 800a068:	4413      	add	r3, r2
 800a06a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a06e:	460a      	mov	r2, r1
 800a070:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a072:	6a3b      	ldr	r3, [r7, #32]
 800a074:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	f003 0301 	and.w	r3, r3, #1
 800a07e:	2b00      	cmp	r3, #0
 800a080:	bf0c      	ite	eq
 800a082:	2301      	moveq	r3, #1
 800a084:	2300      	movne	r3, #0
 800a086:	b2db      	uxtb	r3, r3
 800a088:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	015a      	lsls	r2, r3, #5
 800a08e:	6a3b      	ldr	r3, [r7, #32]
 800a090:	4413      	add	r3, r2
 800a092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	69fa      	ldr	r2, [r7, #28]
 800a09a:	0151      	lsls	r1, r2, #5
 800a09c:	6a3a      	ldr	r2, [r7, #32]
 800a09e:	440a      	add	r2, r1
 800a0a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a0a8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	015a      	lsls	r2, r3, #5
 800a0ae:	6a3b      	ldr	r3, [r7, #32]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	7e7b      	ldrb	r3, [r7, #25]
 800a0ba:	075b      	lsls	r3, r3, #29
 800a0bc:	69f9      	ldr	r1, [r7, #28]
 800a0be:	0148      	lsls	r0, r1, #5
 800a0c0:	6a39      	ldr	r1, [r7, #32]
 800a0c2:	4401      	add	r1, r0
 800a0c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	015a      	lsls	r2, r3, #5
 800a0d0:	6a3b      	ldr	r3, [r7, #32]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a41      	ldr	r2, [pc, #260]	; (800a1e0 <USB_HC_StartXfer+0x284>)
 800a0dc:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a0de:	4b40      	ldr	r3, [pc, #256]	; (800a1e0 <USB_HC_StartXfer+0x284>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a0e6:	4a3e      	ldr	r2, [pc, #248]	; (800a1e0 <USB_HC_StartXfer+0x284>)
 800a0e8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	78db      	ldrb	r3, [r3, #3]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d006      	beq.n	800a100 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a0f2:	4b3b      	ldr	r3, [pc, #236]	; (800a1e0 <USB_HC_StartXfer+0x284>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0fa:	4a39      	ldr	r2, [pc, #228]	; (800a1e0 <USB_HC_StartXfer+0x284>)
 800a0fc:	6013      	str	r3, [r2, #0]
 800a0fe:	e005      	b.n	800a10c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a100:	4b37      	ldr	r3, [pc, #220]	; (800a1e0 <USB_HC_StartXfer+0x284>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a108:	4a35      	ldr	r2, [pc, #212]	; (800a1e0 <USB_HC_StartXfer+0x284>)
 800a10a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a10c:	4b34      	ldr	r3, [pc, #208]	; (800a1e0 <USB_HC_StartXfer+0x284>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a114:	4a32      	ldr	r2, [pc, #200]	; (800a1e0 <USB_HC_StartXfer+0x284>)
 800a116:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	015a      	lsls	r2, r3, #5
 800a11c:	6a3b      	ldr	r3, [r7, #32]
 800a11e:	4413      	add	r3, r2
 800a120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a124:	461a      	mov	r2, r3
 800a126:	4b2e      	ldr	r3, [pc, #184]	; (800a1e0 <USB_HC_StartXfer+0x284>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800a12c:	79fb      	ldrb	r3, [r7, #7]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d14e      	bne.n	800a1d0 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	78db      	ldrb	r3, [r3, #3]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d14a      	bne.n	800a1d0 <USB_HC_StartXfer+0x274>
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	691b      	ldr	r3, [r3, #16]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d046      	beq.n	800a1d0 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	79db      	ldrb	r3, [r3, #7]
 800a146:	2b03      	cmp	r3, #3
 800a148:	d830      	bhi.n	800a1ac <USB_HC_StartXfer+0x250>
 800a14a:	a201      	add	r2, pc, #4	; (adr r2, 800a150 <USB_HC_StartXfer+0x1f4>)
 800a14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a150:	0800a161 	.word	0x0800a161
 800a154:	0800a185 	.word	0x0800a185
 800a158:	0800a161 	.word	0x0800a161
 800a15c:	0800a185 	.word	0x0800a185
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	3303      	adds	r3, #3
 800a166:	089b      	lsrs	r3, r3, #2
 800a168:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a16a:	8afa      	ldrh	r2, [r7, #22]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a170:	b29b      	uxth	r3, r3
 800a172:	429a      	cmp	r2, r3
 800a174:	d91c      	bls.n	800a1b0 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	699b      	ldr	r3, [r3, #24]
 800a17a:	f043 0220 	orr.w	r2, r3, #32
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	619a      	str	r2, [r3, #24]
          }
          break;
 800a182:	e015      	b.n	800a1b0 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	691b      	ldr	r3, [r3, #16]
 800a188:	3303      	adds	r3, #3
 800a18a:	089b      	lsrs	r3, r3, #2
 800a18c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a18e:	8afa      	ldrh	r2, [r7, #22]
 800a190:	6a3b      	ldr	r3, [r7, #32]
 800a192:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	b29b      	uxth	r3, r3
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d90a      	bls.n	800a1b4 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	699b      	ldr	r3, [r3, #24]
 800a1a2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	619a      	str	r2, [r3, #24]
          }
          break;
 800a1aa:	e003      	b.n	800a1b4 <USB_HC_StartXfer+0x258>

        default:
          break;
 800a1ac:	bf00      	nop
 800a1ae:	e002      	b.n	800a1b6 <USB_HC_StartXfer+0x25a>
          break;
 800a1b0:	bf00      	nop
 800a1b2:	e000      	b.n	800a1b6 <USB_HC_StartXfer+0x25a>
          break;
 800a1b4:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	68d9      	ldr	r1, [r3, #12]
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	785a      	ldrb	r2, [r3, #1]
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	b298      	uxth	r0, r3
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	68f8      	ldr	r0, [r7, #12]
 800a1cc:	f7ff fb86 	bl	80098dc <USB_WritePacket>
    }
  }

  return HAL_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3728      	adds	r7, #40	; 0x28
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	1ff80000 	.word	0x1ff80000
 800a1e0:	20001370 	.word	0x20001370

0800a1e4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1f6:	695b      	ldr	r3, [r3, #20]
 800a1f8:	b29b      	uxth	r3, r3
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3714      	adds	r7, #20
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr

0800a206 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a206:	b480      	push	{r7}
 800a208:	b087      	sub	sp, #28
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
 800a20e:	460b      	mov	r3, r1
 800a210:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800a216:	78fb      	ldrb	r3, [r7, #3]
 800a218:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a21a:	2300      	movs	r3, #0
 800a21c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	015a      	lsls	r2, r3, #5
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	4413      	add	r3, r2
 800a226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	0c9b      	lsrs	r3, r3, #18
 800a22e:	f003 0303 	and.w	r3, r3, #3
 800a232:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d002      	beq.n	800a240 <USB_HC_Halt+0x3a>
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	2b02      	cmp	r3, #2
 800a23e:	d16c      	bne.n	800a31a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	015a      	lsls	r2, r3, #5
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	4413      	add	r3, r2
 800a248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	68fa      	ldr	r2, [r7, #12]
 800a250:	0151      	lsls	r1, r2, #5
 800a252:	693a      	ldr	r2, [r7, #16]
 800a254:	440a      	add	r2, r1
 800a256:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a25a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a25e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a264:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d143      	bne.n	800a2f4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	015a      	lsls	r2, r3, #5
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	4413      	add	r3, r2
 800a274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	0151      	lsls	r1, r2, #5
 800a27e:	693a      	ldr	r2, [r7, #16]
 800a280:	440a      	add	r2, r1
 800a282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a286:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a28a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	015a      	lsls	r2, r3, #5
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	4413      	add	r3, r2
 800a294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	0151      	lsls	r1, r2, #5
 800a29e:	693a      	ldr	r2, [r7, #16]
 800a2a0:	440a      	add	r2, r1
 800a2a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a2aa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	015a      	lsls	r2, r3, #5
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	0151      	lsls	r1, r2, #5
 800a2be:	693a      	ldr	r2, [r7, #16]
 800a2c0:	440a      	add	r2, r1
 800a2c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a2ca:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	617b      	str	r3, [r7, #20]
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a2d8:	d81d      	bhi.n	800a316 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	015a      	lsls	r2, r3, #5
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2f0:	d0ec      	beq.n	800a2cc <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a2f2:	e080      	b.n	800a3f6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	015a      	lsls	r2, r3, #5
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	68fa      	ldr	r2, [r7, #12]
 800a304:	0151      	lsls	r1, r2, #5
 800a306:	693a      	ldr	r2, [r7, #16]
 800a308:	440a      	add	r2, r1
 800a30a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a30e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a312:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a314:	e06f      	b.n	800a3f6 <USB_HC_Halt+0x1f0>
          break;
 800a316:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a318:	e06d      	b.n	800a3f6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	015a      	lsls	r2, r3, #5
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	4413      	add	r3, r2
 800a322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	0151      	lsls	r1, r2, #5
 800a32c:	693a      	ldr	r2, [r7, #16]
 800a32e:	440a      	add	r2, r1
 800a330:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a334:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a338:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a346:	2b00      	cmp	r3, #0
 800a348:	d143      	bne.n	800a3d2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	015a      	lsls	r2, r3, #5
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	4413      	add	r3, r2
 800a352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	0151      	lsls	r1, r2, #5
 800a35c:	693a      	ldr	r2, [r7, #16]
 800a35e:	440a      	add	r2, r1
 800a360:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a364:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a368:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	015a      	lsls	r2, r3, #5
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	4413      	add	r3, r2
 800a372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	0151      	lsls	r1, r2, #5
 800a37c:	693a      	ldr	r2, [r7, #16]
 800a37e:	440a      	add	r2, r1
 800a380:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a384:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a388:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	015a      	lsls	r2, r3, #5
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	4413      	add	r3, r2
 800a392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	68fa      	ldr	r2, [r7, #12]
 800a39a:	0151      	lsls	r1, r2, #5
 800a39c:	693a      	ldr	r2, [r7, #16]
 800a39e:	440a      	add	r2, r1
 800a3a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a3a8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	617b      	str	r3, [r7, #20]
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3b6:	d81d      	bhi.n	800a3f4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	015a      	lsls	r2, r3, #5
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	4413      	add	r3, r2
 800a3c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a3ce:	d0ec      	beq.n	800a3aa <USB_HC_Halt+0x1a4>
 800a3d0:	e011      	b.n	800a3f6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	015a      	lsls	r2, r3, #5
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	4413      	add	r3, r2
 800a3da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	0151      	lsls	r1, r2, #5
 800a3e4:	693a      	ldr	r2, [r7, #16]
 800a3e6:	440a      	add	r2, r1
 800a3e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a3f0:	6013      	str	r3, [r2, #0]
 800a3f2:	e000      	b.n	800a3f6 <USB_HC_Halt+0x1f0>
          break;
 800a3f4:	bf00      	nop
    }
  }

  return HAL_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	371c      	adds	r7, #28
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a404:	b480      	push	{r7}
 800a406:	b087      	sub	sp, #28
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	460b      	mov	r3, r1
 800a40e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a414:	78fb      	ldrb	r3, [r7, #3]
 800a416:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a418:	2301      	movs	r3, #1
 800a41a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	04da      	lsls	r2, r3, #19
 800a420:	4b15      	ldr	r3, [pc, #84]	; (800a478 <USB_DoPing+0x74>)
 800a422:	4013      	ands	r3, r2
 800a424:	693a      	ldr	r2, [r7, #16]
 800a426:	0151      	lsls	r1, r2, #5
 800a428:	697a      	ldr	r2, [r7, #20]
 800a42a:	440a      	add	r2, r1
 800a42c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a430:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a434:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	015a      	lsls	r2, r3, #5
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	4413      	add	r3, r2
 800a43e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a44c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a454:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	015a      	lsls	r2, r3, #5
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	4413      	add	r3, r2
 800a45e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a462:	461a      	mov	r2, r3
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	371c      	adds	r7, #28
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	1ff80000 	.word	0x1ff80000

0800a47c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a488:	2300      	movs	r3, #0
 800a48a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f7ff f9a1 	bl	80097d4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800a492:	2110      	movs	r1, #16
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f7ff f9d9 	bl	800984c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f7ff f9fc 	bl	8009898 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	613b      	str	r3, [r7, #16]
 800a4a4:	e01f      	b.n	800a4e6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	015a      	lsls	r2, r3, #5
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4bc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4c4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a4cc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	015a      	lsls	r2, r3, #5
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4da:	461a      	mov	r2, r3
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	613b      	str	r3, [r7, #16]
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	2b0f      	cmp	r3, #15
 800a4ea:	d9dc      	bls.n	800a4a6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	613b      	str	r3, [r7, #16]
 800a4f0:	e034      	b.n	800a55c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	015a      	lsls	r2, r3, #5
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a508:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a510:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a518:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	015a      	lsls	r2, r3, #5
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	4413      	add	r3, r2
 800a522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a526:	461a      	mov	r2, r3
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	3301      	adds	r3, #1
 800a530:	617b      	str	r3, [r7, #20]
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a538:	d80c      	bhi.n	800a554 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	015a      	lsls	r2, r3, #5
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	4413      	add	r3, r2
 800a542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a54c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a550:	d0ec      	beq.n	800a52c <USB_StopHost+0xb0>
 800a552:	e000      	b.n	800a556 <USB_StopHost+0xda>
        break;
 800a554:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	3301      	adds	r3, #1
 800a55a:	613b      	str	r3, [r7, #16]
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	2b0f      	cmp	r3, #15
 800a560:	d9c7      	bls.n	800a4f2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a568:	461a      	mov	r2, r3
 800a56a:	f04f 33ff 	mov.w	r3, #4294967295
 800a56e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f04f 32ff 	mov.w	r2, #4294967295
 800a576:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f7ff f91a 	bl	80097b2 <USB_EnableGlobalInt>

  return HAL_OK;
 800a57e:	2300      	movs	r3, #0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3718      	adds	r7, #24
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800a58c:	4904      	ldr	r1, [pc, #16]	; (800a5a0 <MX_FATFS_Init+0x18>)
 800a58e:	4805      	ldr	r0, [pc, #20]	; (800a5a4 <MX_FATFS_Init+0x1c>)
 800a590:	f005 fb7a 	bl	800fc88 <FATFS_LinkDriver>
 800a594:	4603      	mov	r3, r0
 800a596:	461a      	mov	r2, r3
 800a598:	4b03      	ldr	r3, [pc, #12]	; (800a5a8 <MX_FATFS_Init+0x20>)
 800a59a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800a59c:	bf00      	nop
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	20001600 	.word	0x20001600
 800a5a4:	080116f8 	.word	0x080116f8
 800a5a8:	20001a64 	.word	0x20001a64

0800a5ac <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a5b0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	4603      	mov	r3, r0
 800a5dc:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800a5e2:	79fb      	ldrb	r3, [r7, #7]
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	4808      	ldr	r0, [pc, #32]	; (800a608 <USBH_status+0x34>)
 800a5e8:	f000 fe11 	bl	800b20e <USBH_MSC_UnitIsReady>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d002      	beq.n	800a5f8 <USBH_status+0x24>
  {
    res = RES_OK;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	73fb      	strb	r3, [r7, #15]
 800a5f6:	e001      	b.n	800a5fc <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	20001a68 	.word	0x20001a68

0800a60c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b094      	sub	sp, #80	; 0x50
 800a610:	af02      	add	r7, sp, #8
 800a612:	60b9      	str	r1, [r7, #8]
 800a614:	607a      	str	r2, [r7, #4]
 800a616:	603b      	str	r3, [r7, #0]
 800a618:	4603      	mov	r3, r0
 800a61a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800a622:	7bf9      	ldrb	r1, [r7, #15]
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	9300      	str	r3, [sp, #0]
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	4812      	ldr	r0, [pc, #72]	; (800a678 <USBH_read+0x6c>)
 800a62e:	f000 fe38 	bl	800b2a2 <USBH_MSC_Read>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d103      	bne.n	800a640 <USBH_read+0x34>
  {
    res = RES_OK;
 800a638:	2300      	movs	r3, #0
 800a63a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a63e:	e015      	b.n	800a66c <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a640:	f107 0210 	add.w	r2, r7, #16
 800a644:	7bfb      	ldrb	r3, [r7, #15]
 800a646:	4619      	mov	r1, r3
 800a648:	480b      	ldr	r0, [pc, #44]	; (800a678 <USBH_read+0x6c>)
 800a64a:	f000 fe06 	bl	800b25a <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a64e:	7f7b      	ldrb	r3, [r7, #29]
 800a650:	2b28      	cmp	r3, #40	; 0x28
 800a652:	d003      	beq.n	800a65c <USBH_read+0x50>
 800a654:	2b3a      	cmp	r3, #58	; 0x3a
 800a656:	d001      	beq.n	800a65c <USBH_read+0x50>
 800a658:	2b04      	cmp	r3, #4
 800a65a:	d103      	bne.n	800a664 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a65c:	2303      	movs	r3, #3
 800a65e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 800a662:	e003      	b.n	800a66c <USBH_read+0x60>

    default:
      res = RES_ERROR;
 800a664:	2301      	movs	r3, #1
 800a666:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a66a:	bf00      	nop
    }
  }

  return res;
 800a66c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a670:	4618      	mov	r0, r3
 800a672:	3748      	adds	r7, #72	; 0x48
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	20001a68 	.word	0x20001a68

0800a67c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b094      	sub	sp, #80	; 0x50
 800a680:	af02      	add	r7, sp, #8
 800a682:	60b9      	str	r1, [r7, #8]
 800a684:	607a      	str	r2, [r7, #4]
 800a686:	603b      	str	r3, [r7, #0]
 800a688:	4603      	mov	r3, r0
 800a68a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800a692:	7bf9      	ldrb	r1, [r7, #15]
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	9300      	str	r3, [sp, #0]
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	4817      	ldr	r0, [pc, #92]	; (800a6fc <USBH_write+0x80>)
 800a69e:	f000 fe69 	bl	800b374 <USBH_MSC_Write>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d103      	bne.n	800a6b0 <USBH_write+0x34>
  {
    res = RES_OK;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a6ae:	e01f      	b.n	800a6f0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a6b0:	f107 0210 	add.w	r2, r7, #16
 800a6b4:	7bfb      	ldrb	r3, [r7, #15]
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	4810      	ldr	r0, [pc, #64]	; (800a6fc <USBH_write+0x80>)
 800a6ba:	f000 fdce 	bl	800b25a <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a6be:	7f7b      	ldrb	r3, [r7, #29]
 800a6c0:	2b27      	cmp	r3, #39	; 0x27
 800a6c2:	d009      	beq.n	800a6d8 <USBH_write+0x5c>
 800a6c4:	2b27      	cmp	r3, #39	; 0x27
 800a6c6:	dc02      	bgt.n	800a6ce <USBH_write+0x52>
 800a6c8:	2b04      	cmp	r3, #4
 800a6ca:	d009      	beq.n	800a6e0 <USBH_write+0x64>
 800a6cc:	e00c      	b.n	800a6e8 <USBH_write+0x6c>
 800a6ce:	2b28      	cmp	r3, #40	; 0x28
 800a6d0:	d006      	beq.n	800a6e0 <USBH_write+0x64>
 800a6d2:	2b3a      	cmp	r3, #58	; 0x3a
 800a6d4:	d004      	beq.n	800a6e0 <USBH_write+0x64>
 800a6d6:	e007      	b.n	800a6e8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800a6d8:	2302      	movs	r3, #2
 800a6da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a6de:	e007      	b.n	800a6f0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a6e0:	2303      	movs	r3, #3
 800a6e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a6e6:	e003      	b.n	800a6f0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a6ee:	bf00      	nop
    }
  }

  return res;
 800a6f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3748      	adds	r7, #72	; 0x48
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	20001a68 	.word	0x20001a68

0800a700 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b090      	sub	sp, #64	; 0x40
 800a704:	af00      	add	r7, sp, #0
 800a706:	4603      	mov	r3, r0
 800a708:	603a      	str	r2, [r7, #0]
 800a70a:	71fb      	strb	r3, [r7, #7]
 800a70c:	460b      	mov	r3, r1
 800a70e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a710:	2301      	movs	r3, #1
 800a712:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800a716:	79bb      	ldrb	r3, [r7, #6]
 800a718:	2b03      	cmp	r3, #3
 800a71a:	d852      	bhi.n	800a7c2 <USBH_ioctl+0xc2>
 800a71c:	a201      	add	r2, pc, #4	; (adr r2, 800a724 <USBH_ioctl+0x24>)
 800a71e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a722:	bf00      	nop
 800a724:	0800a735 	.word	0x0800a735
 800a728:	0800a73d 	.word	0x0800a73d
 800a72c:	0800a767 	.word	0x0800a767
 800a730:	0800a793 	.word	0x0800a793
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800a734:	2300      	movs	r3, #0
 800a736:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a73a:	e045      	b.n	800a7c8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a73c:	f107 0208 	add.w	r2, r7, #8
 800a740:	79fb      	ldrb	r3, [r7, #7]
 800a742:	4619      	mov	r1, r3
 800a744:	4823      	ldr	r0, [pc, #140]	; (800a7d4 <USBH_ioctl+0xd4>)
 800a746:	f000 fd88 	bl	800b25a <USBH_MSC_GetLUNInfo>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d106      	bne.n	800a75e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a756:	2300      	movs	r3, #0
 800a758:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a75c:	e034      	b.n	800a7c8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a764:	e030      	b.n	800a7c8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a766:	f107 0208 	add.w	r2, r7, #8
 800a76a:	79fb      	ldrb	r3, [r7, #7]
 800a76c:	4619      	mov	r1, r3
 800a76e:	4819      	ldr	r0, [pc, #100]	; (800a7d4 <USBH_ioctl+0xd4>)
 800a770:	f000 fd73 	bl	800b25a <USBH_MSC_GetLUNInfo>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d107      	bne.n	800a78a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800a77a:	8a3b      	ldrh	r3, [r7, #16]
 800a77c:	461a      	mov	r2, r3
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a782:	2300      	movs	r3, #0
 800a784:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a788:	e01e      	b.n	800a7c8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a790:	e01a      	b.n	800a7c8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a792:	f107 0208 	add.w	r2, r7, #8
 800a796:	79fb      	ldrb	r3, [r7, #7]
 800a798:	4619      	mov	r1, r3
 800a79a:	480e      	ldr	r0, [pc, #56]	; (800a7d4 <USBH_ioctl+0xd4>)
 800a79c:	f000 fd5d 	bl	800b25a <USBH_MSC_GetLUNInfo>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d109      	bne.n	800a7ba <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800a7a6:	8a3b      	ldrh	r3, [r7, #16]
 800a7a8:	0a5b      	lsrs	r3, r3, #9
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a7b8:	e006      	b.n	800a7c8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a7c0:	e002      	b.n	800a7c8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800a7c2:	2304      	movs	r3, #4
 800a7c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800a7c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3740      	adds	r7, #64	; 0x40
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	20001a68 	.word	0x20001a68

0800a7d8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a7d8:	b590      	push	{r4, r7, lr}
 800a7da:	b089      	sub	sp, #36	; 0x24
 800a7dc:	af04      	add	r7, sp, #16
 800a7de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7e6:	7919      	ldrb	r1, [r3, #4]
 800a7e8:	2350      	movs	r3, #80	; 0x50
 800a7ea:	2206      	movs	r2, #6
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f001 fc4f 	bl	800c090 <USBH_FindInterface>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800a7f6:	7bfb      	ldrb	r3, [r7, #15]
 800a7f8:	2bff      	cmp	r3, #255	; 0xff
 800a7fa:	d002      	beq.n	800a802 <USBH_MSC_InterfaceInit+0x2a>
 800a7fc:	7bfb      	ldrb	r3, [r7, #15]
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d901      	bls.n	800a806 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a802:	2302      	movs	r3, #2
 800a804:	e0ef      	b.n	800a9e6 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800a806:	7bfb      	ldrb	r3, [r7, #15]
 800a808:	4619      	mov	r1, r3
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f001 fc24 	bl	800c058 <USBH_SelectInterface>
 800a810:	4603      	mov	r3, r0
 800a812:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a814:	7bbb      	ldrb	r3, [r7, #14]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d001      	beq.n	800a81e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800a81a:	2302      	movs	r3, #2
 800a81c:	e0e3      	b.n	800a9e6 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a824:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a828:	f005 fd7e 	bl	8010328 <malloc>
 800a82c:	4603      	mov	r3, r0
 800a82e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a836:	69db      	ldr	r3, [r3, #28]
 800a838:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d101      	bne.n	800a844 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800a840:	2302      	movs	r3, #2
 800a842:	e0d0      	b.n	800a9e6 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800a844:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a848:	2100      	movs	r1, #0
 800a84a:	68b8      	ldr	r0, [r7, #8]
 800a84c:	f005 fd87 	bl	801035e <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a850:	7bfb      	ldrb	r3, [r7, #15]
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	211a      	movs	r1, #26
 800a856:	fb01 f303 	mul.w	r3, r1, r3
 800a85a:	4413      	add	r3, r2
 800a85c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	b25b      	sxtb	r3, r3
 800a864:	2b00      	cmp	r3, #0
 800a866:	da16      	bge.n	800a896 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a868:	7bfb      	ldrb	r3, [r7, #15]
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	211a      	movs	r1, #26
 800a86e:	fb01 f303 	mul.w	r3, r1, r3
 800a872:	4413      	add	r3, r2
 800a874:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a878:	781a      	ldrb	r2, [r3, #0]
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a87e:	7bfb      	ldrb	r3, [r7, #15]
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	211a      	movs	r1, #26
 800a884:	fb01 f303 	mul.w	r3, r1, r3
 800a888:	4413      	add	r3, r2
 800a88a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a88e:	881a      	ldrh	r2, [r3, #0]
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	815a      	strh	r2, [r3, #10]
 800a894:	e015      	b.n	800a8c2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a896:	7bfb      	ldrb	r3, [r7, #15]
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	211a      	movs	r1, #26
 800a89c:	fb01 f303 	mul.w	r3, r1, r3
 800a8a0:	4413      	add	r3, r2
 800a8a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a8a6:	781a      	ldrb	r2, [r3, #0]
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a8ac:	7bfb      	ldrb	r3, [r7, #15]
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	211a      	movs	r1, #26
 800a8b2:	fb01 f303 	mul.w	r3, r1, r3
 800a8b6:	4413      	add	r3, r2
 800a8b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a8bc:	881a      	ldrh	r2, [r3, #0]
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a8c2:	7bfb      	ldrb	r3, [r7, #15]
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	211a      	movs	r1, #26
 800a8c8:	fb01 f303 	mul.w	r3, r1, r3
 800a8cc:	4413      	add	r3, r2
 800a8ce:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	b25b      	sxtb	r3, r3
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	da16      	bge.n	800a908 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a8da:	7bfb      	ldrb	r3, [r7, #15]
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	211a      	movs	r1, #26
 800a8e0:	fb01 f303 	mul.w	r3, r1, r3
 800a8e4:	4413      	add	r3, r2
 800a8e6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a8ea:	781a      	ldrb	r2, [r3, #0]
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a8f0:	7bfb      	ldrb	r3, [r7, #15]
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	211a      	movs	r1, #26
 800a8f6:	fb01 f303 	mul.w	r3, r1, r3
 800a8fa:	4413      	add	r3, r2
 800a8fc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a900:	881a      	ldrh	r2, [r3, #0]
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	815a      	strh	r2, [r3, #10]
 800a906:	e015      	b.n	800a934 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a908:	7bfb      	ldrb	r3, [r7, #15]
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	211a      	movs	r1, #26
 800a90e:	fb01 f303 	mul.w	r3, r1, r3
 800a912:	4413      	add	r3, r2
 800a914:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a918:	781a      	ldrb	r2, [r3, #0]
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a91e:	7bfb      	ldrb	r3, [r7, #15]
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	211a      	movs	r1, #26
 800a924:	fb01 f303 	mul.w	r3, r1, r3
 800a928:	4413      	add	r3, r2
 800a92a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a92e:	881a      	ldrh	r2, [r3, #0]
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	2200      	movs	r2, #0
 800a938:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	2200      	movs	r2, #0
 800a93e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	2200      	movs	r2, #0
 800a944:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	799b      	ldrb	r3, [r3, #6]
 800a94a:	4619      	mov	r1, r3
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f002 fdc2 	bl	800d4d6 <USBH_AllocPipe>
 800a952:	4603      	mov	r3, r0
 800a954:	461a      	mov	r2, r3
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	79db      	ldrb	r3, [r3, #7]
 800a95e:	4619      	mov	r1, r3
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f002 fdb8 	bl	800d4d6 <USBH_AllocPipe>
 800a966:	4603      	mov	r3, r0
 800a968:	461a      	mov	r2, r3
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 fda4 	bl	800b4bc <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	7959      	ldrb	r1, [r3, #5]
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	7998      	ldrb	r0, [r3, #6]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a988:	68ba      	ldr	r2, [r7, #8]
 800a98a:	8912      	ldrh	r2, [r2, #8]
 800a98c:	9202      	str	r2, [sp, #8]
 800a98e:	2202      	movs	r2, #2
 800a990:	9201      	str	r2, [sp, #4]
 800a992:	9300      	str	r3, [sp, #0]
 800a994:	4623      	mov	r3, r4
 800a996:	4602      	mov	r2, r0
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f002 fd6d 	bl	800d478 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	7919      	ldrb	r1, [r3, #4]
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	79d8      	ldrb	r0, [r3, #7]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a9b2:	68ba      	ldr	r2, [r7, #8]
 800a9b4:	8952      	ldrh	r2, [r2, #10]
 800a9b6:	9202      	str	r2, [sp, #8]
 800a9b8:	2202      	movs	r2, #2
 800a9ba:	9201      	str	r2, [sp, #4]
 800a9bc:	9300      	str	r3, [sp, #0]
 800a9be:	4623      	mov	r3, r4
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f002 fd58 	bl	800d478 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	791b      	ldrb	r3, [r3, #4]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f005 fbe2 	bl	801019a <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	795b      	ldrb	r3, [r3, #5]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	4619      	mov	r1, r3
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f005 fbdb 	bl	801019a <USBH_LL_SetToggle>

  return USBH_OK;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3714      	adds	r7, #20
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd90      	pop	{r4, r7, pc}

0800a9ee <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b084      	sub	sp, #16
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9fc:	69db      	ldr	r3, [r3, #28]
 800a9fe:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	795b      	ldrb	r3, [r3, #5]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00e      	beq.n	800aa26 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	795b      	ldrb	r3, [r3, #5]
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f002 fd51 	bl	800d4b6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	795b      	ldrb	r3, [r3, #5]
 800aa18:	4619      	mov	r1, r3
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f002 fd7c 	bl	800d518 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2200      	movs	r2, #0
 800aa24:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	791b      	ldrb	r3, [r3, #4]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00e      	beq.n	800aa4c <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	791b      	ldrb	r3, [r3, #4]
 800aa32:	4619      	mov	r1, r3
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f002 fd3e 	bl	800d4b6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	791b      	ldrb	r3, [r3, #4]
 800aa3e:	4619      	mov	r1, r3
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f002 fd69 	bl	800d518 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa52:	69db      	ldr	r3, [r3, #28]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00b      	beq.n	800aa70 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa5e:	69db      	ldr	r3, [r3, #28]
 800aa60:	4618      	mov	r0, r3
 800aa62:	f005 fc69 	bl	8010338 <free>
    phost->pActiveClass->pData = 0U;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3710      	adds	r7, #16
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b084      	sub	sp, #16
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa88:	69db      	ldr	r3, [r3, #28]
 800aa8a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	7b9b      	ldrb	r3, [r3, #14]
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d004      	beq.n	800aaa2 <USBH_MSC_ClassRequest+0x28>
 800aa98:	2b03      	cmp	r3, #3
 800aa9a:	d03e      	beq.n	800ab1a <USBH_MSC_ClassRequest+0xa0>
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d000      	beq.n	800aaa2 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 800aaa0:	e04a      	b.n	800ab38 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 fcea 	bl	800b480 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800aaac:	4603      	mov	r3, r0
 800aaae:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 800aab0:	7bfb      	ldrb	r3, [r7, #15]
 800aab2:	2b03      	cmp	r3, #3
 800aab4:	d104      	bne.n	800aac0 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	2200      	movs	r2, #0
 800aaba:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800aabc:	2300      	movs	r3, #0
 800aabe:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 800aac0:	7bfb      	ldrb	r3, [r7, #15]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d135      	bne.n	800ab32 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	d804      	bhi.n	800aad8 <USBH_MSC_ClassRequest+0x5e>
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	3301      	adds	r3, #1
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	e000      	b.n	800aada <USBH_MSC_ClassRequest+0x60>
 800aad8:	2202      	movs	r2, #2
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800aade:	2300      	movs	r3, #0
 800aae0:	73bb      	strb	r3, [r7, #14]
 800aae2:	e014      	b.n	800ab0e <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800aae4:	7bbb      	ldrb	r3, [r7, #14]
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	2134      	movs	r1, #52	; 0x34
 800aaea:	fb01 f303 	mul.w	r3, r1, r3
 800aaee:	4413      	add	r3, r2
 800aaf0:	3392      	adds	r3, #146	; 0x92
 800aaf2:	2202      	movs	r2, #2
 800aaf4:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800aaf6:	7bbb      	ldrb	r3, [r7, #14]
 800aaf8:	68ba      	ldr	r2, [r7, #8]
 800aafa:	2134      	movs	r1, #52	; 0x34
 800aafc:	fb01 f303 	mul.w	r3, r1, r3
 800ab00:	4413      	add	r3, r2
 800ab02:	33c1      	adds	r3, #193	; 0xc1
 800ab04:	2200      	movs	r2, #0
 800ab06:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800ab08:	7bbb      	ldrb	r3, [r7, #14]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	73bb      	strb	r3, [r7, #14]
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	7bba      	ldrb	r2, [r7, #14]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d3e5      	bcc.n	800aae4 <USBH_MSC_ClassRequest+0x6a>
      break;
 800ab18:	e00b      	b.n	800ab32 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800ab1a:	2100      	movs	r1, #0
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f002 f878 	bl	800cc12 <USBH_ClrFeature>
 800ab22:	4603      	mov	r3, r0
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d106      	bne.n	800ab36 <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	7bda      	ldrb	r2, [r3, #15]
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	739a      	strb	r2, [r3, #14]
      break;
 800ab30:	e001      	b.n	800ab36 <USBH_MSC_ClassRequest+0xbc>
      break;
 800ab32:	bf00      	nop
 800ab34:	e000      	b.n	800ab38 <USBH_MSC_ClassRequest+0xbe>
      break;
 800ab36:	bf00      	nop
  }

  return status;
 800ab38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
	...

0800ab44 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b086      	sub	sp, #24
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab52:	69db      	ldr	r3, [r3, #28]
 800ab54:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800ab56:	2301      	movs	r3, #1
 800ab58:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	7b1b      	ldrb	r3, [r3, #12]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d003      	beq.n	800ab72 <USBH_MSC_Process+0x2e>
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	f000 8271 	beq.w	800b052 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800ab70:	e272      	b.n	800b058 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	f080 824f 	bcs.w	800b022 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	693a      	ldr	r2, [r7, #16]
 800ab8e:	2334      	movs	r3, #52	; 0x34
 800ab90:	fb03 f301 	mul.w	r3, r3, r1
 800ab94:	4413      	add	r3, r2
 800ab96:	3391      	adds	r3, #145	; 0x91
 800ab98:	2201      	movs	r2, #1
 800ab9a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aba2:	4619      	mov	r1, r3
 800aba4:	693a      	ldr	r2, [r7, #16]
 800aba6:	2334      	movs	r3, #52	; 0x34
 800aba8:	fb03 f301 	mul.w	r3, r3, r1
 800abac:	4413      	add	r3, r2
 800abae:	3390      	adds	r3, #144	; 0x90
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	2b08      	cmp	r3, #8
 800abb4:	f200 8243 	bhi.w	800b03e <USBH_MSC_Process+0x4fa>
 800abb8:	a201      	add	r2, pc, #4	; (adr r2, 800abc0 <USBH_MSC_Process+0x7c>)
 800abba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abbe:	bf00      	nop
 800abc0:	0800abe5 	.word	0x0800abe5
 800abc4:	0800b03f 	.word	0x0800b03f
 800abc8:	0800acad 	.word	0x0800acad
 800abcc:	0800ae31 	.word	0x0800ae31
 800abd0:	0800ac0b 	.word	0x0800ac0b
 800abd4:	0800aefd 	.word	0x0800aefd
 800abd8:	0800b03f 	.word	0x0800b03f
 800abdc:	0800b03f 	.word	0x0800b03f
 800abe0:	0800b011 	.word	0x0800b011
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800abea:	4619      	mov	r1, r3
 800abec:	693a      	ldr	r2, [r7, #16]
 800abee:	2334      	movs	r3, #52	; 0x34
 800abf0:	fb03 f301 	mul.w	r3, r3, r1
 800abf4:	4413      	add	r3, r2
 800abf6:	3390      	adds	r3, #144	; 0x90
 800abf8:	2204      	movs	r2, #4
 800abfa:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800ac08:	e222      	b.n	800b050 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac10:	b2d9      	uxtb	r1, r3
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac18:	461a      	mov	r2, r3
 800ac1a:	2334      	movs	r3, #52	; 0x34
 800ac1c:	fb03 f302 	mul.w	r3, r3, r2
 800ac20:	3398      	adds	r3, #152	; 0x98
 800ac22:	693a      	ldr	r2, [r7, #16]
 800ac24:	4413      	add	r3, r2
 800ac26:	3307      	adds	r3, #7
 800ac28:	461a      	mov	r2, r3
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 ff68 	bl	800bb00 <USBH_MSC_SCSI_Inquiry>
 800ac30:	4603      	mov	r3, r0
 800ac32:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800ac34:	7bfb      	ldrb	r3, [r7, #15]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d10b      	bne.n	800ac52 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac40:	4619      	mov	r1, r3
 800ac42:	693a      	ldr	r2, [r7, #16]
 800ac44:	2334      	movs	r3, #52	; 0x34
 800ac46:	fb03 f301 	mul.w	r3, r3, r1
 800ac4a:	4413      	add	r3, r2
 800ac4c:	3390      	adds	r3, #144	; 0x90
 800ac4e:	2202      	movs	r2, #2
 800ac50:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800ac52:	7bfb      	ldrb	r3, [r7, #15]
 800ac54:	2b02      	cmp	r3, #2
 800ac56:	d10c      	bne.n	800ac72 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac5e:	4619      	mov	r1, r3
 800ac60:	693a      	ldr	r2, [r7, #16]
 800ac62:	2334      	movs	r3, #52	; 0x34
 800ac64:	fb03 f301 	mul.w	r3, r3, r1
 800ac68:	4413      	add	r3, r2
 800ac6a:	3390      	adds	r3, #144	; 0x90
 800ac6c:	2205      	movs	r2, #5
 800ac6e:	701a      	strb	r2, [r3, #0]
            break;
 800ac70:	e1e7      	b.n	800b042 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ac72:	7bfb      	ldrb	r3, [r7, #15]
 800ac74:	2b04      	cmp	r3, #4
 800ac76:	f040 81e4 	bne.w	800b042 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac80:	4619      	mov	r1, r3
 800ac82:	693a      	ldr	r2, [r7, #16]
 800ac84:	2334      	movs	r3, #52	; 0x34
 800ac86:	fb03 f301 	mul.w	r3, r3, r1
 800ac8a:	4413      	add	r3, r2
 800ac8c:	3390      	adds	r3, #144	; 0x90
 800ac8e:	2201      	movs	r2, #1
 800ac90:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac98:	4619      	mov	r1, r3
 800ac9a:	693a      	ldr	r2, [r7, #16]
 800ac9c:	2334      	movs	r3, #52	; 0x34
 800ac9e:	fb03 f301 	mul.w	r3, r3, r1
 800aca2:	4413      	add	r3, r2
 800aca4:	3391      	adds	r3, #145	; 0x91
 800aca6:	2202      	movs	r2, #2
 800aca8:	701a      	strb	r2, [r3, #0]
            break;
 800acaa:	e1ca      	b.n	800b042 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	4619      	mov	r1, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 fe64 	bl	800b984 <USBH_MSC_SCSI_TestUnitReady>
 800acbc:	4603      	mov	r3, r0
 800acbe:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800acc0:	7bbb      	ldrb	r3, [r7, #14]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d149      	bne.n	800ad5a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800accc:	4619      	mov	r1, r3
 800acce:	693a      	ldr	r2, [r7, #16]
 800acd0:	2334      	movs	r3, #52	; 0x34
 800acd2:	fb03 f301 	mul.w	r3, r3, r1
 800acd6:	4413      	add	r3, r2
 800acd8:	3392      	adds	r3, #146	; 0x92
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d00c      	beq.n	800acfa <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ace6:	4619      	mov	r1, r3
 800ace8:	693a      	ldr	r2, [r7, #16]
 800acea:	2334      	movs	r3, #52	; 0x34
 800acec:	fb03 f301 	mul.w	r3, r3, r1
 800acf0:	4413      	add	r3, r2
 800acf2:	33c1      	adds	r3, #193	; 0xc1
 800acf4:	2201      	movs	r2, #1
 800acf6:	701a      	strb	r2, [r3, #0]
 800acf8:	e00b      	b.n	800ad12 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ad00:	4619      	mov	r1, r3
 800ad02:	693a      	ldr	r2, [r7, #16]
 800ad04:	2334      	movs	r3, #52	; 0x34
 800ad06:	fb03 f301 	mul.w	r3, r3, r1
 800ad0a:	4413      	add	r3, r2
 800ad0c:	33c1      	adds	r3, #193	; 0xc1
 800ad0e:	2200      	movs	r2, #0
 800ad10:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ad18:	4619      	mov	r1, r3
 800ad1a:	693a      	ldr	r2, [r7, #16]
 800ad1c:	2334      	movs	r3, #52	; 0x34
 800ad1e:	fb03 f301 	mul.w	r3, r3, r1
 800ad22:	4413      	add	r3, r2
 800ad24:	3390      	adds	r3, #144	; 0x90
 800ad26:	2203      	movs	r2, #3
 800ad28:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ad30:	4619      	mov	r1, r3
 800ad32:	693a      	ldr	r2, [r7, #16]
 800ad34:	2334      	movs	r3, #52	; 0x34
 800ad36:	fb03 f301 	mul.w	r3, r3, r1
 800ad3a:	4413      	add	r3, r2
 800ad3c:	3391      	adds	r3, #145	; 0x91
 800ad3e:	2200      	movs	r2, #0
 800ad40:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ad48:	4619      	mov	r1, r3
 800ad4a:	693a      	ldr	r2, [r7, #16]
 800ad4c:	2334      	movs	r3, #52	; 0x34
 800ad4e:	fb03 f301 	mul.w	r3, r3, r1
 800ad52:	4413      	add	r3, r2
 800ad54:	3392      	adds	r3, #146	; 0x92
 800ad56:	2200      	movs	r2, #0
 800ad58:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800ad5a:	7bbb      	ldrb	r3, [r7, #14]
 800ad5c:	2b02      	cmp	r3, #2
 800ad5e:	d14a      	bne.n	800adf6 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ad66:	4619      	mov	r1, r3
 800ad68:	693a      	ldr	r2, [r7, #16]
 800ad6a:	2334      	movs	r3, #52	; 0x34
 800ad6c:	fb03 f301 	mul.w	r3, r3, r1
 800ad70:	4413      	add	r3, r2
 800ad72:	3392      	adds	r3, #146	; 0x92
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	2b02      	cmp	r3, #2
 800ad78:	d00c      	beq.n	800ad94 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ad80:	4619      	mov	r1, r3
 800ad82:	693a      	ldr	r2, [r7, #16]
 800ad84:	2334      	movs	r3, #52	; 0x34
 800ad86:	fb03 f301 	mul.w	r3, r3, r1
 800ad8a:	4413      	add	r3, r2
 800ad8c:	33c1      	adds	r3, #193	; 0xc1
 800ad8e:	2201      	movs	r2, #1
 800ad90:	701a      	strb	r2, [r3, #0]
 800ad92:	e00b      	b.n	800adac <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	693a      	ldr	r2, [r7, #16]
 800ad9e:	2334      	movs	r3, #52	; 0x34
 800ada0:	fb03 f301 	mul.w	r3, r3, r1
 800ada4:	4413      	add	r3, r2
 800ada6:	33c1      	adds	r3, #193	; 0xc1
 800ada8:	2200      	movs	r2, #0
 800adaa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800adb2:	4619      	mov	r1, r3
 800adb4:	693a      	ldr	r2, [r7, #16]
 800adb6:	2334      	movs	r3, #52	; 0x34
 800adb8:	fb03 f301 	mul.w	r3, r3, r1
 800adbc:	4413      	add	r3, r2
 800adbe:	3390      	adds	r3, #144	; 0x90
 800adc0:	2205      	movs	r2, #5
 800adc2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800adca:	4619      	mov	r1, r3
 800adcc:	693a      	ldr	r2, [r7, #16]
 800adce:	2334      	movs	r3, #52	; 0x34
 800add0:	fb03 f301 	mul.w	r3, r3, r1
 800add4:	4413      	add	r3, r2
 800add6:	3391      	adds	r3, #145	; 0x91
 800add8:	2201      	movs	r2, #1
 800adda:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ade2:	4619      	mov	r1, r3
 800ade4:	693a      	ldr	r2, [r7, #16]
 800ade6:	2334      	movs	r3, #52	; 0x34
 800ade8:	fb03 f301 	mul.w	r3, r3, r1
 800adec:	4413      	add	r3, r2
 800adee:	3392      	adds	r3, #146	; 0x92
 800adf0:	2202      	movs	r2, #2
 800adf2:	701a      	strb	r2, [r3, #0]
            break;
 800adf4:	e127      	b.n	800b046 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800adf6:	7bbb      	ldrb	r3, [r7, #14]
 800adf8:	2b04      	cmp	r3, #4
 800adfa:	f040 8124 	bne.w	800b046 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae04:	4619      	mov	r1, r3
 800ae06:	693a      	ldr	r2, [r7, #16]
 800ae08:	2334      	movs	r3, #52	; 0x34
 800ae0a:	fb03 f301 	mul.w	r3, r3, r1
 800ae0e:	4413      	add	r3, r2
 800ae10:	3390      	adds	r3, #144	; 0x90
 800ae12:	2201      	movs	r2, #1
 800ae14:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	693a      	ldr	r2, [r7, #16]
 800ae20:	2334      	movs	r3, #52	; 0x34
 800ae22:	fb03 f301 	mul.w	r3, r3, r1
 800ae26:	4413      	add	r3, r2
 800ae28:	3391      	adds	r3, #145	; 0x91
 800ae2a:	2202      	movs	r2, #2
 800ae2c:	701a      	strb	r2, [r3, #0]
            break;
 800ae2e:	e10a      	b.n	800b046 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae36:	b2d9      	uxtb	r1, r3
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae3e:	461a      	mov	r2, r3
 800ae40:	2334      	movs	r3, #52	; 0x34
 800ae42:	fb03 f302 	mul.w	r3, r3, r2
 800ae46:	3390      	adds	r3, #144	; 0x90
 800ae48:	693a      	ldr	r2, [r7, #16]
 800ae4a:	4413      	add	r3, r2
 800ae4c:	3304      	adds	r3, #4
 800ae4e:	461a      	mov	r2, r3
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 fdda 	bl	800ba0a <USBH_MSC_SCSI_ReadCapacity>
 800ae56:	4603      	mov	r3, r0
 800ae58:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800ae5a:	7bfb      	ldrb	r3, [r7, #15]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d120      	bne.n	800aea2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae66:	4619      	mov	r1, r3
 800ae68:	693a      	ldr	r2, [r7, #16]
 800ae6a:	2334      	movs	r3, #52	; 0x34
 800ae6c:	fb03 f301 	mul.w	r3, r3, r1
 800ae70:	4413      	add	r3, r2
 800ae72:	3390      	adds	r3, #144	; 0x90
 800ae74:	2201      	movs	r2, #1
 800ae76:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae7e:	4619      	mov	r1, r3
 800ae80:	693a      	ldr	r2, [r7, #16]
 800ae82:	2334      	movs	r3, #52	; 0x34
 800ae84:	fb03 f301 	mul.w	r3, r3, r1
 800ae88:	4413      	add	r3, r2
 800ae8a:	3391      	adds	r3, #145	; 0x91
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae96:	3301      	adds	r3, #1
 800ae98:	b29a      	uxth	r2, r3
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800aea0:	e0d3      	b.n	800b04a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800aea2:	7bfb      	ldrb	r3, [r7, #15]
 800aea4:	2b02      	cmp	r3, #2
 800aea6:	d10c      	bne.n	800aec2 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aeae:	4619      	mov	r1, r3
 800aeb0:	693a      	ldr	r2, [r7, #16]
 800aeb2:	2334      	movs	r3, #52	; 0x34
 800aeb4:	fb03 f301 	mul.w	r3, r3, r1
 800aeb8:	4413      	add	r3, r2
 800aeba:	3390      	adds	r3, #144	; 0x90
 800aebc:	2205      	movs	r2, #5
 800aebe:	701a      	strb	r2, [r3, #0]
            break;
 800aec0:	e0c3      	b.n	800b04a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800aec2:	7bfb      	ldrb	r3, [r7, #15]
 800aec4:	2b04      	cmp	r3, #4
 800aec6:	f040 80c0 	bne.w	800b04a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aed0:	4619      	mov	r1, r3
 800aed2:	693a      	ldr	r2, [r7, #16]
 800aed4:	2334      	movs	r3, #52	; 0x34
 800aed6:	fb03 f301 	mul.w	r3, r3, r1
 800aeda:	4413      	add	r3, r2
 800aedc:	3390      	adds	r3, #144	; 0x90
 800aede:	2201      	movs	r2, #1
 800aee0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aee8:	4619      	mov	r1, r3
 800aeea:	693a      	ldr	r2, [r7, #16]
 800aeec:	2334      	movs	r3, #52	; 0x34
 800aeee:	fb03 f301 	mul.w	r3, r3, r1
 800aef2:	4413      	add	r3, r2
 800aef4:	3391      	adds	r3, #145	; 0x91
 800aef6:	2202      	movs	r2, #2
 800aef8:	701a      	strb	r2, [r3, #0]
            break;
 800aefa:	e0a6      	b.n	800b04a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af02:	b2d9      	uxtb	r1, r3
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af0a:	461a      	mov	r2, r3
 800af0c:	2334      	movs	r3, #52	; 0x34
 800af0e:	fb03 f302 	mul.w	r3, r3, r2
 800af12:	3398      	adds	r3, #152	; 0x98
 800af14:	693a      	ldr	r2, [r7, #16]
 800af16:	4413      	add	r3, r2
 800af18:	3304      	adds	r3, #4
 800af1a:	461a      	mov	r2, r3
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f000 fe94 	bl	800bc4a <USBH_MSC_SCSI_RequestSense>
 800af22:	4603      	mov	r3, r0
 800af24:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800af26:	7bfb      	ldrb	r3, [r7, #15]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d145      	bne.n	800afb8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af32:	4619      	mov	r1, r3
 800af34:	693a      	ldr	r2, [r7, #16]
 800af36:	2334      	movs	r3, #52	; 0x34
 800af38:	fb03 f301 	mul.w	r3, r3, r1
 800af3c:	4413      	add	r3, r2
 800af3e:	339c      	adds	r3, #156	; 0x9c
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	2b06      	cmp	r3, #6
 800af44:	d00c      	beq.n	800af60 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af4c:	4619      	mov	r1, r3
 800af4e:	693a      	ldr	r2, [r7, #16]
 800af50:	2334      	movs	r3, #52	; 0x34
 800af52:	fb03 f301 	mul.w	r3, r3, r1
 800af56:	4413      	add	r3, r2
 800af58:	339c      	adds	r3, #156	; 0x9c
 800af5a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	d117      	bne.n	800af90 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800af6c:	1ad3      	subs	r3, r2, r3
 800af6e:	f242 720f 	movw	r2, #9999	; 0x270f
 800af72:	4293      	cmp	r3, r2
 800af74:	d80c      	bhi.n	800af90 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af7c:	4619      	mov	r1, r3
 800af7e:	693a      	ldr	r2, [r7, #16]
 800af80:	2334      	movs	r3, #52	; 0x34
 800af82:	fb03 f301 	mul.w	r3, r3, r1
 800af86:	4413      	add	r3, r2
 800af88:	3390      	adds	r3, #144	; 0x90
 800af8a:	2202      	movs	r2, #2
 800af8c:	701a      	strb	r2, [r3, #0]
                  break;
 800af8e:	e05f      	b.n	800b050 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af96:	4619      	mov	r1, r3
 800af98:	693a      	ldr	r2, [r7, #16]
 800af9a:	2334      	movs	r3, #52	; 0x34
 800af9c:	fb03 f301 	mul.w	r3, r3, r1
 800afa0:	4413      	add	r3, r2
 800afa2:	3390      	adds	r3, #144	; 0x90
 800afa4:	2201      	movs	r2, #1
 800afa6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afae:	3301      	adds	r3, #1
 800afb0:	b29a      	uxth	r2, r3
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800afb8:	7bfb      	ldrb	r3, [r7, #15]
 800afba:	2b02      	cmp	r3, #2
 800afbc:	d10c      	bne.n	800afd8 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afc4:	4619      	mov	r1, r3
 800afc6:	693a      	ldr	r2, [r7, #16]
 800afc8:	2334      	movs	r3, #52	; 0x34
 800afca:	fb03 f301 	mul.w	r3, r3, r1
 800afce:	4413      	add	r3, r2
 800afd0:	3390      	adds	r3, #144	; 0x90
 800afd2:	2208      	movs	r2, #8
 800afd4:	701a      	strb	r2, [r3, #0]
            break;
 800afd6:	e03a      	b.n	800b04e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800afd8:	7bfb      	ldrb	r3, [r7, #15]
 800afda:	2b04      	cmp	r3, #4
 800afdc:	d137      	bne.n	800b04e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afe4:	4619      	mov	r1, r3
 800afe6:	693a      	ldr	r2, [r7, #16]
 800afe8:	2334      	movs	r3, #52	; 0x34
 800afea:	fb03 f301 	mul.w	r3, r3, r1
 800afee:	4413      	add	r3, r2
 800aff0:	3390      	adds	r3, #144	; 0x90
 800aff2:	2201      	movs	r2, #1
 800aff4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800affc:	4619      	mov	r1, r3
 800affe:	693a      	ldr	r2, [r7, #16]
 800b000:	2334      	movs	r3, #52	; 0x34
 800b002:	fb03 f301 	mul.w	r3, r3, r1
 800b006:	4413      	add	r3, r2
 800b008:	3391      	adds	r3, #145	; 0x91
 800b00a:	2202      	movs	r2, #2
 800b00c:	701a      	strb	r2, [r3, #0]
            break;
 800b00e:	e01e      	b.n	800b04e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b016:	3301      	adds	r3, #1
 800b018:	b29a      	uxth	r2, r3
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b020:	e016      	b.n	800b050 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	2200      	movs	r2, #0
 800b026:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	2201      	movs	r2, #1
 800b02e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b036:	2102      	movs	r1, #2
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	4798      	blx	r3
      break;
 800b03c:	e00c      	b.n	800b058 <USBH_MSC_Process+0x514>
            break;
 800b03e:	bf00      	nop
 800b040:	e00a      	b.n	800b058 <USBH_MSC_Process+0x514>
            break;
 800b042:	bf00      	nop
 800b044:	e008      	b.n	800b058 <USBH_MSC_Process+0x514>
            break;
 800b046:	bf00      	nop
 800b048:	e006      	b.n	800b058 <USBH_MSC_Process+0x514>
            break;
 800b04a:	bf00      	nop
 800b04c:	e004      	b.n	800b058 <USBH_MSC_Process+0x514>
            break;
 800b04e:	bf00      	nop
      break;
 800b050:	e002      	b.n	800b058 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800b052:	2300      	movs	r3, #0
 800b054:	75fb      	strb	r3, [r7, #23]
      break;
 800b056:	bf00      	nop
  }
  return error;
 800b058:	7dfb      	ldrb	r3, [r7, #23]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3718      	adds	r7, #24
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop

0800b064 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b06c:	2300      	movs	r3, #0
}
 800b06e:	4618      	mov	r0, r3
 800b070:	370c      	adds	r7, #12
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr

0800b07a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b088      	sub	sp, #32
 800b07e:	af02      	add	r7, sp, #8
 800b080:	6078      	str	r0, [r7, #4]
 800b082:	460b      	mov	r3, r1
 800b084:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b08c:	69db      	ldr	r3, [r3, #28]
 800b08e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800b090:	2301      	movs	r3, #1
 800b092:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800b094:	2301      	movs	r3, #1
 800b096:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800b098:	78fb      	ldrb	r3, [r7, #3]
 800b09a:	693a      	ldr	r2, [r7, #16]
 800b09c:	2134      	movs	r1, #52	; 0x34
 800b09e:	fb01 f303 	mul.w	r3, r1, r3
 800b0a2:	4413      	add	r3, r2
 800b0a4:	3390      	adds	r3, #144	; 0x90
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	2b06      	cmp	r3, #6
 800b0aa:	d004      	beq.n	800b0b6 <USBH_MSC_RdWrProcess+0x3c>
 800b0ac:	2b07      	cmp	r3, #7
 800b0ae:	d037      	beq.n	800b120 <USBH_MSC_RdWrProcess+0xa6>
 800b0b0:	2b05      	cmp	r3, #5
 800b0b2:	d06a      	beq.n	800b18a <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 800b0b4:	e0a6      	b.n	800b204 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800b0b6:	78f9      	ldrb	r1, [r7, #3]
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	9300      	str	r3, [sp, #0]
 800b0bc:	2300      	movs	r3, #0
 800b0be:	2200      	movs	r2, #0
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 fea6 	bl	800be12 <USBH_MSC_SCSI_Read>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800b0ca:	7bfb      	ldrb	r3, [r7, #15]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d10b      	bne.n	800b0e8 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b0d0:	78fb      	ldrb	r3, [r7, #3]
 800b0d2:	693a      	ldr	r2, [r7, #16]
 800b0d4:	2134      	movs	r1, #52	; 0x34
 800b0d6:	fb01 f303 	mul.w	r3, r1, r3
 800b0da:	4413      	add	r3, r2
 800b0dc:	3390      	adds	r3, #144	; 0x90
 800b0de:	2201      	movs	r2, #1
 800b0e0:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	75fb      	strb	r3, [r7, #23]
      break;
 800b0e6:	e088      	b.n	800b1fa <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 800b0e8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ea:	2b02      	cmp	r3, #2
 800b0ec:	d109      	bne.n	800b102 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b0ee:	78fb      	ldrb	r3, [r7, #3]
 800b0f0:	693a      	ldr	r2, [r7, #16]
 800b0f2:	2134      	movs	r1, #52	; 0x34
 800b0f4:	fb01 f303 	mul.w	r3, r1, r3
 800b0f8:	4413      	add	r3, r2
 800b0fa:	3390      	adds	r3, #144	; 0x90
 800b0fc:	2205      	movs	r2, #5
 800b0fe:	701a      	strb	r2, [r3, #0]
      break;
 800b100:	e07b      	b.n	800b1fa <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b102:	7bfb      	ldrb	r3, [r7, #15]
 800b104:	2b04      	cmp	r3, #4
 800b106:	d178      	bne.n	800b1fa <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b108:	78fb      	ldrb	r3, [r7, #3]
 800b10a:	693a      	ldr	r2, [r7, #16]
 800b10c:	2134      	movs	r1, #52	; 0x34
 800b10e:	fb01 f303 	mul.w	r3, r1, r3
 800b112:	4413      	add	r3, r2
 800b114:	3390      	adds	r3, #144	; 0x90
 800b116:	2208      	movs	r2, #8
 800b118:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b11a:	2302      	movs	r3, #2
 800b11c:	75fb      	strb	r3, [r7, #23]
      break;
 800b11e:	e06c      	b.n	800b1fa <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800b120:	78f9      	ldrb	r1, [r7, #3]
 800b122:	2300      	movs	r3, #0
 800b124:	9300      	str	r3, [sp, #0]
 800b126:	2300      	movs	r3, #0
 800b128:	2200      	movs	r2, #0
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 fe06 	bl	800bd3c <USBH_MSC_SCSI_Write>
 800b130:	4603      	mov	r3, r0
 800b132:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800b134:	7bfb      	ldrb	r3, [r7, #15]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d10b      	bne.n	800b152 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b13a:	78fb      	ldrb	r3, [r7, #3]
 800b13c:	693a      	ldr	r2, [r7, #16]
 800b13e:	2134      	movs	r1, #52	; 0x34
 800b140:	fb01 f303 	mul.w	r3, r1, r3
 800b144:	4413      	add	r3, r2
 800b146:	3390      	adds	r3, #144	; 0x90
 800b148:	2201      	movs	r2, #1
 800b14a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b14c:	2300      	movs	r3, #0
 800b14e:	75fb      	strb	r3, [r7, #23]
      break;
 800b150:	e055      	b.n	800b1fe <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 800b152:	7bfb      	ldrb	r3, [r7, #15]
 800b154:	2b02      	cmp	r3, #2
 800b156:	d109      	bne.n	800b16c <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b158:	78fb      	ldrb	r3, [r7, #3]
 800b15a:	693a      	ldr	r2, [r7, #16]
 800b15c:	2134      	movs	r1, #52	; 0x34
 800b15e:	fb01 f303 	mul.w	r3, r1, r3
 800b162:	4413      	add	r3, r2
 800b164:	3390      	adds	r3, #144	; 0x90
 800b166:	2205      	movs	r2, #5
 800b168:	701a      	strb	r2, [r3, #0]
      break;
 800b16a:	e048      	b.n	800b1fe <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b16c:	7bfb      	ldrb	r3, [r7, #15]
 800b16e:	2b04      	cmp	r3, #4
 800b170:	d145      	bne.n	800b1fe <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b172:	78fb      	ldrb	r3, [r7, #3]
 800b174:	693a      	ldr	r2, [r7, #16]
 800b176:	2134      	movs	r1, #52	; 0x34
 800b178:	fb01 f303 	mul.w	r3, r1, r3
 800b17c:	4413      	add	r3, r2
 800b17e:	3390      	adds	r3, #144	; 0x90
 800b180:	2208      	movs	r2, #8
 800b182:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b184:	2302      	movs	r3, #2
 800b186:	75fb      	strb	r3, [r7, #23]
      break;
 800b188:	e039      	b.n	800b1fe <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800b18a:	78fb      	ldrb	r3, [r7, #3]
 800b18c:	2234      	movs	r2, #52	; 0x34
 800b18e:	fb02 f303 	mul.w	r3, r2, r3
 800b192:	3398      	adds	r3, #152	; 0x98
 800b194:	693a      	ldr	r2, [r7, #16]
 800b196:	4413      	add	r3, r2
 800b198:	1d1a      	adds	r2, r3, #4
 800b19a:	78fb      	ldrb	r3, [r7, #3]
 800b19c:	4619      	mov	r1, r3
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 fd53 	bl	800bc4a <USBH_MSC_SCSI_RequestSense>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800b1a8:	7bfb      	ldrb	r3, [r7, #15]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d113      	bne.n	800b1d6 <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b1ae:	78fb      	ldrb	r3, [r7, #3]
 800b1b0:	693a      	ldr	r2, [r7, #16]
 800b1b2:	2134      	movs	r1, #52	; 0x34
 800b1b4:	fb01 f303 	mul.w	r3, r1, r3
 800b1b8:	4413      	add	r3, r2
 800b1ba:	3390      	adds	r3, #144	; 0x90
 800b1bc:	2201      	movs	r2, #1
 800b1be:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800b1c0:	78fb      	ldrb	r3, [r7, #3]
 800b1c2:	693a      	ldr	r2, [r7, #16]
 800b1c4:	2134      	movs	r1, #52	; 0x34
 800b1c6:	fb01 f303 	mul.w	r3, r1, r3
 800b1ca:	4413      	add	r3, r2
 800b1cc:	3391      	adds	r3, #145	; 0x91
 800b1ce:	2202      	movs	r2, #2
 800b1d0:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 800b1d2:	2302      	movs	r3, #2
 800b1d4:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 800b1d6:	7bfb      	ldrb	r3, [r7, #15]
 800b1d8:	2b02      	cmp	r3, #2
 800b1da:	d012      	beq.n	800b202 <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b1dc:	7bfb      	ldrb	r3, [r7, #15]
 800b1de:	2b04      	cmp	r3, #4
 800b1e0:	d10f      	bne.n	800b202 <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b1e2:	78fb      	ldrb	r3, [r7, #3]
 800b1e4:	693a      	ldr	r2, [r7, #16]
 800b1e6:	2134      	movs	r1, #52	; 0x34
 800b1e8:	fb01 f303 	mul.w	r3, r1, r3
 800b1ec:	4413      	add	r3, r2
 800b1ee:	3390      	adds	r3, #144	; 0x90
 800b1f0:	2208      	movs	r2, #8
 800b1f2:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b1f4:	2302      	movs	r3, #2
 800b1f6:	75fb      	strb	r3, [r7, #23]
      break;
 800b1f8:	e003      	b.n	800b202 <USBH_MSC_RdWrProcess+0x188>
      break;
 800b1fa:	bf00      	nop
 800b1fc:	e002      	b.n	800b204 <USBH_MSC_RdWrProcess+0x18a>
      break;
 800b1fe:	bf00      	nop
 800b200:	e000      	b.n	800b204 <USBH_MSC_RdWrProcess+0x18a>
      break;
 800b202:	bf00      	nop

  }
  return error;
 800b204:	7dfb      	ldrb	r3, [r7, #23]
}
 800b206:	4618      	mov	r0, r3
 800b208:	3718      	adds	r7, #24
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b20e:	b480      	push	{r7}
 800b210:	b085      	sub	sp, #20
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
 800b216:	460b      	mov	r3, r1
 800b218:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b220:	69db      	ldr	r3, [r3, #28]
 800b222:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	b2db      	uxtb	r3, r3
 800b22a:	2b0b      	cmp	r3, #11
 800b22c:	d10c      	bne.n	800b248 <USBH_MSC_UnitIsReady+0x3a>
 800b22e:	78fb      	ldrb	r3, [r7, #3]
 800b230:	68ba      	ldr	r2, [r7, #8]
 800b232:	2134      	movs	r1, #52	; 0x34
 800b234:	fb01 f303 	mul.w	r3, r1, r3
 800b238:	4413      	add	r3, r2
 800b23a:	3391      	adds	r3, #145	; 0x91
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d102      	bne.n	800b248 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800b242:	2301      	movs	r3, #1
 800b244:	73fb      	strb	r3, [r7, #15]
 800b246:	e001      	b.n	800b24c <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800b248:	2300      	movs	r3, #0
 800b24a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800b24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3714      	adds	r7, #20
 800b252:	46bd      	mov	sp, r7
 800b254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b258:	4770      	bx	lr

0800b25a <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b086      	sub	sp, #24
 800b25e:	af00      	add	r7, sp, #0
 800b260:	60f8      	str	r0, [r7, #12]
 800b262:	460b      	mov	r3, r1
 800b264:	607a      	str	r2, [r7, #4]
 800b266:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b26e:	69db      	ldr	r3, [r3, #28]
 800b270:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	b2db      	uxtb	r3, r3
 800b278:	2b0b      	cmp	r3, #11
 800b27a:	d10d      	bne.n	800b298 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800b27c:	7afb      	ldrb	r3, [r7, #11]
 800b27e:	2234      	movs	r2, #52	; 0x34
 800b280:	fb02 f303 	mul.w	r3, r2, r3
 800b284:	3390      	adds	r3, #144	; 0x90
 800b286:	697a      	ldr	r2, [r7, #20]
 800b288:	4413      	add	r3, r2
 800b28a:	2234      	movs	r2, #52	; 0x34
 800b28c:	4619      	mov	r1, r3
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f005 f85a 	bl	8010348 <memcpy>
    return USBH_OK;
 800b294:	2300      	movs	r3, #0
 800b296:	e000      	b.n	800b29a <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800b298:	2302      	movs	r3, #2
  }
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3718      	adds	r7, #24
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b088      	sub	sp, #32
 800b2a6:	af02      	add	r7, sp, #8
 800b2a8:	60f8      	str	r0, [r7, #12]
 800b2aa:	607a      	str	r2, [r7, #4]
 800b2ac:	603b      	str	r3, [r7, #0]
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2b8:	69db      	ldr	r3, [r3, #28]
 800b2ba:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b2c2:	b2db      	uxtb	r3, r3
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d00e      	beq.n	800b2e6 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800b2ce:	2b0b      	cmp	r3, #11
 800b2d0:	d109      	bne.n	800b2e6 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800b2d2:	7afb      	ldrb	r3, [r7, #11]
 800b2d4:	697a      	ldr	r2, [r7, #20]
 800b2d6:	2134      	movs	r1, #52	; 0x34
 800b2d8:	fb01 f303 	mul.w	r3, r1, r3
 800b2dc:	4413      	add	r3, r2
 800b2de:	3390      	adds	r3, #144	; 0x90
 800b2e0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d001      	beq.n	800b2ea <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800b2e6:	2302      	movs	r3, #2
 800b2e8:	e040      	b.n	800b36c <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	2206      	movs	r2, #6
 800b2ee:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800b2f0:	7afb      	ldrb	r3, [r7, #11]
 800b2f2:	697a      	ldr	r2, [r7, #20]
 800b2f4:	2134      	movs	r1, #52	; 0x34
 800b2f6:	fb01 f303 	mul.w	r3, r1, r3
 800b2fa:	4413      	add	r3, r2
 800b2fc:	3390      	adds	r3, #144	; 0x90
 800b2fe:	2206      	movs	r2, #6
 800b300:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800b302:	7afb      	ldrb	r3, [r7, #11]
 800b304:	b29a      	uxth	r2, r3
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800b30c:	7af9      	ldrb	r1, [r7, #11]
 800b30e:	6a3b      	ldr	r3, [r7, #32]
 800b310:	9300      	str	r3, [sp, #0]
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	f000 fd7b 	bl	800be12 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b322:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b324:	e016      	b.n	800b354 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	1ad2      	subs	r2, r2, r3
 800b330:	6a3b      	ldr	r3, [r7, #32]
 800b332:	f242 7110 	movw	r1, #10000	; 0x2710
 800b336:	fb01 f303 	mul.w	r3, r1, r3
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d805      	bhi.n	800b34a <USBH_MSC_Read+0xa8>
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b344:	b2db      	uxtb	r3, r3
 800b346:	2b00      	cmp	r3, #0
 800b348:	d104      	bne.n	800b354 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	2201      	movs	r2, #1
 800b34e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800b350:	2302      	movs	r3, #2
 800b352:	e00b      	b.n	800b36c <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b354:	7afb      	ldrb	r3, [r7, #11]
 800b356:	4619      	mov	r1, r3
 800b358:	68f8      	ldr	r0, [r7, #12]
 800b35a:	f7ff fe8e 	bl	800b07a <USBH_MSC_RdWrProcess>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b01      	cmp	r3, #1
 800b362:	d0e0      	beq.n	800b326 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	2201      	movs	r2, #1
 800b368:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800b36a:	2300      	movs	r3, #0
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3718      	adds	r7, #24
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b088      	sub	sp, #32
 800b378:	af02      	add	r7, sp, #8
 800b37a:	60f8      	str	r0, [r7, #12]
 800b37c:	607a      	str	r2, [r7, #4]
 800b37e:	603b      	str	r3, [r7, #0]
 800b380:	460b      	mov	r3, r1
 800b382:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b38a:	69db      	ldr	r3, [r3, #28]
 800b38c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b394:	b2db      	uxtb	r3, r3
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00e      	beq.n	800b3b8 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800b3a0:	2b0b      	cmp	r3, #11
 800b3a2:	d109      	bne.n	800b3b8 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800b3a4:	7afb      	ldrb	r3, [r7, #11]
 800b3a6:	697a      	ldr	r2, [r7, #20]
 800b3a8:	2134      	movs	r1, #52	; 0x34
 800b3aa:	fb01 f303 	mul.w	r3, r1, r3
 800b3ae:	4413      	add	r3, r2
 800b3b0:	3390      	adds	r3, #144	; 0x90
 800b3b2:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d001      	beq.n	800b3bc <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800b3b8:	2302      	movs	r3, #2
 800b3ba:	e040      	b.n	800b43e <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	2207      	movs	r2, #7
 800b3c0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800b3c2:	7afb      	ldrb	r3, [r7, #11]
 800b3c4:	697a      	ldr	r2, [r7, #20]
 800b3c6:	2134      	movs	r1, #52	; 0x34
 800b3c8:	fb01 f303 	mul.w	r3, r1, r3
 800b3cc:	4413      	add	r3, r2
 800b3ce:	3390      	adds	r3, #144	; 0x90
 800b3d0:	2207      	movs	r2, #7
 800b3d2:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800b3d4:	7afb      	ldrb	r3, [r7, #11]
 800b3d6:	b29a      	uxth	r2, r3
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800b3de:	7af9      	ldrb	r1, [r7, #11]
 800b3e0:	6a3b      	ldr	r3, [r7, #32]
 800b3e2:	9300      	str	r3, [sp, #0]
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f000 fca7 	bl	800bd3c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b3f4:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b3f6:	e016      	b.n	800b426 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	1ad2      	subs	r2, r2, r3
 800b402:	6a3b      	ldr	r3, [r7, #32]
 800b404:	f242 7110 	movw	r1, #10000	; 0x2710
 800b408:	fb01 f303 	mul.w	r3, r1, r3
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d805      	bhi.n	800b41c <USBH_MSC_Write+0xa8>
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b416:	b2db      	uxtb	r3, r3
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d104      	bne.n	800b426 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	2201      	movs	r2, #1
 800b420:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800b422:	2302      	movs	r3, #2
 800b424:	e00b      	b.n	800b43e <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b426:	7afb      	ldrb	r3, [r7, #11]
 800b428:	4619      	mov	r1, r3
 800b42a:	68f8      	ldr	r0, [r7, #12]
 800b42c:	f7ff fe25 	bl	800b07a <USBH_MSC_RdWrProcess>
 800b430:	4603      	mov	r3, r0
 800b432:	2b01      	cmp	r3, #1
 800b434:	d0e0      	beq.n	800b3f8 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	2201      	movs	r2, #1
 800b43a:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800b43c:	2300      	movs	r3, #0
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3718      	adds	r7, #24
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}

0800b446 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800b446:	b580      	push	{r7, lr}
 800b448:	b082      	sub	sp, #8
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2221      	movs	r2, #33	; 0x21
 800b452:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	22ff      	movs	r2, #255	; 0xff
 800b458:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2200      	movs	r2, #0
 800b45e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2200      	movs	r2, #0
 800b464:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2200      	movs	r2, #0
 800b46a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800b46c:	2200      	movs	r2, #0
 800b46e:	2100      	movs	r1, #0
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f001 fdae 	bl	800cfd2 <USBH_CtlReq>
 800b476:	4603      	mov	r3, r0
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3708      	adds	r7, #8
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	22a1      	movs	r2, #161	; 0xa1
 800b48e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	22fe      	movs	r2, #254	; 0xfe
 800b494:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2200      	movs	r2, #0
 800b49a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	6839      	ldr	r1, [r7, #0]
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f001 fd90 	bl	800cfd2 <USBH_CtlReq>
 800b4b2:	4603      	mov	r3, r0
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3708      	adds	r7, #8
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4ca:	69db      	ldr	r3, [r3, #28]
 800b4cc:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	4a09      	ldr	r2, [pc, #36]	; (800b4f8 <USBH_MSC_BOT_Init+0x3c>)
 800b4d2:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	4a09      	ldr	r2, [pc, #36]	; (800b4fc <USBH_MSC_BOT_Init+0x40>)
 800b4d8:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2201      	movs	r2, #1
 800b4de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800b4ea:	2300      	movs	r3, #0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3714      	adds	r7, #20
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr
 800b4f8:	43425355 	.word	0x43425355
 800b4fc:	20304050 	.word	0x20304050

0800b500 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b088      	sub	sp, #32
 800b504:	af02      	add	r7, sp, #8
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	460b      	mov	r3, r1
 800b50a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800b50c:	2301      	movs	r3, #1
 800b50e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800b510:	2301      	movs	r3, #1
 800b512:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800b514:	2301      	movs	r3, #1
 800b516:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b518:	2300      	movs	r3, #0
 800b51a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b522:	69db      	ldr	r3, [r3, #28]
 800b524:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800b526:	2300      	movs	r3, #0
 800b528:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b530:	3b01      	subs	r3, #1
 800b532:	2b0a      	cmp	r3, #10
 800b534:	f200 81a1 	bhi.w	800b87a <USBH_MSC_BOT_Process+0x37a>
 800b538:	a201      	add	r2, pc, #4	; (adr r2, 800b540 <USBH_MSC_BOT_Process+0x40>)
 800b53a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b53e:	bf00      	nop
 800b540:	0800b56d 	.word	0x0800b56d
 800b544:	0800b597 	.word	0x0800b597
 800b548:	0800b601 	.word	0x0800b601
 800b54c:	0800b61f 	.word	0x0800b61f
 800b550:	0800b6a3 	.word	0x0800b6a3
 800b554:	0800b6c7 	.word	0x0800b6c7
 800b558:	0800b761 	.word	0x0800b761
 800b55c:	0800b77d 	.word	0x0800b77d
 800b560:	0800b7cf 	.word	0x0800b7cf
 800b564:	0800b7ff 	.word	0x0800b7ff
 800b568:	0800b861 	.word	0x0800b861
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	78fa      	ldrb	r2, [r7, #3]
 800b570:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	2202      	movs	r2, #2
 800b578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	795a      	ldrb	r2, [r3, #5]
 800b586:	2301      	movs	r3, #1
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	4613      	mov	r3, r2
 800b58c:	221f      	movs	r2, #31
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f001 ff2f 	bl	800d3f2 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800b594:	e180      	b.n	800b898 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	795b      	ldrb	r3, [r3, #5]
 800b59a:	4619      	mov	r1, r3
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f004 fddb 	bl	8010158 <USBH_LL_GetURBState>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b5a6:	7d3b      	ldrb	r3, [r7, #20]
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d118      	bne.n	800b5de <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d00f      	beq.n	800b5d4 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800b5ba:	b25b      	sxtb	r3, r3
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	da04      	bge.n	800b5ca <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	2203      	movs	r2, #3
 800b5c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b5c8:	e159      	b.n	800b87e <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	2205      	movs	r2, #5
 800b5ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b5d2:	e154      	b.n	800b87e <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	2207      	movs	r2, #7
 800b5d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b5dc:	e14f      	b.n	800b87e <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b5de:	7d3b      	ldrb	r3, [r7, #20]
 800b5e0:	2b02      	cmp	r3, #2
 800b5e2:	d104      	bne.n	800b5ee <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b5ec:	e147      	b.n	800b87e <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 800b5ee:	7d3b      	ldrb	r3, [r7, #20]
 800b5f0:	2b05      	cmp	r3, #5
 800b5f2:	f040 8144 	bne.w	800b87e <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	220a      	movs	r2, #10
 800b5fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b5fe:	e13e      	b.n	800b87e <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	895a      	ldrh	r2, [r3, #10]
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	791b      	ldrb	r3, [r3, #4]
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f001 ff14 	bl	800d43c <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	2204      	movs	r2, #4
 800b618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800b61c:	e13c      	b.n	800b898 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	791b      	ldrb	r3, [r3, #4]
 800b622:	4619      	mov	r1, r3
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f004 fd97 	bl	8010158 <USBH_LL_GetURBState>
 800b62a:	4603      	mov	r3, r0
 800b62c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b62e:	7d3b      	ldrb	r3, [r7, #20]
 800b630:	2b01      	cmp	r3, #1
 800b632:	d12d      	bne.n	800b690 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b638:	693a      	ldr	r2, [r7, #16]
 800b63a:	8952      	ldrh	r2, [r2, #10]
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d910      	bls.n	800b662 <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b646:	693a      	ldr	r2, [r7, #16]
 800b648:	8952      	ldrh	r2, [r2, #10]
 800b64a:	441a      	add	r2, r3
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b656:	693a      	ldr	r2, [r7, #16]
 800b658:	8952      	ldrh	r2, [r2, #10]
 800b65a:	1a9a      	subs	r2, r3, r2
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	65da      	str	r2, [r3, #92]	; 0x5c
 800b660:	e002      	b.n	800b668 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	2200      	movs	r2, #0
 800b666:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d00a      	beq.n	800b686 <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	895a      	ldrh	r2, [r3, #10]
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	791b      	ldrb	r3, [r3, #4]
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f001 fedc 	bl	800d43c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800b684:	e0fd      	b.n	800b882 <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	2207      	movs	r2, #7
 800b68a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b68e:	e0f8      	b.n	800b882 <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 800b690:	7d3b      	ldrb	r3, [r7, #20]
 800b692:	2b05      	cmp	r3, #5
 800b694:	f040 80f5 	bne.w	800b882 <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	2209      	movs	r2, #9
 800b69c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b6a0:	e0ef      	b.n	800b882 <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	891a      	ldrh	r2, [r3, #8]
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	7958      	ldrb	r0, [r3, #5]
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	9300      	str	r3, [sp, #0]
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f001 fe9b 	bl	800d3f2 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	2206      	movs	r2, #6
 800b6c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b6c4:	e0e8      	b.n	800b898 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	795b      	ldrb	r3, [r3, #5]
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f004 fd43 	bl	8010158 <USBH_LL_GetURBState>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b6d6:	7d3b      	ldrb	r3, [r7, #20]
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	d130      	bne.n	800b73e <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6e0:	693a      	ldr	r2, [r7, #16]
 800b6e2:	8912      	ldrh	r2, [r2, #8]
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d910      	bls.n	800b70a <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6ee:	693a      	ldr	r2, [r7, #16]
 800b6f0:	8912      	ldrh	r2, [r2, #8]
 800b6f2:	441a      	add	r2, r3
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6fe:	693a      	ldr	r2, [r7, #16]
 800b700:	8912      	ldrh	r2, [r2, #8]
 800b702:	1a9a      	subs	r2, r3, r2
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	65da      	str	r2, [r3, #92]	; 0x5c
 800b708:	e002      	b.n	800b710 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	2200      	movs	r2, #0
 800b70e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b714:	2b00      	cmp	r3, #0
 800b716:	d00d      	beq.n	800b734 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	891a      	ldrh	r2, [r3, #8]
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	7958      	ldrb	r0, [r3, #5]
 800b726:	2301      	movs	r3, #1
 800b728:	9300      	str	r3, [sp, #0]
 800b72a:	4603      	mov	r3, r0
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f001 fe60 	bl	800d3f2 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800b732:	e0a8      	b.n	800b886 <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	2207      	movs	r2, #7
 800b738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b73c:	e0a3      	b.n	800b886 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b73e:	7d3b      	ldrb	r3, [r7, #20]
 800b740:	2b02      	cmp	r3, #2
 800b742:	d104      	bne.n	800b74e <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	2205      	movs	r2, #5
 800b748:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b74c:	e09b      	b.n	800b886 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 800b74e:	7d3b      	ldrb	r3, [r7, #20]
 800b750:	2b05      	cmp	r3, #5
 800b752:	f040 8098 	bne.w	800b886 <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	220a      	movs	r2, #10
 800b75a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b75e:	e092      	b.n	800b886 <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	791b      	ldrb	r3, [r3, #4]
 800b76a:	220d      	movs	r2, #13
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f001 fe65 	bl	800d43c <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	2208      	movs	r2, #8
 800b776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b77a:	e08d      	b.n	800b898 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	791b      	ldrb	r3, [r3, #4]
 800b780:	4619      	mov	r1, r3
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f004 fce8 	bl	8010158 <USBH_LL_GetURBState>
 800b788:	4603      	mov	r3, r0
 800b78a:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800b78c:	7d3b      	ldrb	r3, [r7, #20]
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d115      	bne.n	800b7be <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	2201      	movs	r2, #1
 800b796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	2201      	movs	r2, #1
 800b79e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 f8aa 	bl	800b8fc <USBH_MSC_DecodeCSW>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800b7ac:	7d7b      	ldrb	r3, [r7, #21]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d102      	bne.n	800b7b8 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800b7b6:	e068      	b.n	800b88a <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 800b7b8:	2302      	movs	r3, #2
 800b7ba:	75fb      	strb	r3, [r7, #23]
      break;
 800b7bc:	e065      	b.n	800b88a <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 800b7be:	7d3b      	ldrb	r3, [r7, #20]
 800b7c0:	2b05      	cmp	r3, #5
 800b7c2:	d162      	bne.n	800b88a <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	2209      	movs	r2, #9
 800b7c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b7cc:	e05d      	b.n	800b88a <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800b7ce:	78fb      	ldrb	r3, [r7, #3]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 f865 	bl	800b8a4 <USBH_MSC_BOT_Abort>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b7de:	7dbb      	ldrb	r3, [r7, #22]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d104      	bne.n	800b7ee <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	2207      	movs	r2, #7
 800b7e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800b7ec:	e04f      	b.n	800b88e <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 800b7ee:	7dbb      	ldrb	r3, [r7, #22]
 800b7f0:	2b04      	cmp	r3, #4
 800b7f2:	d14c      	bne.n	800b88e <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	220b      	movs	r2, #11
 800b7f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b7fc:	e047      	b.n	800b88e <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800b7fe:	78fb      	ldrb	r3, [r7, #3]
 800b800:	2201      	movs	r2, #1
 800b802:	4619      	mov	r1, r3
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 f84d 	bl	800b8a4 <USBH_MSC_BOT_Abort>
 800b80a:	4603      	mov	r3, r0
 800b80c:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b80e:	7dbb      	ldrb	r3, [r7, #22]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d11d      	bne.n	800b850 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	795b      	ldrb	r3, [r3, #5]
 800b818:	4619      	mov	r1, r3
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f004 fcf0 	bl	8010200 <USBH_LL_GetToggle>
 800b820:	4603      	mov	r3, r0
 800b822:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	7959      	ldrb	r1, [r3, #5]
 800b828:	7bfb      	ldrb	r3, [r7, #15]
 800b82a:	f1c3 0301 	rsb	r3, r3, #1
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	461a      	mov	r2, r3
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f004 fcb1 	bl	801019a <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	791b      	ldrb	r3, [r3, #4]
 800b83c:	2200      	movs	r2, #0
 800b83e:	4619      	mov	r1, r3
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f004 fcaa 	bl	801019a <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	2209      	movs	r2, #9
 800b84a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800b84e:	e020      	b.n	800b892 <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 800b850:	7dbb      	ldrb	r3, [r7, #22]
 800b852:	2b04      	cmp	r3, #4
 800b854:	d11d      	bne.n	800b892 <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	220b      	movs	r2, #11
 800b85a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b85e:	e018      	b.n	800b892 <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f7ff fdf0 	bl	800b446 <USBH_MSC_BOT_REQ_Reset>
 800b866:	4603      	mov	r3, r0
 800b868:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800b86a:	7dfb      	ldrb	r3, [r7, #23]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d112      	bne.n	800b896 <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	2201      	movs	r2, #1
 800b874:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800b878:	e00d      	b.n	800b896 <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 800b87a:	bf00      	nop
 800b87c:	e00c      	b.n	800b898 <USBH_MSC_BOT_Process+0x398>
      break;
 800b87e:	bf00      	nop
 800b880:	e00a      	b.n	800b898 <USBH_MSC_BOT_Process+0x398>
      break;
 800b882:	bf00      	nop
 800b884:	e008      	b.n	800b898 <USBH_MSC_BOT_Process+0x398>
      break;
 800b886:	bf00      	nop
 800b888:	e006      	b.n	800b898 <USBH_MSC_BOT_Process+0x398>
      break;
 800b88a:	bf00      	nop
 800b88c:	e004      	b.n	800b898 <USBH_MSC_BOT_Process+0x398>
      break;
 800b88e:	bf00      	nop
 800b890:	e002      	b.n	800b898 <USBH_MSC_BOT_Process+0x398>
      break;
 800b892:	bf00      	nop
 800b894:	e000      	b.n	800b898 <USBH_MSC_BOT_Process+0x398>
      break;
 800b896:	bf00      	nop
  }
  return status;
 800b898:	7dfb      	ldrb	r3, [r7, #23]
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3718      	adds	r7, #24
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop

0800b8a4 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	70fb      	strb	r3, [r7, #3]
 800b8b0:	4613      	mov	r3, r2
 800b8b2:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800b8b4:	2302      	movs	r3, #2
 800b8b6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8be:	69db      	ldr	r3, [r3, #28]
 800b8c0:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800b8c2:	78bb      	ldrb	r3, [r7, #2]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d002      	beq.n	800b8ce <USBH_MSC_BOT_Abort+0x2a>
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d009      	beq.n	800b8e0 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800b8cc:	e011      	b.n	800b8f2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	79db      	ldrb	r3, [r3, #7]
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f001 f99c 	bl	800cc12 <USBH_ClrFeature>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	73fb      	strb	r3, [r7, #15]
      break;
 800b8de:	e008      	b.n	800b8f2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	799b      	ldrb	r3, [r3, #6]
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f001 f993 	bl	800cc12 <USBH_ClrFeature>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	73fb      	strb	r3, [r7, #15]
      break;
 800b8f0:	bf00      	nop
  }
  return status;
 800b8f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3710      	adds	r7, #16
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b90a:	69db      	ldr	r3, [r3, #28]
 800b90c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800b90e:	2301      	movs	r3, #1
 800b910:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	791b      	ldrb	r3, [r3, #4]
 800b916:	4619      	mov	r1, r3
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f004 fb8b 	bl	8010034 <USBH_LL_GetLastXferSize>
 800b91e:	4603      	mov	r3, r0
 800b920:	2b0d      	cmp	r3, #13
 800b922:	d002      	beq.n	800b92a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800b924:	2302      	movs	r3, #2
 800b926:	73fb      	strb	r3, [r7, #15]
 800b928:	e024      	b.n	800b974 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b92e:	4a14      	ldr	r2, [pc, #80]	; (800b980 <USBH_MSC_DecodeCSW+0x84>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d11d      	bne.n	800b970 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d119      	bne.n	800b974 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b946:	2b00      	cmp	r3, #0
 800b948:	d102      	bne.n	800b950 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800b94a:	2300      	movs	r3, #0
 800b94c:	73fb      	strb	r3, [r7, #15]
 800b94e:	e011      	b.n	800b974 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b956:	2b01      	cmp	r3, #1
 800b958:	d102      	bne.n	800b960 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800b95a:	2301      	movs	r3, #1
 800b95c:	73fb      	strb	r3, [r7, #15]
 800b95e:	e009      	b.n	800b974 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b966:	2b02      	cmp	r3, #2
 800b968:	d104      	bne.n	800b974 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800b96a:	2302      	movs	r3, #2
 800b96c:	73fb      	strb	r3, [r7, #15]
 800b96e:	e001      	b.n	800b974 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800b970:	2302      	movs	r3, #2
 800b972:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800b974:	7bfb      	ldrb	r3, [r7, #15]
}
 800b976:	4618      	mov	r0, r3
 800b978:	3710      	adds	r7, #16
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	53425355 	.word	0x53425355

0800b984 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	460b      	mov	r3, r1
 800b98e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b990:	2302      	movs	r3, #2
 800b992:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b99a:	69db      	ldr	r3, [r3, #28]
 800b99c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d002      	beq.n	800b9ae <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800b9a8:	2b02      	cmp	r3, #2
 800b9aa:	d021      	beq.n	800b9f0 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b9ac:	e028      	b.n	800ba00 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	220a      	movs	r2, #10
 800b9c0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	3363      	adds	r3, #99	; 0x63
 800b9c8:	2210      	movs	r2, #16
 800b9ca:	2100      	movs	r1, #0
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f004 fcc6 	bl	801035e <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	2201      	movs	r2, #1
 800b9de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	2202      	movs	r2, #2
 800b9e6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	73fb      	strb	r3, [r7, #15]
      break;
 800b9ee:	e007      	b.n	800ba00 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b9f0:	78fb      	ldrb	r3, [r7, #3]
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f7ff fd83 	bl	800b500 <USBH_MSC_BOT_Process>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	73fb      	strb	r3, [r7, #15]
      break;
 800b9fe:	bf00      	nop
  }

  return error;
 800ba00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}

0800ba0a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800ba0a:	b580      	push	{r7, lr}
 800ba0c:	b086      	sub	sp, #24
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	60f8      	str	r0, [r7, #12]
 800ba12:	460b      	mov	r3, r1
 800ba14:	607a      	str	r2, [r7, #4]
 800ba16:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba22:	69db      	ldr	r3, [r3, #28]
 800ba24:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d002      	beq.n	800ba36 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800ba30:	2b02      	cmp	r3, #2
 800ba32:	d027      	beq.n	800ba84 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800ba34:	e05f      	b.n	800baf6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	2208      	movs	r2, #8
 800ba3a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	2280      	movs	r2, #128	; 0x80
 800ba40:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	220a      	movs	r2, #10
 800ba48:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	3363      	adds	r3, #99	; 0x63
 800ba50:	2210      	movs	r2, #16
 800ba52:	2100      	movs	r1, #0
 800ba54:	4618      	mov	r0, r3
 800ba56:	f004 fc82 	bl	801035e <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	2225      	movs	r2, #37	; 0x25
 800ba5e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	2201      	movs	r2, #1
 800ba66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	2202      	movs	r2, #2
 800ba6e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	f103 0210 	add.w	r2, r3, #16
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	75fb      	strb	r3, [r7, #23]
      break;
 800ba82:	e038      	b.n	800baf6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ba84:	7afb      	ldrb	r3, [r7, #11]
 800ba86:	4619      	mov	r1, r3
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	f7ff fd39 	bl	800b500 <USBH_MSC_BOT_Process>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ba92:	7dfb      	ldrb	r3, [r7, #23]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d12d      	bne.n	800baf4 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba9e:	3303      	adds	r3, #3
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	461a      	mov	r2, r3
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800baaa:	3302      	adds	r3, #2
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	021b      	lsls	r3, r3, #8
 800bab0:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bab8:	3301      	adds	r3, #1
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800babe:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	061b      	lsls	r3, r3, #24
 800baca:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bad6:	3307      	adds	r3, #7
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	b29a      	uxth	r2, r3
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bae2:	3306      	adds	r3, #6
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	021b      	lsls	r3, r3, #8
 800baea:	b29b      	uxth	r3, r3
 800baec:	4313      	orrs	r3, r2
 800baee:	b29a      	uxth	r2, r3
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	809a      	strh	r2, [r3, #4]
      break;
 800baf4:	bf00      	nop
  }

  return error;
 800baf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3718      	adds	r7, #24
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b086      	sub	sp, #24
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	60f8      	str	r0, [r7, #12]
 800bb08:	460b      	mov	r3, r1
 800bb0a:	607a      	str	r2, [r7, #4]
 800bb0c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800bb0e:	2302      	movs	r3, #2
 800bb10:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb18:	69db      	ldr	r3, [r3, #28]
 800bb1a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d002      	beq.n	800bb2c <USBH_MSC_SCSI_Inquiry+0x2c>
 800bb26:	2b02      	cmp	r3, #2
 800bb28:	d03d      	beq.n	800bba6 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800bb2a:	e089      	b.n	800bc40 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	2224      	movs	r2, #36	; 0x24
 800bb30:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	2280      	movs	r2, #128	; 0x80
 800bb36:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	220a      	movs	r2, #10
 800bb3e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	3363      	adds	r3, #99	; 0x63
 800bb46:	220a      	movs	r2, #10
 800bb48:	2100      	movs	r1, #0
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f004 fc07 	bl	801035e <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	2212      	movs	r2, #18
 800bb54:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800bb58:	7afb      	ldrb	r3, [r7, #11]
 800bb5a:	015b      	lsls	r3, r3, #5
 800bb5c:	b2da      	uxtb	r2, r3
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	2200      	movs	r2, #0
 800bb68:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	2224      	movs	r2, #36	; 0x24
 800bb78:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	2201      	movs	r2, #1
 800bb88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	2202      	movs	r2, #2
 800bb90:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	f103 0210 	add.w	r2, r3, #16
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800bba0:	2301      	movs	r3, #1
 800bba2:	75fb      	strb	r3, [r7, #23]
      break;
 800bba4:	e04c      	b.n	800bc40 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bba6:	7afb      	ldrb	r3, [r7, #11]
 800bba8:	4619      	mov	r1, r3
 800bbaa:	68f8      	ldr	r0, [r7, #12]
 800bbac:	f7ff fca8 	bl	800b500 <USBH_MSC_BOT_Process>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800bbb4:	7dfb      	ldrb	r3, [r7, #23]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d141      	bne.n	800bc3e <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800bbba:	2222      	movs	r2, #34	; 0x22
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f004 fbcd 	bl	801035e <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	f003 031f 	and.w	r3, r3, #31
 800bbd0:	b2da      	uxtb	r2, r3
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	095b      	lsrs	r3, r3, #5
 800bbe0:	b2da      	uxtb	r2, r3
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbec:	3301      	adds	r3, #1
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	b25b      	sxtb	r3, r3
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	da03      	bge.n	800bbfe <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	709a      	strb	r2, [r3, #2]
 800bbfc:	e002      	b.n	800bc04 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	1cd8      	adds	r0, r3, #3
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc0e:	3308      	adds	r3, #8
 800bc10:	2208      	movs	r2, #8
 800bc12:	4619      	mov	r1, r3
 800bc14:	f004 fb98 	bl	8010348 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f103 000c 	add.w	r0, r3, #12
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc24:	3310      	adds	r3, #16
 800bc26:	2210      	movs	r2, #16
 800bc28:	4619      	mov	r1, r3
 800bc2a:	f004 fb8d 	bl	8010348 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	331d      	adds	r3, #29
 800bc32:	693a      	ldr	r2, [r7, #16]
 800bc34:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800bc38:	3220      	adds	r2, #32
 800bc3a:	6812      	ldr	r2, [r2, #0]
 800bc3c:	601a      	str	r2, [r3, #0]
      break;
 800bc3e:	bf00      	nop
  }

  return error;
 800bc40:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3718      	adds	r7, #24
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}

0800bc4a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800bc4a:	b580      	push	{r7, lr}
 800bc4c:	b086      	sub	sp, #24
 800bc4e:	af00      	add	r7, sp, #0
 800bc50:	60f8      	str	r0, [r7, #12]
 800bc52:	460b      	mov	r3, r1
 800bc54:	607a      	str	r2, [r7, #4]
 800bc56:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800bc58:	2302      	movs	r3, #2
 800bc5a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc62:	69db      	ldr	r3, [r3, #28]
 800bc64:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d002      	beq.n	800bc76 <USBH_MSC_SCSI_RequestSense+0x2c>
 800bc70:	2b02      	cmp	r3, #2
 800bc72:	d03d      	beq.n	800bcf0 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800bc74:	e05d      	b.n	800bd32 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	220e      	movs	r2, #14
 800bc7a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	2280      	movs	r2, #128	; 0x80
 800bc80:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	220a      	movs	r2, #10
 800bc88:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	3363      	adds	r3, #99	; 0x63
 800bc90:	2210      	movs	r2, #16
 800bc92:	2100      	movs	r1, #0
 800bc94:	4618      	mov	r0, r3
 800bc96:	f004 fb62 	bl	801035e <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	2203      	movs	r2, #3
 800bc9e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800bca2:	7afb      	ldrb	r3, [r7, #11]
 800bca4:	015b      	lsls	r3, r3, #5
 800bca6:	b2da      	uxtb	r2, r3
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	220e      	movs	r2, #14
 800bcc2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	2202      	movs	r2, #2
 800bcda:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	f103 0210 	add.w	r2, r3, #16
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800bcea:	2301      	movs	r3, #1
 800bcec:	75fb      	strb	r3, [r7, #23]
      break;
 800bcee:	e020      	b.n	800bd32 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bcf0:	7afb      	ldrb	r3, [r7, #11]
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	68f8      	ldr	r0, [r7, #12]
 800bcf6:	f7ff fc03 	bl	800b500 <USBH_MSC_BOT_Process>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800bcfe:	7dfb      	ldrb	r3, [r7, #23]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d115      	bne.n	800bd30 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd0a:	3302      	adds	r3, #2
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	f003 030f 	and.w	r3, r3, #15
 800bd12:	b2da      	uxtb	r2, r3
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd1e:	7b1a      	ldrb	r2, [r3, #12]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd2a:	7b5a      	ldrb	r2, [r3, #13]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	709a      	strb	r2, [r3, #2]
      break;
 800bd30:	bf00      	nop
  }

  return error;
 800bd32:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3718      	adds	r7, #24
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b086      	sub	sp, #24
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	607a      	str	r2, [r7, #4]
 800bd46:	603b      	str	r3, [r7, #0]
 800bd48:	460b      	mov	r3, r1
 800bd4a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800bd4c:	2302      	movs	r3, #2
 800bd4e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd56:	69db      	ldr	r3, [r3, #28]
 800bd58:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d002      	beq.n	800bd6a <USBH_MSC_SCSI_Write+0x2e>
 800bd64:	2b02      	cmp	r3, #2
 800bd66:	d047      	beq.n	800bdf8 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800bd68:	e04e      	b.n	800be08 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800bd70:	461a      	mov	r2, r3
 800bd72:	6a3b      	ldr	r3, [r7, #32]
 800bd74:	fb03 f202 	mul.w	r2, r3, r2
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	220a      	movs	r2, #10
 800bd88:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	3363      	adds	r3, #99	; 0x63
 800bd90:	2210      	movs	r2, #16
 800bd92:	2100      	movs	r1, #0
 800bd94:	4618      	mov	r0, r3
 800bd96:	f004 fae2 	bl	801035e <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	222a      	movs	r2, #42	; 0x2a
 800bd9e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800bda2:	79fa      	ldrb	r2, [r7, #7]
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800bdaa:	79ba      	ldrb	r2, [r7, #6]
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800bdb2:	797a      	ldrb	r2, [r7, #5]
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800bdba:	1d3b      	adds	r3, r7, #4
 800bdbc:	781a      	ldrb	r2, [r3, #0]
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800bdc4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800bdce:	f107 0320 	add.w	r3, r7, #32
 800bdd2:	781a      	ldrb	r2, [r3, #0]
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	2201      	movs	r2, #1
 800bdde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	2202      	movs	r2, #2
 800bde6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	683a      	ldr	r2, [r7, #0]
 800bdee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	75fb      	strb	r3, [r7, #23]
      break;
 800bdf6:	e007      	b.n	800be08 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bdf8:	7afb      	ldrb	r3, [r7, #11]
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	68f8      	ldr	r0, [r7, #12]
 800bdfe:	f7ff fb7f 	bl	800b500 <USBH_MSC_BOT_Process>
 800be02:	4603      	mov	r3, r0
 800be04:	75fb      	strb	r3, [r7, #23]
      break;
 800be06:	bf00      	nop
  }

  return error;
 800be08:	7dfb      	ldrb	r3, [r7, #23]
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3718      	adds	r7, #24
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b086      	sub	sp, #24
 800be16:	af00      	add	r7, sp, #0
 800be18:	60f8      	str	r0, [r7, #12]
 800be1a:	607a      	str	r2, [r7, #4]
 800be1c:	603b      	str	r3, [r7, #0]
 800be1e:	460b      	mov	r3, r1
 800be20:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800be22:	2302      	movs	r3, #2
 800be24:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be2c:	69db      	ldr	r3, [r3, #28]
 800be2e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800be36:	2b01      	cmp	r3, #1
 800be38:	d002      	beq.n	800be40 <USBH_MSC_SCSI_Read+0x2e>
 800be3a:	2b02      	cmp	r3, #2
 800be3c:	d047      	beq.n	800bece <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800be3e:	e04e      	b.n	800bede <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800be46:	461a      	mov	r2, r3
 800be48:	6a3b      	ldr	r3, [r7, #32]
 800be4a:	fb03 f202 	mul.w	r2, r3, r2
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	2280      	movs	r2, #128	; 0x80
 800be56:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	220a      	movs	r2, #10
 800be5e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	3363      	adds	r3, #99	; 0x63
 800be66:	2210      	movs	r2, #16
 800be68:	2100      	movs	r1, #0
 800be6a:	4618      	mov	r0, r3
 800be6c:	f004 fa77 	bl	801035e <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	2228      	movs	r2, #40	; 0x28
 800be74:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800be78:	79fa      	ldrb	r2, [r7, #7]
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800be80:	79ba      	ldrb	r2, [r7, #6]
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800be88:	797a      	ldrb	r2, [r7, #5]
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800be90:	1d3b      	adds	r3, r7, #4
 800be92:	781a      	ldrb	r2, [r3, #0]
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800be9a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800bea4:	f107 0320 	add.w	r3, r7, #32
 800bea8:	781a      	ldrb	r2, [r3, #0]
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	2201      	movs	r2, #1
 800beb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	2202      	movs	r2, #2
 800bebc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	683a      	ldr	r2, [r7, #0]
 800bec4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800bec8:	2301      	movs	r3, #1
 800beca:	75fb      	strb	r3, [r7, #23]
      break;
 800becc:	e007      	b.n	800bede <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bece:	7afb      	ldrb	r3, [r7, #11]
 800bed0:	4619      	mov	r1, r3
 800bed2:	68f8      	ldr	r0, [r7, #12]
 800bed4:	f7ff fb14 	bl	800b500 <USBH_MSC_BOT_Process>
 800bed8:	4603      	mov	r3, r0
 800beda:	75fb      	strb	r3, [r7, #23]
      break;
 800bedc:	bf00      	nop
  }

  return error;
 800bede:	7dfb      	ldrb	r3, [r7, #23]
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3718      	adds	r7, #24
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	4613      	mov	r3, r2
 800bef4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d101      	bne.n	800bf00 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800befc:	2302      	movs	r3, #2
 800befe:	e029      	b.n	800bf54 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	79fa      	ldrb	r2, [r7, #7]
 800bf04:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2200      	movs	r2, #0
 800bf14:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800bf18:	68f8      	ldr	r0, [r7, #12]
 800bf1a:	f000 f81f 	bl	800bf5c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2200      	movs	r2, #0
 800bf22:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2200      	movs	r2, #0
 800bf32:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d003      	beq.n	800bf4c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	68ba      	ldr	r2, [r7, #8]
 800bf48:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800bf4c:	68f8      	ldr	r0, [r7, #12]
 800bf4e:	f003 ffbf 	bl	800fed0 <USBH_LL_Init>

  return USBH_OK;
 800bf52:	2300      	movs	r3, #0
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3710      	adds	r7, #16
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b085      	sub	sp, #20
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800bf64:	2300      	movs	r3, #0
 800bf66:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bf68:	2300      	movs	r3, #0
 800bf6a:	60fb      	str	r3, [r7, #12]
 800bf6c:	e009      	b.n	800bf82 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	33e0      	adds	r3, #224	; 0xe0
 800bf74:	009b      	lsls	r3, r3, #2
 800bf76:	4413      	add	r3, r2
 800bf78:	2200      	movs	r2, #0
 800bf7a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	3301      	adds	r3, #1
 800bf80:	60fb      	str	r3, [r7, #12]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2b0e      	cmp	r3, #14
 800bf86:	d9f2      	bls.n	800bf6e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bf88:	2300      	movs	r3, #0
 800bf8a:	60fb      	str	r3, [r7, #12]
 800bf8c:	e009      	b.n	800bfa2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800bf8e:	687a      	ldr	r2, [r7, #4]
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	4413      	add	r3, r2
 800bf94:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bf98:	2200      	movs	r2, #0
 800bf9a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	60fb      	str	r3, [r7, #12]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfa8:	d3f1      	bcc.n	800bf8e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2200      	movs	r2, #0
 800bfae:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2240      	movs	r2, #64	; 0x40
 800bfce:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2200      	movs	r2, #0
 800bff2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800bff6:	2300      	movs	r3, #0
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3714      	adds	r7, #20
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr

0800c004 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c004:	b480      	push	{r7}
 800c006:	b085      	sub	sp, #20
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c00e:	2300      	movs	r3, #0
 800c010:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d016      	beq.n	800c046 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d10e      	bne.n	800c040 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c028:	1c59      	adds	r1, r3, #1
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	33de      	adds	r3, #222	; 0xde
 800c034:	6839      	ldr	r1, [r7, #0]
 800c036:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c03a:	2300      	movs	r3, #0
 800c03c:	73fb      	strb	r3, [r7, #15]
 800c03e:	e004      	b.n	800c04a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c040:	2302      	movs	r3, #2
 800c042:	73fb      	strb	r3, [r7, #15]
 800c044:	e001      	b.n	800c04a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c046:	2302      	movs	r3, #2
 800c048:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c04a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3714      	adds	r7, #20
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr

0800c058 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c058:	b480      	push	{r7}
 800c05a:	b085      	sub	sp, #20
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	460b      	mov	r3, r1
 800c062:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c064:	2300      	movs	r3, #0
 800c066:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c06e:	78fa      	ldrb	r2, [r7, #3]
 800c070:	429a      	cmp	r2, r3
 800c072:	d204      	bcs.n	800c07e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	78fa      	ldrb	r2, [r7, #3]
 800c078:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c07c:	e001      	b.n	800c082 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c07e:	2302      	movs	r3, #2
 800c080:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c082:	7bfb      	ldrb	r3, [r7, #15]
}
 800c084:	4618      	mov	r0, r3
 800c086:	3714      	adds	r7, #20
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c090:	b480      	push	{r7}
 800c092:	b087      	sub	sp, #28
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	4608      	mov	r0, r1
 800c09a:	4611      	mov	r1, r2
 800c09c:	461a      	mov	r2, r3
 800c09e:	4603      	mov	r3, r0
 800c0a0:	70fb      	strb	r3, [r7, #3]
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	70bb      	strb	r3, [r7, #2]
 800c0a6:	4613      	mov	r3, r2
 800c0a8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c0b8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c0ba:	e025      	b.n	800c108 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c0bc:	7dfb      	ldrb	r3, [r7, #23]
 800c0be:	221a      	movs	r2, #26
 800c0c0:	fb02 f303 	mul.w	r3, r2, r3
 800c0c4:	3308      	adds	r3, #8
 800c0c6:	68fa      	ldr	r2, [r7, #12]
 800c0c8:	4413      	add	r3, r2
 800c0ca:	3302      	adds	r3, #2
 800c0cc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	795b      	ldrb	r3, [r3, #5]
 800c0d2:	78fa      	ldrb	r2, [r7, #3]
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d002      	beq.n	800c0de <USBH_FindInterface+0x4e>
 800c0d8:	78fb      	ldrb	r3, [r7, #3]
 800c0da:	2bff      	cmp	r3, #255	; 0xff
 800c0dc:	d111      	bne.n	800c102 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c0e2:	78ba      	ldrb	r2, [r7, #2]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d002      	beq.n	800c0ee <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c0e8:	78bb      	ldrb	r3, [r7, #2]
 800c0ea:	2bff      	cmp	r3, #255	; 0xff
 800c0ec:	d109      	bne.n	800c102 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c0f2:	787a      	ldrb	r2, [r7, #1]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d002      	beq.n	800c0fe <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c0f8:	787b      	ldrb	r3, [r7, #1]
 800c0fa:	2bff      	cmp	r3, #255	; 0xff
 800c0fc:	d101      	bne.n	800c102 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c0fe:	7dfb      	ldrb	r3, [r7, #23]
 800c100:	e006      	b.n	800c110 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c102:	7dfb      	ldrb	r3, [r7, #23]
 800c104:	3301      	adds	r3, #1
 800c106:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c108:	7dfb      	ldrb	r3, [r7, #23]
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d9d6      	bls.n	800c0bc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c10e:	23ff      	movs	r3, #255	; 0xff
}
 800c110:	4618      	mov	r0, r3
 800c112:	371c      	adds	r7, #28
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f003 ff0f 	bl	800ff48 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800c12a:	2101      	movs	r1, #1
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f004 f826 	bl	801017e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c132:	2300      	movs	r3, #0
}
 800c134:	4618      	mov	r0, r3
 800c136:	3708      	adds	r7, #8
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b088      	sub	sp, #32
 800c140:	af04      	add	r7, sp, #16
 800c142:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c144:	2302      	movs	r3, #2
 800c146:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c148:	2300      	movs	r3, #0
 800c14a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c152:	b2db      	uxtb	r3, r3
 800c154:	2b01      	cmp	r3, #1
 800c156:	d102      	bne.n	800c15e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2203      	movs	r2, #3
 800c15c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	b2db      	uxtb	r3, r3
 800c164:	2b0b      	cmp	r3, #11
 800c166:	f200 81b3 	bhi.w	800c4d0 <USBH_Process+0x394>
 800c16a:	a201      	add	r2, pc, #4	; (adr r2, 800c170 <USBH_Process+0x34>)
 800c16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c170:	0800c1a1 	.word	0x0800c1a1
 800c174:	0800c1d3 	.word	0x0800c1d3
 800c178:	0800c23b 	.word	0x0800c23b
 800c17c:	0800c46b 	.word	0x0800c46b
 800c180:	0800c4d1 	.word	0x0800c4d1
 800c184:	0800c2df 	.word	0x0800c2df
 800c188:	0800c411 	.word	0x0800c411
 800c18c:	0800c315 	.word	0x0800c315
 800c190:	0800c335 	.word	0x0800c335
 800c194:	0800c355 	.word	0x0800c355
 800c198:	0800c383 	.word	0x0800c383
 800c19c:	0800c453 	.word	0x0800c453
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	f000 8193 	beq.w	800c4d4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c1b4:	20c8      	movs	r0, #200	; 0xc8
 800c1b6:	f004 f856 	bl	8010266 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f003 ff1f 	bl	800fffe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c1d0:	e180      	b.n	800c4d4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d107      	bne.n	800c1ec <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2202      	movs	r2, #2
 800c1e8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c1ea:	e182      	b.n	800c4f2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c1f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c1f6:	d914      	bls.n	800c222 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c1fe:	3301      	adds	r3, #1
 800c200:	b2da      	uxtb	r2, r3
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c20e:	2b03      	cmp	r3, #3
 800c210:	d903      	bls.n	800c21a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	220d      	movs	r2, #13
 800c216:	701a      	strb	r2, [r3, #0]
      break;
 800c218:	e16b      	b.n	800c4f2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2200      	movs	r2, #0
 800c21e:	701a      	strb	r2, [r3, #0]
      break;
 800c220:	e167      	b.n	800c4f2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c228:	f103 020a 	add.w	r2, r3, #10
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c232:	200a      	movs	r0, #10
 800c234:	f004 f817 	bl	8010266 <USBH_Delay>
      break;
 800c238:	e15b      	b.n	800c4f2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c240:	2b00      	cmp	r3, #0
 800c242:	d005      	beq.n	800c250 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c24a:	2104      	movs	r1, #4
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c250:	2064      	movs	r0, #100	; 0x64
 800c252:	f004 f808 	bl	8010266 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f003 feac 	bl	800ffb4 <USBH_LL_GetSpeed>
 800c25c:	4603      	mov	r3, r0
 800c25e:	461a      	mov	r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2205      	movs	r2, #5
 800c26a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c26c:	2100      	movs	r1, #0
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f001 f931 	bl	800d4d6 <USBH_AllocPipe>
 800c274:	4603      	mov	r3, r0
 800c276:	461a      	mov	r2, r3
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c27c:	2180      	movs	r1, #128	; 0x80
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f001 f929 	bl	800d4d6 <USBH_AllocPipe>
 800c284:	4603      	mov	r3, r0
 800c286:	461a      	mov	r2, r3
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	7919      	ldrb	r1, [r3, #4]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c2a0:	b292      	uxth	r2, r2
 800c2a2:	9202      	str	r2, [sp, #8]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	9201      	str	r2, [sp, #4]
 800c2a8:	9300      	str	r3, [sp, #0]
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	2280      	movs	r2, #128	; 0x80
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f001 f8e2 	bl	800d478 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	7959      	ldrb	r1, [r3, #5]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c2c8:	b292      	uxth	r2, r2
 800c2ca:	9202      	str	r2, [sp, #8]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	9201      	str	r2, [sp, #4]
 800c2d0:	9300      	str	r3, [sp, #0]
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f001 f8ce 	bl	800d478 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c2dc:	e109      	b.n	800c4f2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 f90c 	bl	800c4fc <USBH_HandleEnum>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c2e8:	7bbb      	ldrb	r3, [r7, #14]
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	f040 80f3 	bne.w	800c4d8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c300:	2b01      	cmp	r3, #1
 800c302:	d103      	bne.n	800c30c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2208      	movs	r2, #8
 800c308:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c30a:	e0e5      	b.n	800c4d8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2207      	movs	r2, #7
 800c310:	701a      	strb	r2, [r3, #0]
      break;
 800c312:	e0e1      	b.n	800c4d8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	f000 80de 	beq.w	800c4dc <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c326:	2101      	movs	r1, #1
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2208      	movs	r2, #8
 800c330:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800c332:	e0d3      	b.n	800c4dc <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	4619      	mov	r1, r3
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f000 fc20 	bl	800cb84 <USBH_SetCfg>
 800c344:	4603      	mov	r3, r0
 800c346:	2b00      	cmp	r3, #0
 800c348:	f040 80ca 	bne.w	800c4e0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2209      	movs	r2, #9
 800c350:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c352:	e0c5      	b.n	800c4e0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c35a:	f003 0320 	and.w	r3, r3, #32
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d00b      	beq.n	800c37a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800c362:	2101      	movs	r1, #1
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f000 fc30 	bl	800cbca <USBH_SetFeature>
 800c36a:	4603      	mov	r3, r0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f040 80b9 	bne.w	800c4e4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	220a      	movs	r2, #10
 800c376:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c378:	e0b4      	b.n	800c4e4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	220a      	movs	r2, #10
 800c37e:	701a      	strb	r2, [r3, #0]
      break;
 800c380:	e0b0      	b.n	800c4e4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c388:	2b00      	cmp	r3, #0
 800c38a:	f000 80ad 	beq.w	800c4e8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2200      	movs	r2, #0
 800c392:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c396:	2300      	movs	r3, #0
 800c398:	73fb      	strb	r3, [r7, #15]
 800c39a:	e016      	b.n	800c3ca <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c39c:	7bfa      	ldrb	r2, [r7, #15]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	32de      	adds	r2, #222	; 0xde
 800c3a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3a6:	791a      	ldrb	r2, [r3, #4]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d108      	bne.n	800c3c4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c3b2:	7bfa      	ldrb	r2, [r7, #15]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	32de      	adds	r2, #222	; 0xde
 800c3b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800c3c2:	e005      	b.n	800c3d0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c3c4:	7bfb      	ldrb	r3, [r7, #15]
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	73fb      	strb	r3, [r7, #15]
 800c3ca:	7bfb      	ldrb	r3, [r7, #15]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d0e5      	beq.n	800c39c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d016      	beq.n	800c408 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c3e0:	689b      	ldr	r3, [r3, #8]
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	4798      	blx	r3
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d109      	bne.n	800c400 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2206      	movs	r2, #6
 800c3f0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c3f8:	2103      	movs	r1, #3
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c3fe:	e073      	b.n	800c4e8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	220d      	movs	r2, #13
 800c404:	701a      	strb	r2, [r3, #0]
      break;
 800c406:	e06f      	b.n	800c4e8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	220d      	movs	r2, #13
 800c40c:	701a      	strb	r2, [r3, #0]
      break;
 800c40e:	e06b      	b.n	800c4e8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c416:	2b00      	cmp	r3, #0
 800c418:	d017      	beq.n	800c44a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c420:	691b      	ldr	r3, [r3, #16]
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	4798      	blx	r3
 800c426:	4603      	mov	r3, r0
 800c428:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c42a:	7bbb      	ldrb	r3, [r7, #14]
 800c42c:	b2db      	uxtb	r3, r3
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d103      	bne.n	800c43a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	220b      	movs	r2, #11
 800c436:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c438:	e058      	b.n	800c4ec <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800c43a:	7bbb      	ldrb	r3, [r7, #14]
 800c43c:	b2db      	uxtb	r3, r3
 800c43e:	2b02      	cmp	r3, #2
 800c440:	d154      	bne.n	800c4ec <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	220d      	movs	r2, #13
 800c446:	701a      	strb	r2, [r3, #0]
      break;
 800c448:	e050      	b.n	800c4ec <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	220d      	movs	r2, #13
 800c44e:	701a      	strb	r2, [r3, #0]
      break;
 800c450:	e04c      	b.n	800c4ec <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d049      	beq.n	800c4f0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c462:	695b      	ldr	r3, [r3, #20]
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	4798      	blx	r3
      }
      break;
 800c468:	e042      	b.n	800c4f0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f7ff fd72 	bl	800bf5c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d009      	beq.n	800c496 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c488:	68db      	ldr	r3, [r3, #12]
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d005      	beq.n	800c4ac <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c4a6:	2105      	movs	r1, #5
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c4b2:	b2db      	uxtb	r3, r3
 800c4b4:	2b01      	cmp	r3, #1
 800c4b6:	d107      	bne.n	800c4c8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f7ff fe2b 	bl	800c11c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c4c6:	e014      	b.n	800c4f2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f003 fd3d 	bl	800ff48 <USBH_LL_Start>
      break;
 800c4ce:	e010      	b.n	800c4f2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800c4d0:	bf00      	nop
 800c4d2:	e00e      	b.n	800c4f2 <USBH_Process+0x3b6>
      break;
 800c4d4:	bf00      	nop
 800c4d6:	e00c      	b.n	800c4f2 <USBH_Process+0x3b6>
      break;
 800c4d8:	bf00      	nop
 800c4da:	e00a      	b.n	800c4f2 <USBH_Process+0x3b6>
    break;
 800c4dc:	bf00      	nop
 800c4de:	e008      	b.n	800c4f2 <USBH_Process+0x3b6>
      break;
 800c4e0:	bf00      	nop
 800c4e2:	e006      	b.n	800c4f2 <USBH_Process+0x3b6>
      break;
 800c4e4:	bf00      	nop
 800c4e6:	e004      	b.n	800c4f2 <USBH_Process+0x3b6>
      break;
 800c4e8:	bf00      	nop
 800c4ea:	e002      	b.n	800c4f2 <USBH_Process+0x3b6>
      break;
 800c4ec:	bf00      	nop
 800c4ee:	e000      	b.n	800c4f2 <USBH_Process+0x3b6>
      break;
 800c4f0:	bf00      	nop
  }
  return USBH_OK;
 800c4f2:	2300      	movs	r3, #0
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3710      	adds	r7, #16
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b088      	sub	sp, #32
 800c500:	af04      	add	r7, sp, #16
 800c502:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c504:	2301      	movs	r3, #1
 800c506:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c508:	2301      	movs	r3, #1
 800c50a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	785b      	ldrb	r3, [r3, #1]
 800c510:	2b07      	cmp	r3, #7
 800c512:	f200 81c1 	bhi.w	800c898 <USBH_HandleEnum+0x39c>
 800c516:	a201      	add	r2, pc, #4	; (adr r2, 800c51c <USBH_HandleEnum+0x20>)
 800c518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c51c:	0800c53d 	.word	0x0800c53d
 800c520:	0800c5fb 	.word	0x0800c5fb
 800c524:	0800c665 	.word	0x0800c665
 800c528:	0800c6f3 	.word	0x0800c6f3
 800c52c:	0800c75d 	.word	0x0800c75d
 800c530:	0800c7cd 	.word	0x0800c7cd
 800c534:	0800c813 	.word	0x0800c813
 800c538:	0800c859 	.word	0x0800c859
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c53c:	2108      	movs	r1, #8
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 fa50 	bl	800c9e4 <USBH_Get_DevDesc>
 800c544:	4603      	mov	r3, r0
 800c546:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c548:	7bbb      	ldrb	r3, [r7, #14]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d130      	bne.n	800c5b0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2201      	movs	r2, #1
 800c55c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	7919      	ldrb	r1, [r3, #4]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c572:	b292      	uxth	r2, r2
 800c574:	9202      	str	r2, [sp, #8]
 800c576:	2200      	movs	r2, #0
 800c578:	9201      	str	r2, [sp, #4]
 800c57a:	9300      	str	r3, [sp, #0]
 800c57c:	4603      	mov	r3, r0
 800c57e:	2280      	movs	r2, #128	; 0x80
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 ff79 	bl	800d478 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	7959      	ldrb	r1, [r3, #5]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c59a:	b292      	uxth	r2, r2
 800c59c:	9202      	str	r2, [sp, #8]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	9201      	str	r2, [sp, #4]
 800c5a2:	9300      	str	r3, [sp, #0]
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 ff65 	bl	800d478 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c5ae:	e175      	b.n	800c89c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c5b0:	7bbb      	ldrb	r3, [r7, #14]
 800c5b2:	2b03      	cmp	r3, #3
 800c5b4:	f040 8172 	bne.w	800c89c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c5be:	3301      	adds	r3, #1
 800c5c0:	b2da      	uxtb	r2, r3
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c5ce:	2b03      	cmp	r3, #3
 800c5d0:	d903      	bls.n	800c5da <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	220d      	movs	r2, #13
 800c5d6:	701a      	strb	r2, [r3, #0]
      break;
 800c5d8:	e160      	b.n	800c89c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	795b      	ldrb	r3, [r3, #5]
 800c5de:	4619      	mov	r1, r3
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 ff99 	bl	800d518 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	791b      	ldrb	r3, [r3, #4]
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 ff93 	bl	800d518 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	701a      	strb	r2, [r3, #0]
      break;
 800c5f8:	e150      	b.n	800c89c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c5fa:	2112      	movs	r1, #18
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 f9f1 	bl	800c9e4 <USBH_Get_DevDesc>
 800c602:	4603      	mov	r3, r0
 800c604:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c606:	7bbb      	ldrb	r3, [r7, #14]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d103      	bne.n	800c614 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2202      	movs	r2, #2
 800c610:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c612:	e145      	b.n	800c8a0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c614:	7bbb      	ldrb	r3, [r7, #14]
 800c616:	2b03      	cmp	r3, #3
 800c618:	f040 8142 	bne.w	800c8a0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c622:	3301      	adds	r3, #1
 800c624:	b2da      	uxtb	r2, r3
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c632:	2b03      	cmp	r3, #3
 800c634:	d903      	bls.n	800c63e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	220d      	movs	r2, #13
 800c63a:	701a      	strb	r2, [r3, #0]
      break;
 800c63c:	e130      	b.n	800c8a0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	795b      	ldrb	r3, [r3, #5]
 800c642:	4619      	mov	r1, r3
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f000 ff67 	bl	800d518 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	791b      	ldrb	r3, [r3, #4]
 800c64e:	4619      	mov	r1, r3
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 ff61 	bl	800d518 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2200      	movs	r2, #0
 800c65a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2200      	movs	r2, #0
 800c660:	701a      	strb	r2, [r3, #0]
      break;
 800c662:	e11d      	b.n	800c8a0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c664:	2101      	movs	r1, #1
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f000 fa68 	bl	800cb3c <USBH_SetAddress>
 800c66c:	4603      	mov	r3, r0
 800c66e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c670:	7bbb      	ldrb	r3, [r7, #14]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d132      	bne.n	800c6dc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c676:	2002      	movs	r0, #2
 800c678:	f003 fdf5 	bl	8010266 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2201      	movs	r2, #1
 800c680:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2203      	movs	r2, #3
 800c688:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	7919      	ldrb	r1, [r3, #4]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c69a:	687a      	ldr	r2, [r7, #4]
 800c69c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c69e:	b292      	uxth	r2, r2
 800c6a0:	9202      	str	r2, [sp, #8]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	9201      	str	r2, [sp, #4]
 800c6a6:	9300      	str	r3, [sp, #0]
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	2280      	movs	r2, #128	; 0x80
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f000 fee3 	bl	800d478 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	7959      	ldrb	r1, [r3, #5]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c6c6:	b292      	uxth	r2, r2
 800c6c8:	9202      	str	r2, [sp, #8]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	9201      	str	r2, [sp, #4]
 800c6ce:	9300      	str	r3, [sp, #0]
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 fecf 	bl	800d478 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c6da:	e0e3      	b.n	800c8a4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c6dc:	7bbb      	ldrb	r3, [r7, #14]
 800c6de:	2b03      	cmp	r3, #3
 800c6e0:	f040 80e0 	bne.w	800c8a4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	220d      	movs	r2, #13
 800c6e8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	705a      	strb	r2, [r3, #1]
      break;
 800c6f0:	e0d8      	b.n	800c8a4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c6f2:	2109      	movs	r1, #9
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 f99d 	bl	800ca34 <USBH_Get_CfgDesc>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c6fe:	7bbb      	ldrb	r3, [r7, #14]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d103      	bne.n	800c70c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2204      	movs	r2, #4
 800c708:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c70a:	e0cd      	b.n	800c8a8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c70c:	7bbb      	ldrb	r3, [r7, #14]
 800c70e:	2b03      	cmp	r3, #3
 800c710:	f040 80ca 	bne.w	800c8a8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c71a:	3301      	adds	r3, #1
 800c71c:	b2da      	uxtb	r2, r3
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c72a:	2b03      	cmp	r3, #3
 800c72c:	d903      	bls.n	800c736 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	220d      	movs	r2, #13
 800c732:	701a      	strb	r2, [r3, #0]
      break;
 800c734:	e0b8      	b.n	800c8a8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	795b      	ldrb	r3, [r3, #5]
 800c73a:	4619      	mov	r1, r3
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f000 feeb 	bl	800d518 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	791b      	ldrb	r3, [r3, #4]
 800c746:	4619      	mov	r1, r3
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 fee5 	bl	800d518 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2200      	movs	r2, #0
 800c752:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2200      	movs	r2, #0
 800c758:	701a      	strb	r2, [r3, #0]
      break;
 800c75a:	e0a5      	b.n	800c8a8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c762:	4619      	mov	r1, r3
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f000 f965 	bl	800ca34 <USBH_Get_CfgDesc>
 800c76a:	4603      	mov	r3, r0
 800c76c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c76e:	7bbb      	ldrb	r3, [r7, #14]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d103      	bne.n	800c77c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2205      	movs	r2, #5
 800c778:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c77a:	e097      	b.n	800c8ac <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c77c:	7bbb      	ldrb	r3, [r7, #14]
 800c77e:	2b03      	cmp	r3, #3
 800c780:	f040 8094 	bne.w	800c8ac <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c78a:	3301      	adds	r3, #1
 800c78c:	b2da      	uxtb	r2, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c79a:	2b03      	cmp	r3, #3
 800c79c:	d903      	bls.n	800c7a6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	220d      	movs	r2, #13
 800c7a2:	701a      	strb	r2, [r3, #0]
      break;
 800c7a4:	e082      	b.n	800c8ac <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	795b      	ldrb	r3, [r3, #5]
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 feb3 	bl	800d518 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	791b      	ldrb	r3, [r3, #4]
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 fead 	bl	800d518 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	701a      	strb	r2, [r3, #0]
      break;
 800c7ca:	e06f      	b.n	800c8ac <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d019      	beq.n	800c80a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c7e2:	23ff      	movs	r3, #255	; 0xff
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 f949 	bl	800ca7c <USBH_Get_StringDesc>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c7ee:	7bbb      	ldrb	r3, [r7, #14]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d103      	bne.n	800c7fc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2206      	movs	r2, #6
 800c7f8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c7fa:	e059      	b.n	800c8b0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c7fc:	7bbb      	ldrb	r3, [r7, #14]
 800c7fe:	2b03      	cmp	r3, #3
 800c800:	d156      	bne.n	800c8b0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2206      	movs	r2, #6
 800c806:	705a      	strb	r2, [r3, #1]
      break;
 800c808:	e052      	b.n	800c8b0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2206      	movs	r2, #6
 800c80e:	705a      	strb	r2, [r3, #1]
      break;
 800c810:	e04e      	b.n	800c8b0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d019      	beq.n	800c850 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c828:	23ff      	movs	r3, #255	; 0xff
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 f926 	bl	800ca7c <USBH_Get_StringDesc>
 800c830:	4603      	mov	r3, r0
 800c832:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c834:	7bbb      	ldrb	r3, [r7, #14]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d103      	bne.n	800c842 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2207      	movs	r2, #7
 800c83e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c840:	e038      	b.n	800c8b4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c842:	7bbb      	ldrb	r3, [r7, #14]
 800c844:	2b03      	cmp	r3, #3
 800c846:	d135      	bne.n	800c8b4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2207      	movs	r2, #7
 800c84c:	705a      	strb	r2, [r3, #1]
      break;
 800c84e:	e031      	b.n	800c8b4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2207      	movs	r2, #7
 800c854:	705a      	strb	r2, [r3, #1]
      break;
 800c856:	e02d      	b.n	800c8b4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d017      	beq.n	800c892 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c86e:	23ff      	movs	r3, #255	; 0xff
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f000 f903 	bl	800ca7c <USBH_Get_StringDesc>
 800c876:	4603      	mov	r3, r0
 800c878:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c87a:	7bbb      	ldrb	r3, [r7, #14]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d102      	bne.n	800c886 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c880:	2300      	movs	r3, #0
 800c882:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c884:	e018      	b.n	800c8b8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c886:	7bbb      	ldrb	r3, [r7, #14]
 800c888:	2b03      	cmp	r3, #3
 800c88a:	d115      	bne.n	800c8b8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800c88c:	2300      	movs	r3, #0
 800c88e:	73fb      	strb	r3, [r7, #15]
      break;
 800c890:	e012      	b.n	800c8b8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800c892:	2300      	movs	r3, #0
 800c894:	73fb      	strb	r3, [r7, #15]
      break;
 800c896:	e00f      	b.n	800c8b8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800c898:	bf00      	nop
 800c89a:	e00e      	b.n	800c8ba <USBH_HandleEnum+0x3be>
      break;
 800c89c:	bf00      	nop
 800c89e:	e00c      	b.n	800c8ba <USBH_HandleEnum+0x3be>
      break;
 800c8a0:	bf00      	nop
 800c8a2:	e00a      	b.n	800c8ba <USBH_HandleEnum+0x3be>
      break;
 800c8a4:	bf00      	nop
 800c8a6:	e008      	b.n	800c8ba <USBH_HandleEnum+0x3be>
      break;
 800c8a8:	bf00      	nop
 800c8aa:	e006      	b.n	800c8ba <USBH_HandleEnum+0x3be>
      break;
 800c8ac:	bf00      	nop
 800c8ae:	e004      	b.n	800c8ba <USBH_HandleEnum+0x3be>
      break;
 800c8b0:	bf00      	nop
 800c8b2:	e002      	b.n	800c8ba <USBH_HandleEnum+0x3be>
      break;
 800c8b4:	bf00      	nop
 800c8b6:	e000      	b.n	800c8ba <USBH_HandleEnum+0x3be>
      break;
 800c8b8:	bf00      	nop
  }
  return Status;
 800c8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3710      	adds	r7, #16
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	683a      	ldr	r2, [r7, #0]
 800c8d2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c8d6:	bf00      	nop
 800c8d8:	370c      	adds	r7, #12
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e0:	4770      	bx	lr

0800c8e2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c8e2:	b580      	push	{r7, lr}
 800c8e4:	b082      	sub	sp, #8
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c8f0:	1c5a      	adds	r2, r3, #1
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 f804 	bl	800c906 <USBH_HandleSof>
}
 800c8fe:	bf00      	nop
 800c900:	3708      	adds	r7, #8
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c906:	b580      	push	{r7, lr}
 800c908:	b082      	sub	sp, #8
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	b2db      	uxtb	r3, r3
 800c914:	2b0b      	cmp	r3, #11
 800c916:	d10a      	bne.n	800c92e <USBH_HandleSof+0x28>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d005      	beq.n	800c92e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c928:	699b      	ldr	r3, [r3, #24]
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	4798      	blx	r3
  }
}
 800c92e:	bf00      	nop
 800c930:	3708      	adds	r7, #8
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}

0800c936 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c936:	b480      	push	{r7}
 800c938:	b083      	sub	sp, #12
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2201      	movs	r2, #1
 800c942:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800c946:	bf00      	nop
}
 800c948:	370c      	adds	r7, #12
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr

0800c952 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c952:	b480      	push	{r7}
 800c954:	b083      	sub	sp, #12
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2200      	movs	r2, #0
 800c95e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c962:	bf00      	nop
}
 800c964:	370c      	adds	r7, #12
 800c966:	46bd      	mov	sp, r7
 800c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96c:	4770      	bx	lr

0800c96e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c96e:	b480      	push	{r7}
 800c970:	b083      	sub	sp, #12
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2201      	movs	r2, #1
 800c97a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2200      	movs	r2, #0
 800c982:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2200      	movs	r2, #0
 800c98a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c98e:	2300      	movs	r3, #0
}
 800c990:	4618      	mov	r0, r3
 800c992:	370c      	adds	r7, #12
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr

0800c99c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b082      	sub	sp, #8
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f003 fade 	bl	800ff7e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	791b      	ldrb	r3, [r3, #4]
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f000 fda5 	bl	800d518 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	795b      	ldrb	r3, [r3, #5]
 800c9d2:	4619      	mov	r1, r3
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f000 fd9f 	bl	800d518 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c9da:	2300      	movs	r3, #0
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3708      	adds	r7, #8
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b086      	sub	sp, #24
 800c9e8:	af02      	add	r7, sp, #8
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c9f6:	78fb      	ldrb	r3, [r7, #3]
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	9300      	str	r3, [sp, #0]
 800c9fc:	4613      	mov	r3, r2
 800c9fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ca02:	2100      	movs	r1, #0
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f000 f864 	bl	800cad2 <USBH_GetDescriptor>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	73fb      	strb	r3, [r7, #15]
 800ca0e:	7bfb      	ldrb	r3, [r7, #15]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d10a      	bne.n	800ca2a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ca20:	78fa      	ldrb	r2, [r7, #3]
 800ca22:	b292      	uxth	r2, r2
 800ca24:	4619      	mov	r1, r3
 800ca26:	f000 f918 	bl	800cc5a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ca2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3710      	adds	r7, #16
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b086      	sub	sp, #24
 800ca38:	af02      	add	r7, sp, #8
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	331c      	adds	r3, #28
 800ca44:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ca46:	887b      	ldrh	r3, [r7, #2]
 800ca48:	9300      	str	r3, [sp, #0]
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca50:	2100      	movs	r1, #0
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 f83d 	bl	800cad2 <USBH_GetDescriptor>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	72fb      	strb	r3, [r7, #11]
 800ca5c:	7afb      	ldrb	r3, [r7, #11]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d107      	bne.n	800ca72 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ca68:	887a      	ldrh	r2, [r7, #2]
 800ca6a:	68f9      	ldr	r1, [r7, #12]
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f000 f964 	bl	800cd3a <USBH_ParseCfgDesc>
  }

  return status;
 800ca72:	7afb      	ldrb	r3, [r7, #11]
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3710      	adds	r7, #16
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b088      	sub	sp, #32
 800ca80:	af02      	add	r7, sp, #8
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	607a      	str	r2, [r7, #4]
 800ca86:	461a      	mov	r2, r3
 800ca88:	460b      	mov	r3, r1
 800ca8a:	72fb      	strb	r3, [r7, #11]
 800ca8c:	4613      	mov	r3, r2
 800ca8e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800ca90:	7afb      	ldrb	r3, [r7, #11]
 800ca92:	b29b      	uxth	r3, r3
 800ca94:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ca98:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800caa0:	893b      	ldrh	r3, [r7, #8]
 800caa2:	9300      	str	r3, [sp, #0]
 800caa4:	460b      	mov	r3, r1
 800caa6:	2100      	movs	r1, #0
 800caa8:	68f8      	ldr	r0, [r7, #12]
 800caaa:	f000 f812 	bl	800cad2 <USBH_GetDescriptor>
 800caae:	4603      	mov	r3, r0
 800cab0:	75fb      	strb	r3, [r7, #23]
 800cab2:	7dfb      	ldrb	r3, [r7, #23]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d107      	bne.n	800cac8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cabe:	893a      	ldrh	r2, [r7, #8]
 800cac0:	6879      	ldr	r1, [r7, #4]
 800cac2:	4618      	mov	r0, r3
 800cac4:	f000 fa37 	bl	800cf36 <USBH_ParseStringDesc>
  }

  return status;
 800cac8:	7dfb      	ldrb	r3, [r7, #23]
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3718      	adds	r7, #24
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}

0800cad2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800cad2:	b580      	push	{r7, lr}
 800cad4:	b084      	sub	sp, #16
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	60f8      	str	r0, [r7, #12]
 800cada:	607b      	str	r3, [r7, #4]
 800cadc:	460b      	mov	r3, r1
 800cade:	72fb      	strb	r3, [r7, #11]
 800cae0:	4613      	mov	r3, r2
 800cae2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	789b      	ldrb	r3, [r3, #2]
 800cae8:	2b01      	cmp	r3, #1
 800caea:	d11c      	bne.n	800cb26 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800caec:	7afb      	ldrb	r3, [r7, #11]
 800caee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800caf2:	b2da      	uxtb	r2, r3
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2206      	movs	r2, #6
 800cafc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	893a      	ldrh	r2, [r7, #8]
 800cb02:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800cb04:	893b      	ldrh	r3, [r7, #8]
 800cb06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cb0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb0e:	d104      	bne.n	800cb1a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f240 4209 	movw	r2, #1033	; 0x409
 800cb16:	829a      	strh	r2, [r3, #20]
 800cb18:	e002      	b.n	800cb20 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	8b3a      	ldrh	r2, [r7, #24]
 800cb24:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800cb26:	8b3b      	ldrh	r3, [r7, #24]
 800cb28:	461a      	mov	r2, r3
 800cb2a:	6879      	ldr	r1, [r7, #4]
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f000 fa50 	bl	800cfd2 <USBH_CtlReq>
 800cb32:	4603      	mov	r3, r0
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3710      	adds	r7, #16
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	460b      	mov	r3, r1
 800cb46:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	789b      	ldrb	r3, [r3, #2]
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d10f      	bne.n	800cb70 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2200      	movs	r2, #0
 800cb54:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2205      	movs	r2, #5
 800cb5a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800cb5c:	78fb      	ldrb	r3, [r7, #3]
 800cb5e:	b29a      	uxth	r2, r3
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2200      	movs	r2, #0
 800cb68:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800cb70:	2200      	movs	r2, #0
 800cb72:	2100      	movs	r1, #0
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 fa2c 	bl	800cfd2 <USBH_CtlReq>
 800cb7a:	4603      	mov	r3, r0
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3708      	adds	r7, #8
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	789b      	ldrb	r3, [r3, #2]
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d10e      	bne.n	800cbb6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2209      	movs	r2, #9
 800cba2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	887a      	ldrh	r2, [r7, #2]
 800cba8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2200      	movs	r2, #0
 800cbae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	2100      	movs	r1, #0
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f000 fa09 	bl	800cfd2 <USBH_CtlReq>
 800cbc0:	4603      	mov	r3, r0
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3708      	adds	r7, #8
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}

0800cbca <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800cbca:	b580      	push	{r7, lr}
 800cbcc:	b082      	sub	sp, #8
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	789b      	ldrb	r3, [r3, #2]
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d10f      	bne.n	800cbfe <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2203      	movs	r2, #3
 800cbe8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800cbea:	78fb      	ldrb	r3, [r7, #3]
 800cbec:	b29a      	uxth	r2, r3
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800cbfe:	2200      	movs	r2, #0
 800cc00:	2100      	movs	r1, #0
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f000 f9e5 	bl	800cfd2 <USBH_CtlReq>
 800cc08:	4603      	mov	r3, r0
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3708      	adds	r7, #8
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}

0800cc12 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800cc12:	b580      	push	{r7, lr}
 800cc14:	b082      	sub	sp, #8
 800cc16:	af00      	add	r7, sp, #0
 800cc18:	6078      	str	r0, [r7, #4]
 800cc1a:	460b      	mov	r3, r1
 800cc1c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	789b      	ldrb	r3, [r3, #2]
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d10f      	bne.n	800cc46 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2202      	movs	r2, #2
 800cc2a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2201      	movs	r2, #1
 800cc30:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2200      	movs	r2, #0
 800cc36:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800cc38:	78fb      	ldrb	r3, [r7, #3]
 800cc3a:	b29a      	uxth	r2, r3
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2200      	movs	r2, #0
 800cc44:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800cc46:	2200      	movs	r2, #0
 800cc48:	2100      	movs	r1, #0
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f000 f9c1 	bl	800cfd2 <USBH_CtlReq>
 800cc50:	4603      	mov	r3, r0
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3708      	adds	r7, #8
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800cc5a:	b480      	push	{r7}
 800cc5c:	b085      	sub	sp, #20
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	60f8      	str	r0, [r7, #12]
 800cc62:	60b9      	str	r1, [r7, #8]
 800cc64:	4613      	mov	r3, r2
 800cc66:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	781a      	ldrb	r2, [r3, #0]
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	785a      	ldrb	r2, [r3, #1]
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	3302      	adds	r3, #2
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	b29a      	uxth	r2, r3
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	3303      	adds	r3, #3
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	b29b      	uxth	r3, r3
 800cc88:	021b      	lsls	r3, r3, #8
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	4313      	orrs	r3, r2
 800cc8e:	b29a      	uxth	r2, r3
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	791a      	ldrb	r2, [r3, #4]
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	795a      	ldrb	r2, [r3, #5]
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	799a      	ldrb	r2, [r3, #6]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	79da      	ldrb	r2, [r3, #7]
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800ccb4:	88fb      	ldrh	r3, [r7, #6]
 800ccb6:	2b08      	cmp	r3, #8
 800ccb8:	d939      	bls.n	800cd2e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	3308      	adds	r3, #8
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	b29a      	uxth	r2, r3
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	3309      	adds	r3, #9
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	021b      	lsls	r3, r3, #8
 800cccc:	b29b      	uxth	r3, r3
 800ccce:	4313      	orrs	r3, r2
 800ccd0:	b29a      	uxth	r2, r3
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	330a      	adds	r3, #10
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	b29a      	uxth	r2, r3
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	330b      	adds	r3, #11
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	b29b      	uxth	r3, r3
 800cce6:	021b      	lsls	r3, r3, #8
 800cce8:	b29b      	uxth	r3, r3
 800ccea:	4313      	orrs	r3, r2
 800ccec:	b29a      	uxth	r2, r3
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	330c      	adds	r3, #12
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	b29a      	uxth	r2, r3
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	330d      	adds	r3, #13
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	b29b      	uxth	r3, r3
 800cd02:	021b      	lsls	r3, r3, #8
 800cd04:	b29b      	uxth	r3, r3
 800cd06:	4313      	orrs	r3, r2
 800cd08:	b29a      	uxth	r2, r3
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	7b9a      	ldrb	r2, [r3, #14]
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	7bda      	ldrb	r2, [r3, #15]
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	7c1a      	ldrb	r2, [r3, #16]
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	7c5a      	ldrb	r2, [r3, #17]
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	745a      	strb	r2, [r3, #17]
  }
}
 800cd2e:	bf00      	nop
 800cd30:	3714      	adds	r7, #20
 800cd32:	46bd      	mov	sp, r7
 800cd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd38:	4770      	bx	lr

0800cd3a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800cd3a:	b580      	push	{r7, lr}
 800cd3c:	b08a      	sub	sp, #40	; 0x28
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	60f8      	str	r0, [r7, #12]
 800cd42:	60b9      	str	r1, [r7, #8]
 800cd44:	4613      	mov	r3, r2
 800cd46:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800cd52:	2300      	movs	r3, #0
 800cd54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	781a      	ldrb	r2, [r3, #0]
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	785a      	ldrb	r2, [r3, #1]
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	3302      	adds	r3, #2
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	b29a      	uxth	r2, r3
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	3303      	adds	r3, #3
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	021b      	lsls	r3, r3, #8
 800cd7e:	b29b      	uxth	r3, r3
 800cd80:	4313      	orrs	r3, r2
 800cd82:	b29a      	uxth	r2, r3
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	791a      	ldrb	r2, [r3, #4]
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	795a      	ldrb	r2, [r3, #5]
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	799a      	ldrb	r2, [r3, #6]
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	79da      	ldrb	r2, [r3, #7]
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	7a1a      	ldrb	r2, [r3, #8]
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800cdb0:	88fb      	ldrh	r3, [r7, #6]
 800cdb2:	2b09      	cmp	r3, #9
 800cdb4:	d95f      	bls.n	800ce76 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800cdb6:	2309      	movs	r3, #9
 800cdb8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cdbe:	e051      	b.n	800ce64 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cdc0:	f107 0316 	add.w	r3, r7, #22
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cdc8:	f000 f8e8 	bl	800cf9c <USBH_GetNextDesc>
 800cdcc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800cdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd0:	785b      	ldrb	r3, [r3, #1]
 800cdd2:	2b04      	cmp	r3, #4
 800cdd4:	d146      	bne.n	800ce64 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800cdd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cdda:	221a      	movs	r2, #26
 800cddc:	fb02 f303 	mul.w	r3, r2, r3
 800cde0:	3308      	adds	r3, #8
 800cde2:	68fa      	ldr	r2, [r7, #12]
 800cde4:	4413      	add	r3, r2
 800cde6:	3302      	adds	r3, #2
 800cde8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800cdea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cdec:	69f8      	ldr	r0, [r7, #28]
 800cdee:	f000 f846 	bl	800ce7e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cdfc:	e022      	b.n	800ce44 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cdfe:	f107 0316 	add.w	r3, r7, #22
 800ce02:	4619      	mov	r1, r3
 800ce04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce06:	f000 f8c9 	bl	800cf9c <USBH_GetNextDesc>
 800ce0a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ce0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce0e:	785b      	ldrb	r3, [r3, #1]
 800ce10:	2b05      	cmp	r3, #5
 800ce12:	d117      	bne.n	800ce44 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ce14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ce18:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ce1c:	3201      	adds	r2, #1
 800ce1e:	00d2      	lsls	r2, r2, #3
 800ce20:	211a      	movs	r1, #26
 800ce22:	fb01 f303 	mul.w	r3, r1, r3
 800ce26:	4413      	add	r3, r2
 800ce28:	3308      	adds	r3, #8
 800ce2a:	68fa      	ldr	r2, [r7, #12]
 800ce2c:	4413      	add	r3, r2
 800ce2e:	3304      	adds	r3, #4
 800ce30:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800ce32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce34:	69b8      	ldr	r0, [r7, #24]
 800ce36:	f000 f851 	bl	800cedc <USBH_ParseEPDesc>
            ep_ix++;
 800ce3a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ce3e:	3301      	adds	r3, #1
 800ce40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ce44:	69fb      	ldr	r3, [r7, #28]
 800ce46:	791b      	ldrb	r3, [r3, #4]
 800ce48:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d204      	bcs.n	800ce5a <USBH_ParseCfgDesc+0x120>
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	885a      	ldrh	r2, [r3, #2]
 800ce54:	8afb      	ldrh	r3, [r7, #22]
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d8d1      	bhi.n	800cdfe <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800ce5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ce5e:	3301      	adds	r3, #1
 800ce60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ce64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ce68:	2b01      	cmp	r3, #1
 800ce6a:	d804      	bhi.n	800ce76 <USBH_ParseCfgDesc+0x13c>
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	885a      	ldrh	r2, [r3, #2]
 800ce70:	8afb      	ldrh	r3, [r7, #22]
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d8a4      	bhi.n	800cdc0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800ce76:	bf00      	nop
 800ce78:	3728      	adds	r7, #40	; 0x28
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}

0800ce7e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ce7e:	b480      	push	{r7}
 800ce80:	b083      	sub	sp, #12
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
 800ce86:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	781a      	ldrb	r2, [r3, #0]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	785a      	ldrb	r2, [r3, #1]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	789a      	ldrb	r2, [r3, #2]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	78da      	ldrb	r2, [r3, #3]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	791a      	ldrb	r2, [r3, #4]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	795a      	ldrb	r2, [r3, #5]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	799a      	ldrb	r2, [r3, #6]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	79da      	ldrb	r2, [r3, #7]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	7a1a      	ldrb	r2, [r3, #8]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	721a      	strb	r2, [r3, #8]
}
 800ced0:	bf00      	nop
 800ced2:	370c      	adds	r7, #12
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr

0800cedc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800cedc:	b480      	push	{r7}
 800cede:	b083      	sub	sp, #12
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	781a      	ldrb	r2, [r3, #0]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	785a      	ldrb	r2, [r3, #1]
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	789a      	ldrb	r2, [r3, #2]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	78da      	ldrb	r2, [r3, #3]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	3304      	adds	r3, #4
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	b29a      	uxth	r2, r3
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	3305      	adds	r3, #5
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	021b      	lsls	r3, r3, #8
 800cf18:	b29b      	uxth	r3, r3
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	b29a      	uxth	r2, r3
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	799a      	ldrb	r2, [r3, #6]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	719a      	strb	r2, [r3, #6]
}
 800cf2a:	bf00      	nop
 800cf2c:	370c      	adds	r7, #12
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr

0800cf36 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800cf36:	b480      	push	{r7}
 800cf38:	b087      	sub	sp, #28
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	60f8      	str	r0, [r7, #12]
 800cf3e:	60b9      	str	r1, [r7, #8]
 800cf40:	4613      	mov	r3, r2
 800cf42:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	3301      	adds	r3, #1
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	2b03      	cmp	r3, #3
 800cf4c:	d120      	bne.n	800cf90 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	781b      	ldrb	r3, [r3, #0]
 800cf52:	1e9a      	subs	r2, r3, #2
 800cf54:	88fb      	ldrh	r3, [r7, #6]
 800cf56:	4293      	cmp	r3, r2
 800cf58:	bf28      	it	cs
 800cf5a:	4613      	movcs	r3, r2
 800cf5c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	3302      	adds	r3, #2
 800cf62:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cf64:	2300      	movs	r3, #0
 800cf66:	82fb      	strh	r3, [r7, #22]
 800cf68:	e00b      	b.n	800cf82 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cf6a:	8afb      	ldrh	r3, [r7, #22]
 800cf6c:	68fa      	ldr	r2, [r7, #12]
 800cf6e:	4413      	add	r3, r2
 800cf70:	781a      	ldrb	r2, [r3, #0]
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	3301      	adds	r3, #1
 800cf7a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800cf7c:	8afb      	ldrh	r3, [r7, #22]
 800cf7e:	3302      	adds	r3, #2
 800cf80:	82fb      	strh	r3, [r7, #22]
 800cf82:	8afa      	ldrh	r2, [r7, #22]
 800cf84:	8abb      	ldrh	r3, [r7, #20]
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d3ef      	bcc.n	800cf6a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	701a      	strb	r2, [r3, #0]
  }
}
 800cf90:	bf00      	nop
 800cf92:	371c      	adds	r7, #28
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b085      	sub	sp, #20
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	881a      	ldrh	r2, [r3, #0]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	b29b      	uxth	r3, r3
 800cfb0:	4413      	add	r3, r2
 800cfb2:	b29a      	uxth	r2, r3
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cfc4:	68fb      	ldr	r3, [r7, #12]
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3714      	adds	r7, #20
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr

0800cfd2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800cfd2:	b580      	push	{r7, lr}
 800cfd4:	b086      	sub	sp, #24
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	60f8      	str	r0, [r7, #12]
 800cfda:	60b9      	str	r1, [r7, #8]
 800cfdc:	4613      	mov	r3, r2
 800cfde:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	789b      	ldrb	r3, [r3, #2]
 800cfe8:	2b01      	cmp	r3, #1
 800cfea:	d002      	beq.n	800cff2 <USBH_CtlReq+0x20>
 800cfec:	2b02      	cmp	r3, #2
 800cfee:	d00f      	beq.n	800d010 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800cff0:	e027      	b.n	800d042 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	68ba      	ldr	r2, [r7, #8]
 800cff6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	88fa      	ldrh	r2, [r7, #6]
 800cffc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2201      	movs	r2, #1
 800d002:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2202      	movs	r2, #2
 800d008:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d00a:	2301      	movs	r3, #1
 800d00c:	75fb      	strb	r3, [r7, #23]
      break;
 800d00e:	e018      	b.n	800d042 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d010:	68f8      	ldr	r0, [r7, #12]
 800d012:	f000 f81b 	bl	800d04c <USBH_HandleControl>
 800d016:	4603      	mov	r3, r0
 800d018:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d01a:	7dfb      	ldrb	r3, [r7, #23]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d002      	beq.n	800d026 <USBH_CtlReq+0x54>
 800d020:	7dfb      	ldrb	r3, [r7, #23]
 800d022:	2b03      	cmp	r3, #3
 800d024:	d106      	bne.n	800d034 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	2201      	movs	r2, #1
 800d02a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2200      	movs	r2, #0
 800d030:	761a      	strb	r2, [r3, #24]
      break;
 800d032:	e005      	b.n	800d040 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d034:	7dfb      	ldrb	r3, [r7, #23]
 800d036:	2b02      	cmp	r3, #2
 800d038:	d102      	bne.n	800d040 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2201      	movs	r2, #1
 800d03e:	709a      	strb	r2, [r3, #2]
      break;
 800d040:	bf00      	nop
  }
  return status;
 800d042:	7dfb      	ldrb	r3, [r7, #23]
}
 800d044:	4618      	mov	r0, r3
 800d046:	3718      	adds	r7, #24
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}

0800d04c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b086      	sub	sp, #24
 800d050:	af02      	add	r7, sp, #8
 800d052:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d054:	2301      	movs	r3, #1
 800d056:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d058:	2300      	movs	r3, #0
 800d05a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	7e1b      	ldrb	r3, [r3, #24]
 800d060:	3b01      	subs	r3, #1
 800d062:	2b0a      	cmp	r3, #10
 800d064:	f200 8158 	bhi.w	800d318 <USBH_HandleControl+0x2cc>
 800d068:	a201      	add	r2, pc, #4	; (adr r2, 800d070 <USBH_HandleControl+0x24>)
 800d06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d06e:	bf00      	nop
 800d070:	0800d09d 	.word	0x0800d09d
 800d074:	0800d0b7 	.word	0x0800d0b7
 800d078:	0800d121 	.word	0x0800d121
 800d07c:	0800d147 	.word	0x0800d147
 800d080:	0800d17f 	.word	0x0800d17f
 800d084:	0800d1ab 	.word	0x0800d1ab
 800d088:	0800d1fd 	.word	0x0800d1fd
 800d08c:	0800d21f 	.word	0x0800d21f
 800d090:	0800d25b 	.word	0x0800d25b
 800d094:	0800d283 	.word	0x0800d283
 800d098:	0800d2c1 	.word	0x0800d2c1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f103 0110 	add.w	r1, r3, #16
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	795b      	ldrb	r3, [r3, #5]
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f000 f945 	bl	800d338 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2202      	movs	r2, #2
 800d0b2:	761a      	strb	r2, [r3, #24]
      break;
 800d0b4:	e13b      	b.n	800d32e <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	795b      	ldrb	r3, [r3, #5]
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f003 f84b 	bl	8010158 <USBH_LL_GetURBState>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d0c6:	7bbb      	ldrb	r3, [r7, #14]
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d11e      	bne.n	800d10a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	7c1b      	ldrb	r3, [r3, #16]
 800d0d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d0d4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	8adb      	ldrh	r3, [r3, #22]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d00a      	beq.n	800d0f4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d0de:	7b7b      	ldrb	r3, [r7, #13]
 800d0e0:	2b80      	cmp	r3, #128	; 0x80
 800d0e2:	d103      	bne.n	800d0ec <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2203      	movs	r2, #3
 800d0e8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d0ea:	e117      	b.n	800d31c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2205      	movs	r2, #5
 800d0f0:	761a      	strb	r2, [r3, #24]
      break;
 800d0f2:	e113      	b.n	800d31c <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800d0f4:	7b7b      	ldrb	r3, [r7, #13]
 800d0f6:	2b80      	cmp	r3, #128	; 0x80
 800d0f8:	d103      	bne.n	800d102 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2209      	movs	r2, #9
 800d0fe:	761a      	strb	r2, [r3, #24]
      break;
 800d100:	e10c      	b.n	800d31c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2207      	movs	r2, #7
 800d106:	761a      	strb	r2, [r3, #24]
      break;
 800d108:	e108      	b.n	800d31c <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d10a:	7bbb      	ldrb	r3, [r7, #14]
 800d10c:	2b04      	cmp	r3, #4
 800d10e:	d003      	beq.n	800d118 <USBH_HandleControl+0xcc>
 800d110:	7bbb      	ldrb	r3, [r7, #14]
 800d112:	2b02      	cmp	r3, #2
 800d114:	f040 8102 	bne.w	800d31c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	220b      	movs	r2, #11
 800d11c:	761a      	strb	r2, [r3, #24]
      break;
 800d11e:	e0fd      	b.n	800d31c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d126:	b29a      	uxth	r2, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6899      	ldr	r1, [r3, #8]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	899a      	ldrh	r2, [r3, #12]
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	791b      	ldrb	r3, [r3, #4]
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f000 f93c 	bl	800d3b6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2204      	movs	r2, #4
 800d142:	761a      	strb	r2, [r3, #24]
      break;
 800d144:	e0f3      	b.n	800d32e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	791b      	ldrb	r3, [r3, #4]
 800d14a:	4619      	mov	r1, r3
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f003 f803 	bl	8010158 <USBH_LL_GetURBState>
 800d152:	4603      	mov	r3, r0
 800d154:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d156:	7bbb      	ldrb	r3, [r7, #14]
 800d158:	2b01      	cmp	r3, #1
 800d15a:	d102      	bne.n	800d162 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2209      	movs	r2, #9
 800d160:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d162:	7bbb      	ldrb	r3, [r7, #14]
 800d164:	2b05      	cmp	r3, #5
 800d166:	d102      	bne.n	800d16e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d168:	2303      	movs	r3, #3
 800d16a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d16c:	e0d8      	b.n	800d320 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800d16e:	7bbb      	ldrb	r3, [r7, #14]
 800d170:	2b04      	cmp	r3, #4
 800d172:	f040 80d5 	bne.w	800d320 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	220b      	movs	r2, #11
 800d17a:	761a      	strb	r2, [r3, #24]
      break;
 800d17c:	e0d0      	b.n	800d320 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6899      	ldr	r1, [r3, #8]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	899a      	ldrh	r2, [r3, #12]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	7958      	ldrb	r0, [r3, #5]
 800d18a:	2301      	movs	r3, #1
 800d18c:	9300      	str	r3, [sp, #0]
 800d18e:	4603      	mov	r3, r0
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 f8eb 	bl	800d36c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d19c:	b29a      	uxth	r2, r3
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2206      	movs	r2, #6
 800d1a6:	761a      	strb	r2, [r3, #24]
      break;
 800d1a8:	e0c1      	b.n	800d32e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	795b      	ldrb	r3, [r3, #5]
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f002 ffd1 	bl	8010158 <USBH_LL_GetURBState>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d1ba:	7bbb      	ldrb	r3, [r7, #14]
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d103      	bne.n	800d1c8 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2207      	movs	r2, #7
 800d1c4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d1c6:	e0ad      	b.n	800d324 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800d1c8:	7bbb      	ldrb	r3, [r7, #14]
 800d1ca:	2b05      	cmp	r3, #5
 800d1cc:	d105      	bne.n	800d1da <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	220c      	movs	r2, #12
 800d1d2:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d1d4:	2303      	movs	r3, #3
 800d1d6:	73fb      	strb	r3, [r7, #15]
      break;
 800d1d8:	e0a4      	b.n	800d324 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d1da:	7bbb      	ldrb	r3, [r7, #14]
 800d1dc:	2b02      	cmp	r3, #2
 800d1de:	d103      	bne.n	800d1e8 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2205      	movs	r2, #5
 800d1e4:	761a      	strb	r2, [r3, #24]
      break;
 800d1e6:	e09d      	b.n	800d324 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800d1e8:	7bbb      	ldrb	r3, [r7, #14]
 800d1ea:	2b04      	cmp	r3, #4
 800d1ec:	f040 809a 	bne.w	800d324 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	220b      	movs	r2, #11
 800d1f4:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d1f6:	2302      	movs	r3, #2
 800d1f8:	73fb      	strb	r3, [r7, #15]
      break;
 800d1fa:	e093      	b.n	800d324 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	791b      	ldrb	r3, [r3, #4]
 800d200:	2200      	movs	r2, #0
 800d202:	2100      	movs	r1, #0
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f000 f8d6 	bl	800d3b6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d210:	b29a      	uxth	r2, r3
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2208      	movs	r2, #8
 800d21a:	761a      	strb	r2, [r3, #24]

      break;
 800d21c:	e087      	b.n	800d32e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	791b      	ldrb	r3, [r3, #4]
 800d222:	4619      	mov	r1, r3
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f002 ff97 	bl	8010158 <USBH_LL_GetURBState>
 800d22a:	4603      	mov	r3, r0
 800d22c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d22e:	7bbb      	ldrb	r3, [r7, #14]
 800d230:	2b01      	cmp	r3, #1
 800d232:	d105      	bne.n	800d240 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	220d      	movs	r2, #13
 800d238:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d23a:	2300      	movs	r3, #0
 800d23c:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d23e:	e073      	b.n	800d328 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800d240:	7bbb      	ldrb	r3, [r7, #14]
 800d242:	2b04      	cmp	r3, #4
 800d244:	d103      	bne.n	800d24e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	220b      	movs	r2, #11
 800d24a:	761a      	strb	r2, [r3, #24]
      break;
 800d24c:	e06c      	b.n	800d328 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800d24e:	7bbb      	ldrb	r3, [r7, #14]
 800d250:	2b05      	cmp	r3, #5
 800d252:	d169      	bne.n	800d328 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800d254:	2303      	movs	r3, #3
 800d256:	73fb      	strb	r3, [r7, #15]
      break;
 800d258:	e066      	b.n	800d328 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	795a      	ldrb	r2, [r3, #5]
 800d25e:	2301      	movs	r3, #1
 800d260:	9300      	str	r3, [sp, #0]
 800d262:	4613      	mov	r3, r2
 800d264:	2200      	movs	r2, #0
 800d266:	2100      	movs	r1, #0
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 f87f 	bl	800d36c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d274:	b29a      	uxth	r2, r3
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	220a      	movs	r2, #10
 800d27e:	761a      	strb	r2, [r3, #24]
      break;
 800d280:	e055      	b.n	800d32e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	795b      	ldrb	r3, [r3, #5]
 800d286:	4619      	mov	r1, r3
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f002 ff65 	bl	8010158 <USBH_LL_GetURBState>
 800d28e:	4603      	mov	r3, r0
 800d290:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d292:	7bbb      	ldrb	r3, [r7, #14]
 800d294:	2b01      	cmp	r3, #1
 800d296:	d105      	bne.n	800d2a4 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800d298:	2300      	movs	r3, #0
 800d29a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	220d      	movs	r2, #13
 800d2a0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d2a2:	e043      	b.n	800d32c <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d2a4:	7bbb      	ldrb	r3, [r7, #14]
 800d2a6:	2b02      	cmp	r3, #2
 800d2a8:	d103      	bne.n	800d2b2 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2209      	movs	r2, #9
 800d2ae:	761a      	strb	r2, [r3, #24]
      break;
 800d2b0:	e03c      	b.n	800d32c <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800d2b2:	7bbb      	ldrb	r3, [r7, #14]
 800d2b4:	2b04      	cmp	r3, #4
 800d2b6:	d139      	bne.n	800d32c <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	220b      	movs	r2, #11
 800d2bc:	761a      	strb	r2, [r3, #24]
      break;
 800d2be:	e035      	b.n	800d32c <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	7e5b      	ldrb	r3, [r3, #25]
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	b2da      	uxtb	r2, r3
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	765a      	strb	r2, [r3, #25]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	7e5b      	ldrb	r3, [r3, #25]
 800d2d0:	2b02      	cmp	r3, #2
 800d2d2:	d806      	bhi.n	800d2e2 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2201      	movs	r2, #1
 800d2de:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d2e0:	e025      	b.n	800d32e <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d2e8:	2106      	movs	r1, #6
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	795b      	ldrb	r3, [r3, #5]
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f000 f90c 	bl	800d518 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	791b      	ldrb	r3, [r3, #4]
 800d304:	4619      	mov	r1, r3
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f000 f906 	bl	800d518 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2200      	movs	r2, #0
 800d310:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d312:	2302      	movs	r3, #2
 800d314:	73fb      	strb	r3, [r7, #15]
      break;
 800d316:	e00a      	b.n	800d32e <USBH_HandleControl+0x2e2>

    default:
      break;
 800d318:	bf00      	nop
 800d31a:	e008      	b.n	800d32e <USBH_HandleControl+0x2e2>
      break;
 800d31c:	bf00      	nop
 800d31e:	e006      	b.n	800d32e <USBH_HandleControl+0x2e2>
      break;
 800d320:	bf00      	nop
 800d322:	e004      	b.n	800d32e <USBH_HandleControl+0x2e2>
      break;
 800d324:	bf00      	nop
 800d326:	e002      	b.n	800d32e <USBH_HandleControl+0x2e2>
      break;
 800d328:	bf00      	nop
 800d32a:	e000      	b.n	800d32e <USBH_HandleControl+0x2e2>
      break;
 800d32c:	bf00      	nop
  }

  return status;
 800d32e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d330:	4618      	mov	r0, r3
 800d332:	3710      	adds	r7, #16
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}

0800d338 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b088      	sub	sp, #32
 800d33c:	af04      	add	r7, sp, #16
 800d33e:	60f8      	str	r0, [r7, #12]
 800d340:	60b9      	str	r1, [r7, #8]
 800d342:	4613      	mov	r3, r2
 800d344:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d346:	79f9      	ldrb	r1, [r7, #7]
 800d348:	2300      	movs	r3, #0
 800d34a:	9303      	str	r3, [sp, #12]
 800d34c:	2308      	movs	r3, #8
 800d34e:	9302      	str	r3, [sp, #8]
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	9301      	str	r3, [sp, #4]
 800d354:	2300      	movs	r3, #0
 800d356:	9300      	str	r3, [sp, #0]
 800d358:	2300      	movs	r3, #0
 800d35a:	2200      	movs	r2, #0
 800d35c:	68f8      	ldr	r0, [r7, #12]
 800d35e:	f002 feca 	bl	80100f6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800d362:	2300      	movs	r3, #0
}
 800d364:	4618      	mov	r0, r3
 800d366:	3710      	adds	r7, #16
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b088      	sub	sp, #32
 800d370:	af04      	add	r7, sp, #16
 800d372:	60f8      	str	r0, [r7, #12]
 800d374:	60b9      	str	r1, [r7, #8]
 800d376:	4611      	mov	r1, r2
 800d378:	461a      	mov	r2, r3
 800d37a:	460b      	mov	r3, r1
 800d37c:	80fb      	strh	r3, [r7, #6]
 800d37e:	4613      	mov	r3, r2
 800d380:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d001      	beq.n	800d390 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d38c:	2300      	movs	r3, #0
 800d38e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d390:	7979      	ldrb	r1, [r7, #5]
 800d392:	7e3b      	ldrb	r3, [r7, #24]
 800d394:	9303      	str	r3, [sp, #12]
 800d396:	88fb      	ldrh	r3, [r7, #6]
 800d398:	9302      	str	r3, [sp, #8]
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	9301      	str	r3, [sp, #4]
 800d39e:	2301      	movs	r3, #1
 800d3a0:	9300      	str	r3, [sp, #0]
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	68f8      	ldr	r0, [r7, #12]
 800d3a8:	f002 fea5 	bl	80100f6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d3ac:	2300      	movs	r3, #0
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3710      	adds	r7, #16
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}

0800d3b6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d3b6:	b580      	push	{r7, lr}
 800d3b8:	b088      	sub	sp, #32
 800d3ba:	af04      	add	r7, sp, #16
 800d3bc:	60f8      	str	r0, [r7, #12]
 800d3be:	60b9      	str	r1, [r7, #8]
 800d3c0:	4611      	mov	r1, r2
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	80fb      	strh	r3, [r7, #6]
 800d3c8:	4613      	mov	r3, r2
 800d3ca:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d3cc:	7979      	ldrb	r1, [r7, #5]
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	9303      	str	r3, [sp, #12]
 800d3d2:	88fb      	ldrh	r3, [r7, #6]
 800d3d4:	9302      	str	r3, [sp, #8]
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	9301      	str	r3, [sp, #4]
 800d3da:	2301      	movs	r3, #1
 800d3dc:	9300      	str	r3, [sp, #0]
 800d3de:	2300      	movs	r3, #0
 800d3e0:	2201      	movs	r2, #1
 800d3e2:	68f8      	ldr	r0, [r7, #12]
 800d3e4:	f002 fe87 	bl	80100f6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d3e8:	2300      	movs	r3, #0

}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3710      	adds	r7, #16
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}

0800d3f2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d3f2:	b580      	push	{r7, lr}
 800d3f4:	b088      	sub	sp, #32
 800d3f6:	af04      	add	r7, sp, #16
 800d3f8:	60f8      	str	r0, [r7, #12]
 800d3fa:	60b9      	str	r1, [r7, #8]
 800d3fc:	4611      	mov	r1, r2
 800d3fe:	461a      	mov	r2, r3
 800d400:	460b      	mov	r3, r1
 800d402:	80fb      	strh	r3, [r7, #6]
 800d404:	4613      	mov	r3, r2
 800d406:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d001      	beq.n	800d416 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d412:	2300      	movs	r3, #0
 800d414:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d416:	7979      	ldrb	r1, [r7, #5]
 800d418:	7e3b      	ldrb	r3, [r7, #24]
 800d41a:	9303      	str	r3, [sp, #12]
 800d41c:	88fb      	ldrh	r3, [r7, #6]
 800d41e:	9302      	str	r3, [sp, #8]
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	9301      	str	r3, [sp, #4]
 800d424:	2301      	movs	r3, #1
 800d426:	9300      	str	r3, [sp, #0]
 800d428:	2302      	movs	r3, #2
 800d42a:	2200      	movs	r2, #0
 800d42c:	68f8      	ldr	r0, [r7, #12]
 800d42e:	f002 fe62 	bl	80100f6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d432:	2300      	movs	r3, #0
}
 800d434:	4618      	mov	r0, r3
 800d436:	3710      	adds	r7, #16
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b088      	sub	sp, #32
 800d440:	af04      	add	r7, sp, #16
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	4611      	mov	r1, r2
 800d448:	461a      	mov	r2, r3
 800d44a:	460b      	mov	r3, r1
 800d44c:	80fb      	strh	r3, [r7, #6]
 800d44e:	4613      	mov	r3, r2
 800d450:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d452:	7979      	ldrb	r1, [r7, #5]
 800d454:	2300      	movs	r3, #0
 800d456:	9303      	str	r3, [sp, #12]
 800d458:	88fb      	ldrh	r3, [r7, #6]
 800d45a:	9302      	str	r3, [sp, #8]
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	9301      	str	r3, [sp, #4]
 800d460:	2301      	movs	r3, #1
 800d462:	9300      	str	r3, [sp, #0]
 800d464:	2302      	movs	r3, #2
 800d466:	2201      	movs	r2, #1
 800d468:	68f8      	ldr	r0, [r7, #12]
 800d46a:	f002 fe44 	bl	80100f6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d46e:	2300      	movs	r3, #0
}
 800d470:	4618      	mov	r0, r3
 800d472:	3710      	adds	r7, #16
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b086      	sub	sp, #24
 800d47c:	af04      	add	r7, sp, #16
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	4608      	mov	r0, r1
 800d482:	4611      	mov	r1, r2
 800d484:	461a      	mov	r2, r3
 800d486:	4603      	mov	r3, r0
 800d488:	70fb      	strb	r3, [r7, #3]
 800d48a:	460b      	mov	r3, r1
 800d48c:	70bb      	strb	r3, [r7, #2]
 800d48e:	4613      	mov	r3, r2
 800d490:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d492:	7878      	ldrb	r0, [r7, #1]
 800d494:	78ba      	ldrb	r2, [r7, #2]
 800d496:	78f9      	ldrb	r1, [r7, #3]
 800d498:	8b3b      	ldrh	r3, [r7, #24]
 800d49a:	9302      	str	r3, [sp, #8]
 800d49c:	7d3b      	ldrb	r3, [r7, #20]
 800d49e:	9301      	str	r3, [sp, #4]
 800d4a0:	7c3b      	ldrb	r3, [r7, #16]
 800d4a2:	9300      	str	r3, [sp, #0]
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f002 fdd7 	bl	801005a <USBH_LL_OpenPipe>

  return USBH_OK;
 800d4ac:	2300      	movs	r3, #0
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3708      	adds	r7, #8
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}

0800d4b6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d4b6:	b580      	push	{r7, lr}
 800d4b8:	b082      	sub	sp, #8
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	6078      	str	r0, [r7, #4]
 800d4be:	460b      	mov	r3, r1
 800d4c0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800d4c2:	78fb      	ldrb	r3, [r7, #3]
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f002 fdf6 	bl	80100b8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d4cc:	2300      	movs	r3, #0
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3708      	adds	r7, #8
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}

0800d4d6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d4d6:	b580      	push	{r7, lr}
 800d4d8:	b084      	sub	sp, #16
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	6078      	str	r0, [r7, #4]
 800d4de:	460b      	mov	r3, r1
 800d4e0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f000 f836 	bl	800d554 <USBH_GetFreePipe>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d4ec:	89fb      	ldrh	r3, [r7, #14]
 800d4ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	d00a      	beq.n	800d50c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800d4f6:	78fa      	ldrb	r2, [r7, #3]
 800d4f8:	89fb      	ldrh	r3, [r7, #14]
 800d4fa:	f003 030f 	and.w	r3, r3, #15
 800d4fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d502:	6879      	ldr	r1, [r7, #4]
 800d504:	33e0      	adds	r3, #224	; 0xe0
 800d506:	009b      	lsls	r3, r3, #2
 800d508:	440b      	add	r3, r1
 800d50a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d50c:	89fb      	ldrh	r3, [r7, #14]
 800d50e:	b2db      	uxtb	r3, r3
}
 800d510:	4618      	mov	r0, r3
 800d512:	3710      	adds	r7, #16
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d518:	b480      	push	{r7}
 800d51a:	b083      	sub	sp, #12
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	460b      	mov	r3, r1
 800d522:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800d524:	78fb      	ldrb	r3, [r7, #3]
 800d526:	2b0a      	cmp	r3, #10
 800d528:	d80d      	bhi.n	800d546 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d52a:	78fb      	ldrb	r3, [r7, #3]
 800d52c:	687a      	ldr	r2, [r7, #4]
 800d52e:	33e0      	adds	r3, #224	; 0xe0
 800d530:	009b      	lsls	r3, r3, #2
 800d532:	4413      	add	r3, r2
 800d534:	685a      	ldr	r2, [r3, #4]
 800d536:	78fb      	ldrb	r3, [r7, #3]
 800d538:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d53c:	6879      	ldr	r1, [r7, #4]
 800d53e:	33e0      	adds	r3, #224	; 0xe0
 800d540:	009b      	lsls	r3, r3, #2
 800d542:	440b      	add	r3, r1
 800d544:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d546:	2300      	movs	r3, #0
}
 800d548:	4618      	mov	r0, r3
 800d54a:	370c      	adds	r7, #12
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr

0800d554 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d554:	b480      	push	{r7}
 800d556:	b085      	sub	sp, #20
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d55c:	2300      	movs	r3, #0
 800d55e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800d560:	2300      	movs	r3, #0
 800d562:	73fb      	strb	r3, [r7, #15]
 800d564:	e00f      	b.n	800d586 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d566:	7bfb      	ldrb	r3, [r7, #15]
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	33e0      	adds	r3, #224	; 0xe0
 800d56c:	009b      	lsls	r3, r3, #2
 800d56e:	4413      	add	r3, r2
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d576:	2b00      	cmp	r3, #0
 800d578:	d102      	bne.n	800d580 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d57a:	7bfb      	ldrb	r3, [r7, #15]
 800d57c:	b29b      	uxth	r3, r3
 800d57e:	e007      	b.n	800d590 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800d580:	7bfb      	ldrb	r3, [r7, #15]
 800d582:	3301      	adds	r3, #1
 800d584:	73fb      	strb	r3, [r7, #15]
 800d586:	7bfb      	ldrb	r3, [r7, #15]
 800d588:	2b0a      	cmp	r3, #10
 800d58a:	d9ec      	bls.n	800d566 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d58c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d590:	4618      	mov	r0, r3
 800d592:	3714      	adds	r7, #20
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr

0800d59c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b084      	sub	sp, #16
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d5a6:	79fb      	ldrb	r3, [r7, #7]
 800d5a8:	4a08      	ldr	r2, [pc, #32]	; (800d5cc <disk_status+0x30>)
 800d5aa:	009b      	lsls	r3, r3, #2
 800d5ac:	4413      	add	r3, r2
 800d5ae:	685b      	ldr	r3, [r3, #4]
 800d5b0:	685b      	ldr	r3, [r3, #4]
 800d5b2:	79fa      	ldrb	r2, [r7, #7]
 800d5b4:	4905      	ldr	r1, [pc, #20]	; (800d5cc <disk_status+0x30>)
 800d5b6:	440a      	add	r2, r1
 800d5b8:	7a12      	ldrb	r2, [r2, #8]
 800d5ba:	4610      	mov	r0, r2
 800d5bc:	4798      	blx	r3
 800d5be:	4603      	mov	r3, r0
 800d5c0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d5c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3710      	adds	r7, #16
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	2000139c 	.word	0x2000139c

0800d5d0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d5de:	79fb      	ldrb	r3, [r7, #7]
 800d5e0:	4a0d      	ldr	r2, [pc, #52]	; (800d618 <disk_initialize+0x48>)
 800d5e2:	5cd3      	ldrb	r3, [r2, r3]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d111      	bne.n	800d60c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d5e8:	79fb      	ldrb	r3, [r7, #7]
 800d5ea:	4a0b      	ldr	r2, [pc, #44]	; (800d618 <disk_initialize+0x48>)
 800d5ec:	2101      	movs	r1, #1
 800d5ee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d5f0:	79fb      	ldrb	r3, [r7, #7]
 800d5f2:	4a09      	ldr	r2, [pc, #36]	; (800d618 <disk_initialize+0x48>)
 800d5f4:	009b      	lsls	r3, r3, #2
 800d5f6:	4413      	add	r3, r2
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	79fa      	ldrb	r2, [r7, #7]
 800d5fe:	4906      	ldr	r1, [pc, #24]	; (800d618 <disk_initialize+0x48>)
 800d600:	440a      	add	r2, r1
 800d602:	7a12      	ldrb	r2, [r2, #8]
 800d604:	4610      	mov	r0, r2
 800d606:	4798      	blx	r3
 800d608:	4603      	mov	r3, r0
 800d60a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d60c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3710      	adds	r7, #16
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	2000139c 	.word	0x2000139c

0800d61c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d61c:	b590      	push	{r4, r7, lr}
 800d61e:	b087      	sub	sp, #28
 800d620:	af00      	add	r7, sp, #0
 800d622:	60b9      	str	r1, [r7, #8]
 800d624:	607a      	str	r2, [r7, #4]
 800d626:	603b      	str	r3, [r7, #0]
 800d628:	4603      	mov	r3, r0
 800d62a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d62c:	7bfb      	ldrb	r3, [r7, #15]
 800d62e:	4a0a      	ldr	r2, [pc, #40]	; (800d658 <disk_read+0x3c>)
 800d630:	009b      	lsls	r3, r3, #2
 800d632:	4413      	add	r3, r2
 800d634:	685b      	ldr	r3, [r3, #4]
 800d636:	689c      	ldr	r4, [r3, #8]
 800d638:	7bfb      	ldrb	r3, [r7, #15]
 800d63a:	4a07      	ldr	r2, [pc, #28]	; (800d658 <disk_read+0x3c>)
 800d63c:	4413      	add	r3, r2
 800d63e:	7a18      	ldrb	r0, [r3, #8]
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	687a      	ldr	r2, [r7, #4]
 800d644:	68b9      	ldr	r1, [r7, #8]
 800d646:	47a0      	blx	r4
 800d648:	4603      	mov	r3, r0
 800d64a:	75fb      	strb	r3, [r7, #23]
  return res;
 800d64c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d64e:	4618      	mov	r0, r3
 800d650:	371c      	adds	r7, #28
 800d652:	46bd      	mov	sp, r7
 800d654:	bd90      	pop	{r4, r7, pc}
 800d656:	bf00      	nop
 800d658:	2000139c 	.word	0x2000139c

0800d65c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d65c:	b590      	push	{r4, r7, lr}
 800d65e:	b087      	sub	sp, #28
 800d660:	af00      	add	r7, sp, #0
 800d662:	60b9      	str	r1, [r7, #8]
 800d664:	607a      	str	r2, [r7, #4]
 800d666:	603b      	str	r3, [r7, #0]
 800d668:	4603      	mov	r3, r0
 800d66a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d66c:	7bfb      	ldrb	r3, [r7, #15]
 800d66e:	4a0a      	ldr	r2, [pc, #40]	; (800d698 <disk_write+0x3c>)
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	4413      	add	r3, r2
 800d674:	685b      	ldr	r3, [r3, #4]
 800d676:	68dc      	ldr	r4, [r3, #12]
 800d678:	7bfb      	ldrb	r3, [r7, #15]
 800d67a:	4a07      	ldr	r2, [pc, #28]	; (800d698 <disk_write+0x3c>)
 800d67c:	4413      	add	r3, r2
 800d67e:	7a18      	ldrb	r0, [r3, #8]
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	687a      	ldr	r2, [r7, #4]
 800d684:	68b9      	ldr	r1, [r7, #8]
 800d686:	47a0      	blx	r4
 800d688:	4603      	mov	r3, r0
 800d68a:	75fb      	strb	r3, [r7, #23]
  return res;
 800d68c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d68e:	4618      	mov	r0, r3
 800d690:	371c      	adds	r7, #28
 800d692:	46bd      	mov	sp, r7
 800d694:	bd90      	pop	{r4, r7, pc}
 800d696:	bf00      	nop
 800d698:	2000139c 	.word	0x2000139c

0800d69c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b084      	sub	sp, #16
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	603a      	str	r2, [r7, #0]
 800d6a6:	71fb      	strb	r3, [r7, #7]
 800d6a8:	460b      	mov	r3, r1
 800d6aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d6ac:	79fb      	ldrb	r3, [r7, #7]
 800d6ae:	4a09      	ldr	r2, [pc, #36]	; (800d6d4 <disk_ioctl+0x38>)
 800d6b0:	009b      	lsls	r3, r3, #2
 800d6b2:	4413      	add	r3, r2
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	691b      	ldr	r3, [r3, #16]
 800d6b8:	79fa      	ldrb	r2, [r7, #7]
 800d6ba:	4906      	ldr	r1, [pc, #24]	; (800d6d4 <disk_ioctl+0x38>)
 800d6bc:	440a      	add	r2, r1
 800d6be:	7a10      	ldrb	r0, [r2, #8]
 800d6c0:	79b9      	ldrb	r1, [r7, #6]
 800d6c2:	683a      	ldr	r2, [r7, #0]
 800d6c4:	4798      	blx	r3
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	73fb      	strb	r3, [r7, #15]
  return res;
 800d6ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	3710      	adds	r7, #16
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}
 800d6d4:	2000139c 	.word	0x2000139c

0800d6d8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b085      	sub	sp, #20
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d6e8:	89fb      	ldrh	r3, [r7, #14]
 800d6ea:	021b      	lsls	r3, r3, #8
 800d6ec:	b21a      	sxth	r2, r3
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	b21b      	sxth	r3, r3
 800d6f4:	4313      	orrs	r3, r2
 800d6f6:	b21b      	sxth	r3, r3
 800d6f8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d6fa:	89fb      	ldrh	r3, [r7, #14]
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3714      	adds	r7, #20
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr

0800d708 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d708:	b480      	push	{r7}
 800d70a:	b085      	sub	sp, #20
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	3303      	adds	r3, #3
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	021b      	lsls	r3, r3, #8
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	3202      	adds	r2, #2
 800d720:	7812      	ldrb	r2, [r2, #0]
 800d722:	4313      	orrs	r3, r2
 800d724:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	021b      	lsls	r3, r3, #8
 800d72a:	687a      	ldr	r2, [r7, #4]
 800d72c:	3201      	adds	r2, #1
 800d72e:	7812      	ldrb	r2, [r2, #0]
 800d730:	4313      	orrs	r3, r2
 800d732:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	021b      	lsls	r3, r3, #8
 800d738:	687a      	ldr	r2, [r7, #4]
 800d73a:	7812      	ldrb	r2, [r2, #0]
 800d73c:	4313      	orrs	r3, r2
 800d73e:	60fb      	str	r3, [r7, #12]
	return rv;
 800d740:	68fb      	ldr	r3, [r7, #12]
}
 800d742:	4618      	mov	r0, r3
 800d744:	3714      	adds	r7, #20
 800d746:	46bd      	mov	sp, r7
 800d748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74c:	4770      	bx	lr

0800d74e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d74e:	b480      	push	{r7}
 800d750:	b083      	sub	sp, #12
 800d752:	af00      	add	r7, sp, #0
 800d754:	6078      	str	r0, [r7, #4]
 800d756:	460b      	mov	r3, r1
 800d758:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	1c5a      	adds	r2, r3, #1
 800d75e:	607a      	str	r2, [r7, #4]
 800d760:	887a      	ldrh	r2, [r7, #2]
 800d762:	b2d2      	uxtb	r2, r2
 800d764:	701a      	strb	r2, [r3, #0]
 800d766:	887b      	ldrh	r3, [r7, #2]
 800d768:	0a1b      	lsrs	r3, r3, #8
 800d76a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	1c5a      	adds	r2, r3, #1
 800d770:	607a      	str	r2, [r7, #4]
 800d772:	887a      	ldrh	r2, [r7, #2]
 800d774:	b2d2      	uxtb	r2, r2
 800d776:	701a      	strb	r2, [r3, #0]
}
 800d778:	bf00      	nop
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr

0800d784 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d784:	b480      	push	{r7}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	1c5a      	adds	r2, r3, #1
 800d792:	607a      	str	r2, [r7, #4]
 800d794:	683a      	ldr	r2, [r7, #0]
 800d796:	b2d2      	uxtb	r2, r2
 800d798:	701a      	strb	r2, [r3, #0]
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	0a1b      	lsrs	r3, r3, #8
 800d79e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	1c5a      	adds	r2, r3, #1
 800d7a4:	607a      	str	r2, [r7, #4]
 800d7a6:	683a      	ldr	r2, [r7, #0]
 800d7a8:	b2d2      	uxtb	r2, r2
 800d7aa:	701a      	strb	r2, [r3, #0]
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	0a1b      	lsrs	r3, r3, #8
 800d7b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	1c5a      	adds	r2, r3, #1
 800d7b6:	607a      	str	r2, [r7, #4]
 800d7b8:	683a      	ldr	r2, [r7, #0]
 800d7ba:	b2d2      	uxtb	r2, r2
 800d7bc:	701a      	strb	r2, [r3, #0]
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	0a1b      	lsrs	r3, r3, #8
 800d7c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	1c5a      	adds	r2, r3, #1
 800d7c8:	607a      	str	r2, [r7, #4]
 800d7ca:	683a      	ldr	r2, [r7, #0]
 800d7cc:	b2d2      	uxtb	r2, r2
 800d7ce:	701a      	strb	r2, [r3, #0]
}
 800d7d0:	bf00      	nop
 800d7d2:	370c      	adds	r7, #12
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr

0800d7dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d7dc:	b480      	push	{r7}
 800d7de:	b087      	sub	sp, #28
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d00d      	beq.n	800d812 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d7f6:	693a      	ldr	r2, [r7, #16]
 800d7f8:	1c53      	adds	r3, r2, #1
 800d7fa:	613b      	str	r3, [r7, #16]
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	1c59      	adds	r1, r3, #1
 800d800:	6179      	str	r1, [r7, #20]
 800d802:	7812      	ldrb	r2, [r2, #0]
 800d804:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	3b01      	subs	r3, #1
 800d80a:	607b      	str	r3, [r7, #4]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d1f1      	bne.n	800d7f6 <mem_cpy+0x1a>
	}
}
 800d812:	bf00      	nop
 800d814:	371c      	adds	r7, #28
 800d816:	46bd      	mov	sp, r7
 800d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81c:	4770      	bx	lr

0800d81e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d81e:	b480      	push	{r7}
 800d820:	b087      	sub	sp, #28
 800d822:	af00      	add	r7, sp, #0
 800d824:	60f8      	str	r0, [r7, #12]
 800d826:	60b9      	str	r1, [r7, #8]
 800d828:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	1c5a      	adds	r2, r3, #1
 800d832:	617a      	str	r2, [r7, #20]
 800d834:	68ba      	ldr	r2, [r7, #8]
 800d836:	b2d2      	uxtb	r2, r2
 800d838:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	3b01      	subs	r3, #1
 800d83e:	607b      	str	r3, [r7, #4]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d1f3      	bne.n	800d82e <mem_set+0x10>
}
 800d846:	bf00      	nop
 800d848:	371c      	adds	r7, #28
 800d84a:	46bd      	mov	sp, r7
 800d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d850:	4770      	bx	lr

0800d852 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d852:	b480      	push	{r7}
 800d854:	b089      	sub	sp, #36	; 0x24
 800d856:	af00      	add	r7, sp, #0
 800d858:	60f8      	str	r0, [r7, #12]
 800d85a:	60b9      	str	r1, [r7, #8]
 800d85c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	61fb      	str	r3, [r7, #28]
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d866:	2300      	movs	r3, #0
 800d868:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d86a:	69fb      	ldr	r3, [r7, #28]
 800d86c:	1c5a      	adds	r2, r3, #1
 800d86e:	61fa      	str	r2, [r7, #28]
 800d870:	781b      	ldrb	r3, [r3, #0]
 800d872:	4619      	mov	r1, r3
 800d874:	69bb      	ldr	r3, [r7, #24]
 800d876:	1c5a      	adds	r2, r3, #1
 800d878:	61ba      	str	r2, [r7, #24]
 800d87a:	781b      	ldrb	r3, [r3, #0]
 800d87c:	1acb      	subs	r3, r1, r3
 800d87e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	3b01      	subs	r3, #1
 800d884:	607b      	str	r3, [r7, #4]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d002      	beq.n	800d892 <mem_cmp+0x40>
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d0eb      	beq.n	800d86a <mem_cmp+0x18>

	return r;
 800d892:	697b      	ldr	r3, [r7, #20]
}
 800d894:	4618      	mov	r0, r3
 800d896:	3724      	adds	r7, #36	; 0x24
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr

0800d8a0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d8a0:	b480      	push	{r7}
 800d8a2:	b083      	sub	sp, #12
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d8aa:	e002      	b.n	800d8b2 <chk_chr+0x12>
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	607b      	str	r3, [r7, #4]
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d005      	beq.n	800d8c6 <chk_chr+0x26>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	781b      	ldrb	r3, [r3, #0]
 800d8be:	461a      	mov	r2, r3
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d1f2      	bne.n	800d8ac <chk_chr+0xc>
	return *str;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	781b      	ldrb	r3, [r3, #0]
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	370c      	adds	r7, #12
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr
	...

0800d8d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b085      	sub	sp, #20
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	60bb      	str	r3, [r7, #8]
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	60fb      	str	r3, [r7, #12]
 800d8ea:	e029      	b.n	800d940 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d8ec:	4a27      	ldr	r2, [pc, #156]	; (800d98c <chk_lock+0xb4>)
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	011b      	lsls	r3, r3, #4
 800d8f2:	4413      	add	r3, r2
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d01d      	beq.n	800d936 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d8fa:	4a24      	ldr	r2, [pc, #144]	; (800d98c <chk_lock+0xb4>)
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	011b      	lsls	r3, r3, #4
 800d900:	4413      	add	r3, r2
 800d902:	681a      	ldr	r2, [r3, #0]
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	429a      	cmp	r2, r3
 800d90a:	d116      	bne.n	800d93a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d90c:	4a1f      	ldr	r2, [pc, #124]	; (800d98c <chk_lock+0xb4>)
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	011b      	lsls	r3, r3, #4
 800d912:	4413      	add	r3, r2
 800d914:	3304      	adds	r3, #4
 800d916:	681a      	ldr	r2, [r3, #0]
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d10c      	bne.n	800d93a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d920:	4a1a      	ldr	r2, [pc, #104]	; (800d98c <chk_lock+0xb4>)
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	011b      	lsls	r3, r3, #4
 800d926:	4413      	add	r3, r2
 800d928:	3308      	adds	r3, #8
 800d92a:	681a      	ldr	r2, [r3, #0]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d930:	429a      	cmp	r2, r3
 800d932:	d102      	bne.n	800d93a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d934:	e007      	b.n	800d946 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d936:	2301      	movs	r3, #1
 800d938:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	3301      	adds	r3, #1
 800d93e:	60fb      	str	r3, [r7, #12]
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	2b01      	cmp	r3, #1
 800d944:	d9d2      	bls.n	800d8ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	2b02      	cmp	r3, #2
 800d94a:	d109      	bne.n	800d960 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d102      	bne.n	800d958 <chk_lock+0x80>
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	2b02      	cmp	r3, #2
 800d956:	d101      	bne.n	800d95c <chk_lock+0x84>
 800d958:	2300      	movs	r3, #0
 800d95a:	e010      	b.n	800d97e <chk_lock+0xa6>
 800d95c:	2312      	movs	r3, #18
 800d95e:	e00e      	b.n	800d97e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d108      	bne.n	800d978 <chk_lock+0xa0>
 800d966:	4a09      	ldr	r2, [pc, #36]	; (800d98c <chk_lock+0xb4>)
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	011b      	lsls	r3, r3, #4
 800d96c:	4413      	add	r3, r2
 800d96e:	330c      	adds	r3, #12
 800d970:	881b      	ldrh	r3, [r3, #0]
 800d972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d976:	d101      	bne.n	800d97c <chk_lock+0xa4>
 800d978:	2310      	movs	r3, #16
 800d97a:	e000      	b.n	800d97e <chk_lock+0xa6>
 800d97c:	2300      	movs	r3, #0
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3714      	adds	r7, #20
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr
 800d98a:	bf00      	nop
 800d98c:	2000137c 	.word	0x2000137c

0800d990 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d990:	b480      	push	{r7}
 800d992:	b083      	sub	sp, #12
 800d994:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d996:	2300      	movs	r3, #0
 800d998:	607b      	str	r3, [r7, #4]
 800d99a:	e002      	b.n	800d9a2 <enq_lock+0x12>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	3301      	adds	r3, #1
 800d9a0:	607b      	str	r3, [r7, #4]
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d806      	bhi.n	800d9b6 <enq_lock+0x26>
 800d9a8:	4a09      	ldr	r2, [pc, #36]	; (800d9d0 <enq_lock+0x40>)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	011b      	lsls	r3, r3, #4
 800d9ae:	4413      	add	r3, r2
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d1f2      	bne.n	800d99c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2b02      	cmp	r3, #2
 800d9ba:	bf14      	ite	ne
 800d9bc:	2301      	movne	r3, #1
 800d9be:	2300      	moveq	r3, #0
 800d9c0:	b2db      	uxtb	r3, r3
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	370c      	adds	r7, #12
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9cc:	4770      	bx	lr
 800d9ce:	bf00      	nop
 800d9d0:	2000137c 	.word	0x2000137c

0800d9d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b085      	sub	sp, #20
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d9de:	2300      	movs	r3, #0
 800d9e0:	60fb      	str	r3, [r7, #12]
 800d9e2:	e01f      	b.n	800da24 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d9e4:	4a41      	ldr	r2, [pc, #260]	; (800daec <inc_lock+0x118>)
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	011b      	lsls	r3, r3, #4
 800d9ea:	4413      	add	r3, r2
 800d9ec:	681a      	ldr	r2, [r3, #0]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d113      	bne.n	800da1e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d9f6:	4a3d      	ldr	r2, [pc, #244]	; (800daec <inc_lock+0x118>)
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	011b      	lsls	r3, r3, #4
 800d9fc:	4413      	add	r3, r2
 800d9fe:	3304      	adds	r3, #4
 800da00:	681a      	ldr	r2, [r3, #0]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800da06:	429a      	cmp	r2, r3
 800da08:	d109      	bne.n	800da1e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800da0a:	4a38      	ldr	r2, [pc, #224]	; (800daec <inc_lock+0x118>)
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	011b      	lsls	r3, r3, #4
 800da10:	4413      	add	r3, r2
 800da12:	3308      	adds	r3, #8
 800da14:	681a      	ldr	r2, [r3, #0]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d006      	beq.n	800da2c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	3301      	adds	r3, #1
 800da22:	60fb      	str	r3, [r7, #12]
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2b01      	cmp	r3, #1
 800da28:	d9dc      	bls.n	800d9e4 <inc_lock+0x10>
 800da2a:	e000      	b.n	800da2e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800da2c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	2b02      	cmp	r3, #2
 800da32:	d132      	bne.n	800da9a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800da34:	2300      	movs	r3, #0
 800da36:	60fb      	str	r3, [r7, #12]
 800da38:	e002      	b.n	800da40 <inc_lock+0x6c>
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	3301      	adds	r3, #1
 800da3e:	60fb      	str	r3, [r7, #12]
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	2b01      	cmp	r3, #1
 800da44:	d806      	bhi.n	800da54 <inc_lock+0x80>
 800da46:	4a29      	ldr	r2, [pc, #164]	; (800daec <inc_lock+0x118>)
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	011b      	lsls	r3, r3, #4
 800da4c:	4413      	add	r3, r2
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d1f2      	bne.n	800da3a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	2b02      	cmp	r3, #2
 800da58:	d101      	bne.n	800da5e <inc_lock+0x8a>
 800da5a:	2300      	movs	r3, #0
 800da5c:	e040      	b.n	800dae0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681a      	ldr	r2, [r3, #0]
 800da62:	4922      	ldr	r1, [pc, #136]	; (800daec <inc_lock+0x118>)
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	011b      	lsls	r3, r3, #4
 800da68:	440b      	add	r3, r1
 800da6a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	689a      	ldr	r2, [r3, #8]
 800da70:	491e      	ldr	r1, [pc, #120]	; (800daec <inc_lock+0x118>)
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	011b      	lsls	r3, r3, #4
 800da76:	440b      	add	r3, r1
 800da78:	3304      	adds	r3, #4
 800da7a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	695a      	ldr	r2, [r3, #20]
 800da80:	491a      	ldr	r1, [pc, #104]	; (800daec <inc_lock+0x118>)
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	011b      	lsls	r3, r3, #4
 800da86:	440b      	add	r3, r1
 800da88:	3308      	adds	r3, #8
 800da8a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800da8c:	4a17      	ldr	r2, [pc, #92]	; (800daec <inc_lock+0x118>)
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	011b      	lsls	r3, r3, #4
 800da92:	4413      	add	r3, r2
 800da94:	330c      	adds	r3, #12
 800da96:	2200      	movs	r2, #0
 800da98:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d009      	beq.n	800dab4 <inc_lock+0xe0>
 800daa0:	4a12      	ldr	r2, [pc, #72]	; (800daec <inc_lock+0x118>)
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	011b      	lsls	r3, r3, #4
 800daa6:	4413      	add	r3, r2
 800daa8:	330c      	adds	r3, #12
 800daaa:	881b      	ldrh	r3, [r3, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d001      	beq.n	800dab4 <inc_lock+0xe0>
 800dab0:	2300      	movs	r3, #0
 800dab2:	e015      	b.n	800dae0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d108      	bne.n	800dacc <inc_lock+0xf8>
 800daba:	4a0c      	ldr	r2, [pc, #48]	; (800daec <inc_lock+0x118>)
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	011b      	lsls	r3, r3, #4
 800dac0:	4413      	add	r3, r2
 800dac2:	330c      	adds	r3, #12
 800dac4:	881b      	ldrh	r3, [r3, #0]
 800dac6:	3301      	adds	r3, #1
 800dac8:	b29a      	uxth	r2, r3
 800daca:	e001      	b.n	800dad0 <inc_lock+0xfc>
 800dacc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dad0:	4906      	ldr	r1, [pc, #24]	; (800daec <inc_lock+0x118>)
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	011b      	lsls	r3, r3, #4
 800dad6:	440b      	add	r3, r1
 800dad8:	330c      	adds	r3, #12
 800dada:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	3301      	adds	r3, #1
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3714      	adds	r7, #20
 800dae4:	46bd      	mov	sp, r7
 800dae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daea:	4770      	bx	lr
 800daec:	2000137c 	.word	0x2000137c

0800daf0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b085      	sub	sp, #20
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	3b01      	subs	r3, #1
 800dafc:	607b      	str	r3, [r7, #4]
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2b01      	cmp	r3, #1
 800db02:	d825      	bhi.n	800db50 <dec_lock+0x60>
		n = Files[i].ctr;
 800db04:	4a17      	ldr	r2, [pc, #92]	; (800db64 <dec_lock+0x74>)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	011b      	lsls	r3, r3, #4
 800db0a:	4413      	add	r3, r2
 800db0c:	330c      	adds	r3, #12
 800db0e:	881b      	ldrh	r3, [r3, #0]
 800db10:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800db12:	89fb      	ldrh	r3, [r7, #14]
 800db14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db18:	d101      	bne.n	800db1e <dec_lock+0x2e>
 800db1a:	2300      	movs	r3, #0
 800db1c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800db1e:	89fb      	ldrh	r3, [r7, #14]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d002      	beq.n	800db2a <dec_lock+0x3a>
 800db24:	89fb      	ldrh	r3, [r7, #14]
 800db26:	3b01      	subs	r3, #1
 800db28:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800db2a:	4a0e      	ldr	r2, [pc, #56]	; (800db64 <dec_lock+0x74>)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	011b      	lsls	r3, r3, #4
 800db30:	4413      	add	r3, r2
 800db32:	330c      	adds	r3, #12
 800db34:	89fa      	ldrh	r2, [r7, #14]
 800db36:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800db38:	89fb      	ldrh	r3, [r7, #14]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d105      	bne.n	800db4a <dec_lock+0x5a>
 800db3e:	4a09      	ldr	r2, [pc, #36]	; (800db64 <dec_lock+0x74>)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	011b      	lsls	r3, r3, #4
 800db44:	4413      	add	r3, r2
 800db46:	2200      	movs	r2, #0
 800db48:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800db4a:	2300      	movs	r3, #0
 800db4c:	737b      	strb	r3, [r7, #13]
 800db4e:	e001      	b.n	800db54 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800db50:	2302      	movs	r3, #2
 800db52:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800db54:	7b7b      	ldrb	r3, [r7, #13]
}
 800db56:	4618      	mov	r0, r3
 800db58:	3714      	adds	r7, #20
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr
 800db62:	bf00      	nop
 800db64:	2000137c 	.word	0x2000137c

0800db68 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800db68:	b480      	push	{r7}
 800db6a:	b085      	sub	sp, #20
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800db70:	2300      	movs	r3, #0
 800db72:	60fb      	str	r3, [r7, #12]
 800db74:	e010      	b.n	800db98 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800db76:	4a0d      	ldr	r2, [pc, #52]	; (800dbac <clear_lock+0x44>)
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	011b      	lsls	r3, r3, #4
 800db7c:	4413      	add	r3, r2
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	687a      	ldr	r2, [r7, #4]
 800db82:	429a      	cmp	r2, r3
 800db84:	d105      	bne.n	800db92 <clear_lock+0x2a>
 800db86:	4a09      	ldr	r2, [pc, #36]	; (800dbac <clear_lock+0x44>)
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	011b      	lsls	r3, r3, #4
 800db8c:	4413      	add	r3, r2
 800db8e:	2200      	movs	r2, #0
 800db90:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	3301      	adds	r3, #1
 800db96:	60fb      	str	r3, [r7, #12]
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2b01      	cmp	r3, #1
 800db9c:	d9eb      	bls.n	800db76 <clear_lock+0xe>
	}
}
 800db9e:	bf00      	nop
 800dba0:	3714      	adds	r7, #20
 800dba2:	46bd      	mov	sp, r7
 800dba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba8:	4770      	bx	lr
 800dbaa:	bf00      	nop
 800dbac:	2000137c 	.word	0x2000137c

0800dbb0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b086      	sub	sp, #24
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	78db      	ldrb	r3, [r3, #3]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d034      	beq.n	800dc2e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbc8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	7858      	ldrb	r0, [r3, #1]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	697a      	ldr	r2, [r7, #20]
 800dbd8:	f7ff fd40 	bl	800d65c <disk_write>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d002      	beq.n	800dbe8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	73fb      	strb	r3, [r7, #15]
 800dbe6:	e022      	b.n	800dc2e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2200      	movs	r2, #0
 800dbec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6a1b      	ldr	r3, [r3, #32]
 800dbf2:	697a      	ldr	r2, [r7, #20]
 800dbf4:	1ad2      	subs	r2, r2, r3
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	699b      	ldr	r3, [r3, #24]
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	d217      	bcs.n	800dc2e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	789b      	ldrb	r3, [r3, #2]
 800dc02:	613b      	str	r3, [r7, #16]
 800dc04:	e010      	b.n	800dc28 <sync_window+0x78>
					wsect += fs->fsize;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	699b      	ldr	r3, [r3, #24]
 800dc0a:	697a      	ldr	r2, [r7, #20]
 800dc0c:	4413      	add	r3, r2
 800dc0e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	7858      	ldrb	r0, [r3, #1]
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	697a      	ldr	r2, [r7, #20]
 800dc1e:	f7ff fd1d 	bl	800d65c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	3b01      	subs	r3, #1
 800dc26:	613b      	str	r3, [r7, #16]
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	d8eb      	bhi.n	800dc06 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800dc2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	3718      	adds	r7, #24
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}

0800dc38 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b084      	sub	sp, #16
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800dc42:	2300      	movs	r3, #0
 800dc44:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc4a:	683a      	ldr	r2, [r7, #0]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d01b      	beq.n	800dc88 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f7ff ffad 	bl	800dbb0 <sync_window>
 800dc56:	4603      	mov	r3, r0
 800dc58:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800dc5a:	7bfb      	ldrb	r3, [r7, #15]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d113      	bne.n	800dc88 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	7858      	ldrb	r0, [r3, #1]
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	683a      	ldr	r2, [r7, #0]
 800dc6e:	f7ff fcd5 	bl	800d61c <disk_read>
 800dc72:	4603      	mov	r3, r0
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d004      	beq.n	800dc82 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800dc78:	f04f 33ff 	mov.w	r3, #4294967295
 800dc7c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800dc7e:	2301      	movs	r3, #1
 800dc80:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	683a      	ldr	r2, [r7, #0]
 800dc86:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800dc88:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3710      	adds	r7, #16
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
	...

0800dc94 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f7ff ff87 	bl	800dbb0 <sync_window>
 800dca2:	4603      	mov	r3, r0
 800dca4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800dca6:	7bfb      	ldrb	r3, [r7, #15]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d158      	bne.n	800dd5e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	2b03      	cmp	r3, #3
 800dcb2:	d148      	bne.n	800dd46 <sync_fs+0xb2>
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	791b      	ldrb	r3, [r3, #4]
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d144      	bne.n	800dd46 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	3330      	adds	r3, #48	; 0x30
 800dcc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dcc4:	2100      	movs	r1, #0
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f7ff fda9 	bl	800d81e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	3330      	adds	r3, #48	; 0x30
 800dcd0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dcd4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f7ff fd38 	bl	800d74e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	3330      	adds	r3, #48	; 0x30
 800dce2:	4921      	ldr	r1, [pc, #132]	; (800dd68 <sync_fs+0xd4>)
 800dce4:	4618      	mov	r0, r3
 800dce6:	f7ff fd4d 	bl	800d784 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	3330      	adds	r3, #48	; 0x30
 800dcee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dcf2:	491e      	ldr	r1, [pc, #120]	; (800dd6c <sync_fs+0xd8>)
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f7ff fd45 	bl	800d784 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	3330      	adds	r3, #48	; 0x30
 800dcfe:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	691b      	ldr	r3, [r3, #16]
 800dd06:	4619      	mov	r1, r3
 800dd08:	4610      	mov	r0, r2
 800dd0a:	f7ff fd3b 	bl	800d784 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	3330      	adds	r3, #48	; 0x30
 800dd12:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	68db      	ldr	r3, [r3, #12]
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	4610      	mov	r0, r2
 800dd1e:	f7ff fd31 	bl	800d784 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	69db      	ldr	r3, [r3, #28]
 800dd26:	1c5a      	adds	r2, r3, #1
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	7858      	ldrb	r0, [r3, #1]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	f7ff fc8e 	bl	800d65c <disk_write>
			fs->fsi_flag = 0;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2200      	movs	r2, #0
 800dd44:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	785b      	ldrb	r3, [r3, #1]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	2100      	movs	r1, #0
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7ff fca4 	bl	800d69c <disk_ioctl>
 800dd54:	4603      	mov	r3, r0
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d001      	beq.n	800dd5e <sync_fs+0xca>
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800dd5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	3710      	adds	r7, #16
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}
 800dd68:	41615252 	.word	0x41615252
 800dd6c:	61417272 	.word	0x61417272

0800dd70 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800dd70:	b480      	push	{r7}
 800dd72:	b083      	sub	sp, #12
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	3b02      	subs	r3, #2
 800dd7e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	695b      	ldr	r3, [r3, #20]
 800dd84:	3b02      	subs	r3, #2
 800dd86:	683a      	ldr	r2, [r7, #0]
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d301      	bcc.n	800dd90 <clust2sect+0x20>
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	e008      	b.n	800dda2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	895b      	ldrh	r3, [r3, #10]
 800dd94:	461a      	mov	r2, r3
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	fb03 f202 	mul.w	r2, r3, r2
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dda0:	4413      	add	r3, r2
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	370c      	adds	r7, #12
 800dda6:	46bd      	mov	sp, r7
 800dda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddac:	4770      	bx	lr

0800ddae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ddae:	b580      	push	{r7, lr}
 800ddb0:	b086      	sub	sp, #24
 800ddb2:	af00      	add	r7, sp, #0
 800ddb4:	6078      	str	r0, [r7, #4]
 800ddb6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	2b01      	cmp	r3, #1
 800ddc2:	d904      	bls.n	800ddce <get_fat+0x20>
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	695b      	ldr	r3, [r3, #20]
 800ddc8:	683a      	ldr	r2, [r7, #0]
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d302      	bcc.n	800ddd4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ddce:	2301      	movs	r3, #1
 800ddd0:	617b      	str	r3, [r7, #20]
 800ddd2:	e08c      	b.n	800deee <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ddd4:	f04f 33ff 	mov.w	r3, #4294967295
 800ddd8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	781b      	ldrb	r3, [r3, #0]
 800ddde:	2b02      	cmp	r3, #2
 800dde0:	d045      	beq.n	800de6e <get_fat+0xc0>
 800dde2:	2b03      	cmp	r3, #3
 800dde4:	d05d      	beq.n	800dea2 <get_fat+0xf4>
 800dde6:	2b01      	cmp	r3, #1
 800dde8:	d177      	bne.n	800deda <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	60fb      	str	r3, [r7, #12]
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	085b      	lsrs	r3, r3, #1
 800ddf2:	68fa      	ldr	r2, [r7, #12]
 800ddf4:	4413      	add	r3, r2
 800ddf6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	6a1a      	ldr	r2, [r3, #32]
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	0a5b      	lsrs	r3, r3, #9
 800de00:	4413      	add	r3, r2
 800de02:	4619      	mov	r1, r3
 800de04:	6938      	ldr	r0, [r7, #16]
 800de06:	f7ff ff17 	bl	800dc38 <move_window>
 800de0a:	4603      	mov	r3, r0
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d167      	bne.n	800dee0 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	1c5a      	adds	r2, r3, #1
 800de14:	60fa      	str	r2, [r7, #12]
 800de16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de1a:	693a      	ldr	r2, [r7, #16]
 800de1c:	4413      	add	r3, r2
 800de1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de22:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	6a1a      	ldr	r2, [r3, #32]
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	0a5b      	lsrs	r3, r3, #9
 800de2c:	4413      	add	r3, r2
 800de2e:	4619      	mov	r1, r3
 800de30:	6938      	ldr	r0, [r7, #16]
 800de32:	f7ff ff01 	bl	800dc38 <move_window>
 800de36:	4603      	mov	r3, r0
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d153      	bne.n	800dee4 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de42:	693a      	ldr	r2, [r7, #16]
 800de44:	4413      	add	r3, r2
 800de46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de4a:	021b      	lsls	r3, r3, #8
 800de4c:	461a      	mov	r2, r3
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	4313      	orrs	r3, r2
 800de52:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	f003 0301 	and.w	r3, r3, #1
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d002      	beq.n	800de64 <get_fat+0xb6>
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	091b      	lsrs	r3, r3, #4
 800de62:	e002      	b.n	800de6a <get_fat+0xbc>
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800de6a:	617b      	str	r3, [r7, #20]
			break;
 800de6c:	e03f      	b.n	800deee <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	6a1a      	ldr	r2, [r3, #32]
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	0a1b      	lsrs	r3, r3, #8
 800de76:	4413      	add	r3, r2
 800de78:	4619      	mov	r1, r3
 800de7a:	6938      	ldr	r0, [r7, #16]
 800de7c:	f7ff fedc 	bl	800dc38 <move_window>
 800de80:	4603      	mov	r3, r0
 800de82:	2b00      	cmp	r3, #0
 800de84:	d130      	bne.n	800dee8 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	005b      	lsls	r3, r3, #1
 800de90:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800de94:	4413      	add	r3, r2
 800de96:	4618      	mov	r0, r3
 800de98:	f7ff fc1e 	bl	800d6d8 <ld_word>
 800de9c:	4603      	mov	r3, r0
 800de9e:	617b      	str	r3, [r7, #20]
			break;
 800dea0:	e025      	b.n	800deee <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	6a1a      	ldr	r2, [r3, #32]
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	09db      	lsrs	r3, r3, #7
 800deaa:	4413      	add	r3, r2
 800deac:	4619      	mov	r1, r3
 800deae:	6938      	ldr	r0, [r7, #16]
 800deb0:	f7ff fec2 	bl	800dc38 <move_window>
 800deb4:	4603      	mov	r3, r0
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d118      	bne.n	800deec <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	009b      	lsls	r3, r3, #2
 800dec4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dec8:	4413      	add	r3, r2
 800deca:	4618      	mov	r0, r3
 800decc:	f7ff fc1c 	bl	800d708 <ld_dword>
 800ded0:	4603      	mov	r3, r0
 800ded2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ded6:	617b      	str	r3, [r7, #20]
			break;
 800ded8:	e009      	b.n	800deee <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800deda:	2301      	movs	r3, #1
 800dedc:	617b      	str	r3, [r7, #20]
 800dede:	e006      	b.n	800deee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dee0:	bf00      	nop
 800dee2:	e004      	b.n	800deee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dee4:	bf00      	nop
 800dee6:	e002      	b.n	800deee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dee8:	bf00      	nop
 800deea:	e000      	b.n	800deee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800deec:	bf00      	nop
		}
	}

	return val;
 800deee:	697b      	ldr	r3, [r7, #20]
}
 800def0:	4618      	mov	r0, r3
 800def2:	3718      	adds	r7, #24
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}

0800def8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800def8:	b590      	push	{r4, r7, lr}
 800defa:	b089      	sub	sp, #36	; 0x24
 800defc:	af00      	add	r7, sp, #0
 800defe:	60f8      	str	r0, [r7, #12]
 800df00:	60b9      	str	r1, [r7, #8]
 800df02:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800df04:	2302      	movs	r3, #2
 800df06:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	2b01      	cmp	r3, #1
 800df0c:	f240 80d6 	bls.w	800e0bc <put_fat+0x1c4>
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	695b      	ldr	r3, [r3, #20]
 800df14:	68ba      	ldr	r2, [r7, #8]
 800df16:	429a      	cmp	r2, r3
 800df18:	f080 80d0 	bcs.w	800e0bc <put_fat+0x1c4>
		switch (fs->fs_type) {
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	781b      	ldrb	r3, [r3, #0]
 800df20:	2b02      	cmp	r3, #2
 800df22:	d073      	beq.n	800e00c <put_fat+0x114>
 800df24:	2b03      	cmp	r3, #3
 800df26:	f000 8091 	beq.w	800e04c <put_fat+0x154>
 800df2a:	2b01      	cmp	r3, #1
 800df2c:	f040 80c6 	bne.w	800e0bc <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	61bb      	str	r3, [r7, #24]
 800df34:	69bb      	ldr	r3, [r7, #24]
 800df36:	085b      	lsrs	r3, r3, #1
 800df38:	69ba      	ldr	r2, [r7, #24]
 800df3a:	4413      	add	r3, r2
 800df3c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	6a1a      	ldr	r2, [r3, #32]
 800df42:	69bb      	ldr	r3, [r7, #24]
 800df44:	0a5b      	lsrs	r3, r3, #9
 800df46:	4413      	add	r3, r2
 800df48:	4619      	mov	r1, r3
 800df4a:	68f8      	ldr	r0, [r7, #12]
 800df4c:	f7ff fe74 	bl	800dc38 <move_window>
 800df50:	4603      	mov	r3, r0
 800df52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800df54:	7ffb      	ldrb	r3, [r7, #31]
 800df56:	2b00      	cmp	r3, #0
 800df58:	f040 80a9 	bne.w	800e0ae <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800df62:	69bb      	ldr	r3, [r7, #24]
 800df64:	1c59      	adds	r1, r3, #1
 800df66:	61b9      	str	r1, [r7, #24]
 800df68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df6c:	4413      	add	r3, r2
 800df6e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	f003 0301 	and.w	r3, r3, #1
 800df76:	2b00      	cmp	r3, #0
 800df78:	d00d      	beq.n	800df96 <put_fat+0x9e>
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	b25b      	sxtb	r3, r3
 800df80:	f003 030f 	and.w	r3, r3, #15
 800df84:	b25a      	sxtb	r2, r3
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	011b      	lsls	r3, r3, #4
 800df8c:	b25b      	sxtb	r3, r3
 800df8e:	4313      	orrs	r3, r2
 800df90:	b25b      	sxtb	r3, r3
 800df92:	b2db      	uxtb	r3, r3
 800df94:	e001      	b.n	800df9a <put_fat+0xa2>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	b2db      	uxtb	r3, r3
 800df9a:	697a      	ldr	r2, [r7, #20]
 800df9c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	2201      	movs	r2, #1
 800dfa2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	6a1a      	ldr	r2, [r3, #32]
 800dfa8:	69bb      	ldr	r3, [r7, #24]
 800dfaa:	0a5b      	lsrs	r3, r3, #9
 800dfac:	4413      	add	r3, r2
 800dfae:	4619      	mov	r1, r3
 800dfb0:	68f8      	ldr	r0, [r7, #12]
 800dfb2:	f7ff fe41 	bl	800dc38 <move_window>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dfba:	7ffb      	ldrb	r3, [r7, #31]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d178      	bne.n	800e0b2 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dfc6:	69bb      	ldr	r3, [r7, #24]
 800dfc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfcc:	4413      	add	r3, r2
 800dfce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	f003 0301 	and.w	r3, r3, #1
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d003      	beq.n	800dfe2 <put_fat+0xea>
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	091b      	lsrs	r3, r3, #4
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	e00e      	b.n	800e000 <put_fat+0x108>
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	781b      	ldrb	r3, [r3, #0]
 800dfe6:	b25b      	sxtb	r3, r3
 800dfe8:	f023 030f 	bic.w	r3, r3, #15
 800dfec:	b25a      	sxtb	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	0a1b      	lsrs	r3, r3, #8
 800dff2:	b25b      	sxtb	r3, r3
 800dff4:	f003 030f 	and.w	r3, r3, #15
 800dff8:	b25b      	sxtb	r3, r3
 800dffa:	4313      	orrs	r3, r2
 800dffc:	b25b      	sxtb	r3, r3
 800dffe:	b2db      	uxtb	r3, r3
 800e000:	697a      	ldr	r2, [r7, #20]
 800e002:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	2201      	movs	r2, #1
 800e008:	70da      	strb	r2, [r3, #3]
			break;
 800e00a:	e057      	b.n	800e0bc <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	6a1a      	ldr	r2, [r3, #32]
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	0a1b      	lsrs	r3, r3, #8
 800e014:	4413      	add	r3, r2
 800e016:	4619      	mov	r1, r3
 800e018:	68f8      	ldr	r0, [r7, #12]
 800e01a:	f7ff fe0d 	bl	800dc38 <move_window>
 800e01e:	4603      	mov	r3, r0
 800e020:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e022:	7ffb      	ldrb	r3, [r7, #31]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d146      	bne.n	800e0b6 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	005b      	lsls	r3, r3, #1
 800e032:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e036:	4413      	add	r3, r2
 800e038:	687a      	ldr	r2, [r7, #4]
 800e03a:	b292      	uxth	r2, r2
 800e03c:	4611      	mov	r1, r2
 800e03e:	4618      	mov	r0, r3
 800e040:	f7ff fb85 	bl	800d74e <st_word>
			fs->wflag = 1;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	2201      	movs	r2, #1
 800e048:	70da      	strb	r2, [r3, #3]
			break;
 800e04a:	e037      	b.n	800e0bc <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	6a1a      	ldr	r2, [r3, #32]
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	09db      	lsrs	r3, r3, #7
 800e054:	4413      	add	r3, r2
 800e056:	4619      	mov	r1, r3
 800e058:	68f8      	ldr	r0, [r7, #12]
 800e05a:	f7ff fded 	bl	800dc38 <move_window>
 800e05e:	4603      	mov	r3, r0
 800e060:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e062:	7ffb      	ldrb	r3, [r7, #31]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d128      	bne.n	800e0ba <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	009b      	lsls	r3, r3, #2
 800e078:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e07c:	4413      	add	r3, r2
 800e07e:	4618      	mov	r0, r3
 800e080:	f7ff fb42 	bl	800d708 <ld_dword>
 800e084:	4603      	mov	r3, r0
 800e086:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e08a:	4323      	orrs	r3, r4
 800e08c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	009b      	lsls	r3, r3, #2
 800e098:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e09c:	4413      	add	r3, r2
 800e09e:	6879      	ldr	r1, [r7, #4]
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f7ff fb6f 	bl	800d784 <st_dword>
			fs->wflag = 1;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	2201      	movs	r2, #1
 800e0aa:	70da      	strb	r2, [r3, #3]
			break;
 800e0ac:	e006      	b.n	800e0bc <put_fat+0x1c4>
			if (res != FR_OK) break;
 800e0ae:	bf00      	nop
 800e0b0:	e004      	b.n	800e0bc <put_fat+0x1c4>
			if (res != FR_OK) break;
 800e0b2:	bf00      	nop
 800e0b4:	e002      	b.n	800e0bc <put_fat+0x1c4>
			if (res != FR_OK) break;
 800e0b6:	bf00      	nop
 800e0b8:	e000      	b.n	800e0bc <put_fat+0x1c4>
			if (res != FR_OK) break;
 800e0ba:	bf00      	nop
		}
	}
	return res;
 800e0bc:	7ffb      	ldrb	r3, [r7, #31]
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3724      	adds	r7, #36	; 0x24
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd90      	pop	{r4, r7, pc}

0800e0c6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e0c6:	b580      	push	{r7, lr}
 800e0c8:	b088      	sub	sp, #32
 800e0ca:	af00      	add	r7, sp, #0
 800e0cc:	60f8      	str	r0, [r7, #12]
 800e0ce:	60b9      	str	r1, [r7, #8]
 800e0d0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	2b01      	cmp	r3, #1
 800e0e0:	d904      	bls.n	800e0ec <remove_chain+0x26>
 800e0e2:	69bb      	ldr	r3, [r7, #24]
 800e0e4:	695b      	ldr	r3, [r3, #20]
 800e0e6:	68ba      	ldr	r2, [r7, #8]
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d301      	bcc.n	800e0f0 <remove_chain+0x2a>
 800e0ec:	2302      	movs	r3, #2
 800e0ee:	e04b      	b.n	800e188 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d00c      	beq.n	800e110 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e0f6:	f04f 32ff 	mov.w	r2, #4294967295
 800e0fa:	6879      	ldr	r1, [r7, #4]
 800e0fc:	69b8      	ldr	r0, [r7, #24]
 800e0fe:	f7ff fefb 	bl	800def8 <put_fat>
 800e102:	4603      	mov	r3, r0
 800e104:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e106:	7ffb      	ldrb	r3, [r7, #31]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d001      	beq.n	800e110 <remove_chain+0x4a>
 800e10c:	7ffb      	ldrb	r3, [r7, #31]
 800e10e:	e03b      	b.n	800e188 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e110:	68b9      	ldr	r1, [r7, #8]
 800e112:	68f8      	ldr	r0, [r7, #12]
 800e114:	f7ff fe4b 	bl	800ddae <get_fat>
 800e118:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d031      	beq.n	800e184 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	2b01      	cmp	r3, #1
 800e124:	d101      	bne.n	800e12a <remove_chain+0x64>
 800e126:	2302      	movs	r3, #2
 800e128:	e02e      	b.n	800e188 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e130:	d101      	bne.n	800e136 <remove_chain+0x70>
 800e132:	2301      	movs	r3, #1
 800e134:	e028      	b.n	800e188 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e136:	2200      	movs	r2, #0
 800e138:	68b9      	ldr	r1, [r7, #8]
 800e13a:	69b8      	ldr	r0, [r7, #24]
 800e13c:	f7ff fedc 	bl	800def8 <put_fat>
 800e140:	4603      	mov	r3, r0
 800e142:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e144:	7ffb      	ldrb	r3, [r7, #31]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d001      	beq.n	800e14e <remove_chain+0x88>
 800e14a:	7ffb      	ldrb	r3, [r7, #31]
 800e14c:	e01c      	b.n	800e188 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e14e:	69bb      	ldr	r3, [r7, #24]
 800e150:	691a      	ldr	r2, [r3, #16]
 800e152:	69bb      	ldr	r3, [r7, #24]
 800e154:	695b      	ldr	r3, [r3, #20]
 800e156:	3b02      	subs	r3, #2
 800e158:	429a      	cmp	r2, r3
 800e15a:	d20b      	bcs.n	800e174 <remove_chain+0xae>
			fs->free_clst++;
 800e15c:	69bb      	ldr	r3, [r7, #24]
 800e15e:	691b      	ldr	r3, [r3, #16]
 800e160:	1c5a      	adds	r2, r3, #1
 800e162:	69bb      	ldr	r3, [r7, #24]
 800e164:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800e166:	69bb      	ldr	r3, [r7, #24]
 800e168:	791b      	ldrb	r3, [r3, #4]
 800e16a:	f043 0301 	orr.w	r3, r3, #1
 800e16e:	b2da      	uxtb	r2, r3
 800e170:	69bb      	ldr	r3, [r7, #24]
 800e172:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e178:	69bb      	ldr	r3, [r7, #24]
 800e17a:	695b      	ldr	r3, [r3, #20]
 800e17c:	68ba      	ldr	r2, [r7, #8]
 800e17e:	429a      	cmp	r2, r3
 800e180:	d3c6      	bcc.n	800e110 <remove_chain+0x4a>
 800e182:	e000      	b.n	800e186 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e184:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e186:	2300      	movs	r3, #0
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3720      	adds	r7, #32
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}

0800e190 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b088      	sub	sp, #32
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d10d      	bne.n	800e1c2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	68db      	ldr	r3, [r3, #12]
 800e1aa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e1ac:	69bb      	ldr	r3, [r7, #24]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d004      	beq.n	800e1bc <create_chain+0x2c>
 800e1b2:	693b      	ldr	r3, [r7, #16]
 800e1b4:	695b      	ldr	r3, [r3, #20]
 800e1b6:	69ba      	ldr	r2, [r7, #24]
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d31b      	bcc.n	800e1f4 <create_chain+0x64>
 800e1bc:	2301      	movs	r3, #1
 800e1be:	61bb      	str	r3, [r7, #24]
 800e1c0:	e018      	b.n	800e1f4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e1c2:	6839      	ldr	r1, [r7, #0]
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f7ff fdf2 	bl	800ddae <get_fat>
 800e1ca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	2b01      	cmp	r3, #1
 800e1d0:	d801      	bhi.n	800e1d6 <create_chain+0x46>
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	e070      	b.n	800e2b8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1dc:	d101      	bne.n	800e1e2 <create_chain+0x52>
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	e06a      	b.n	800e2b8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	695b      	ldr	r3, [r3, #20]
 800e1e6:	68fa      	ldr	r2, [r7, #12]
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	d201      	bcs.n	800e1f0 <create_chain+0x60>
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	e063      	b.n	800e2b8 <create_chain+0x128>
		scl = clst;
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e1f4:	69bb      	ldr	r3, [r7, #24]
 800e1f6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	695b      	ldr	r3, [r3, #20]
 800e202:	69fa      	ldr	r2, [r7, #28]
 800e204:	429a      	cmp	r2, r3
 800e206:	d307      	bcc.n	800e218 <create_chain+0x88>
				ncl = 2;
 800e208:	2302      	movs	r3, #2
 800e20a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e20c:	69fa      	ldr	r2, [r7, #28]
 800e20e:	69bb      	ldr	r3, [r7, #24]
 800e210:	429a      	cmp	r2, r3
 800e212:	d901      	bls.n	800e218 <create_chain+0x88>
 800e214:	2300      	movs	r3, #0
 800e216:	e04f      	b.n	800e2b8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e218:	69f9      	ldr	r1, [r7, #28]
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f7ff fdc7 	bl	800ddae <get_fat>
 800e220:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d00e      	beq.n	800e246 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	2b01      	cmp	r3, #1
 800e22c:	d003      	beq.n	800e236 <create_chain+0xa6>
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e234:	d101      	bne.n	800e23a <create_chain+0xaa>
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	e03e      	b.n	800e2b8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e23a:	69fa      	ldr	r2, [r7, #28]
 800e23c:	69bb      	ldr	r3, [r7, #24]
 800e23e:	429a      	cmp	r2, r3
 800e240:	d1da      	bne.n	800e1f8 <create_chain+0x68>
 800e242:	2300      	movs	r3, #0
 800e244:	e038      	b.n	800e2b8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e246:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e248:	f04f 32ff 	mov.w	r2, #4294967295
 800e24c:	69f9      	ldr	r1, [r7, #28]
 800e24e:	6938      	ldr	r0, [r7, #16]
 800e250:	f7ff fe52 	bl	800def8 <put_fat>
 800e254:	4603      	mov	r3, r0
 800e256:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e258:	7dfb      	ldrb	r3, [r7, #23]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d109      	bne.n	800e272 <create_chain+0xe2>
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d006      	beq.n	800e272 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e264:	69fa      	ldr	r2, [r7, #28]
 800e266:	6839      	ldr	r1, [r7, #0]
 800e268:	6938      	ldr	r0, [r7, #16]
 800e26a:	f7ff fe45 	bl	800def8 <put_fat>
 800e26e:	4603      	mov	r3, r0
 800e270:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e272:	7dfb      	ldrb	r3, [r7, #23]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d116      	bne.n	800e2a6 <create_chain+0x116>
		fs->last_clst = ncl;
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	69fa      	ldr	r2, [r7, #28]
 800e27c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	691a      	ldr	r2, [r3, #16]
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	695b      	ldr	r3, [r3, #20]
 800e286:	3b02      	subs	r3, #2
 800e288:	429a      	cmp	r2, r3
 800e28a:	d804      	bhi.n	800e296 <create_chain+0x106>
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	691b      	ldr	r3, [r3, #16]
 800e290:	1e5a      	subs	r2, r3, #1
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	791b      	ldrb	r3, [r3, #4]
 800e29a:	f043 0301 	orr.w	r3, r3, #1
 800e29e:	b2da      	uxtb	r2, r3
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	711a      	strb	r2, [r3, #4]
 800e2a4:	e007      	b.n	800e2b6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e2a6:	7dfb      	ldrb	r3, [r7, #23]
 800e2a8:	2b01      	cmp	r3, #1
 800e2aa:	d102      	bne.n	800e2b2 <create_chain+0x122>
 800e2ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e2b0:	e000      	b.n	800e2b4 <create_chain+0x124>
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e2b6:	69fb      	ldr	r3, [r7, #28]
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3720      	adds	r7, #32
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}

0800e2c0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b087      	sub	sp, #28
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
 800e2c8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2d4:	3304      	adds	r3, #4
 800e2d6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	0a5b      	lsrs	r3, r3, #9
 800e2dc:	68fa      	ldr	r2, [r7, #12]
 800e2de:	8952      	ldrh	r2, [r2, #10]
 800e2e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2e4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	1d1a      	adds	r2, r3, #4
 800e2ea:	613a      	str	r2, [r7, #16]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d101      	bne.n	800e2fa <clmt_clust+0x3a>
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	e010      	b.n	800e31c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800e2fa:	697a      	ldr	r2, [r7, #20]
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d307      	bcc.n	800e312 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800e302:	697a      	ldr	r2, [r7, #20]
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	1ad3      	subs	r3, r2, r3
 800e308:	617b      	str	r3, [r7, #20]
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	3304      	adds	r3, #4
 800e30e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e310:	e7e9      	b.n	800e2e6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800e312:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	681a      	ldr	r2, [r3, #0]
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	4413      	add	r3, r2
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	371c      	adds	r7, #28
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr

0800e328 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b086      	sub	sp, #24
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e33e:	d204      	bcs.n	800e34a <dir_sdi+0x22>
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	f003 031f 	and.w	r3, r3, #31
 800e346:	2b00      	cmp	r3, #0
 800e348:	d001      	beq.n	800e34e <dir_sdi+0x26>
		return FR_INT_ERR;
 800e34a:	2302      	movs	r3, #2
 800e34c:	e063      	b.n	800e416 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	683a      	ldr	r2, [r7, #0]
 800e352:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	689b      	ldr	r3, [r3, #8]
 800e358:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d106      	bne.n	800e36e <dir_sdi+0x46>
 800e360:	693b      	ldr	r3, [r7, #16]
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	2b02      	cmp	r3, #2
 800e366:	d902      	bls.n	800e36e <dir_sdi+0x46>
		clst = fs->dirbase;
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e36c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d10c      	bne.n	800e38e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	095b      	lsrs	r3, r3, #5
 800e378:	693a      	ldr	r2, [r7, #16]
 800e37a:	8912      	ldrh	r2, [r2, #8]
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d301      	bcc.n	800e384 <dir_sdi+0x5c>
 800e380:	2302      	movs	r3, #2
 800e382:	e048      	b.n	800e416 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	61da      	str	r2, [r3, #28]
 800e38c:	e029      	b.n	800e3e2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e38e:	693b      	ldr	r3, [r7, #16]
 800e390:	895b      	ldrh	r3, [r3, #10]
 800e392:	025b      	lsls	r3, r3, #9
 800e394:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e396:	e019      	b.n	800e3cc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6979      	ldr	r1, [r7, #20]
 800e39c:	4618      	mov	r0, r3
 800e39e:	f7ff fd06 	bl	800ddae <get_fat>
 800e3a2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3aa:	d101      	bne.n	800e3b0 <dir_sdi+0x88>
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	e032      	b.n	800e416 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	2b01      	cmp	r3, #1
 800e3b4:	d904      	bls.n	800e3c0 <dir_sdi+0x98>
 800e3b6:	693b      	ldr	r3, [r7, #16]
 800e3b8:	695b      	ldr	r3, [r3, #20]
 800e3ba:	697a      	ldr	r2, [r7, #20]
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d301      	bcc.n	800e3c4 <dir_sdi+0x9c>
 800e3c0:	2302      	movs	r3, #2
 800e3c2:	e028      	b.n	800e416 <dir_sdi+0xee>
			ofs -= csz;
 800e3c4:	683a      	ldr	r2, [r7, #0]
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	1ad3      	subs	r3, r2, r3
 800e3ca:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e3cc:	683a      	ldr	r2, [r7, #0]
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d2e1      	bcs.n	800e398 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800e3d4:	6979      	ldr	r1, [r7, #20]
 800e3d6:	6938      	ldr	r0, [r7, #16]
 800e3d8:	f7ff fcca 	bl	800dd70 <clust2sect>
 800e3dc:	4602      	mov	r2, r0
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	697a      	ldr	r2, [r7, #20]
 800e3e6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	69db      	ldr	r3, [r3, #28]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d101      	bne.n	800e3f4 <dir_sdi+0xcc>
 800e3f0:	2302      	movs	r3, #2
 800e3f2:	e010      	b.n	800e416 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	69da      	ldr	r2, [r3, #28]
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	0a5b      	lsrs	r3, r3, #9
 800e3fc:	441a      	add	r2, r3
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e402:	693b      	ldr	r3, [r7, #16]
 800e404:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e40e:	441a      	add	r2, r3
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e414:	2300      	movs	r3, #0
}
 800e416:	4618      	mov	r0, r3
 800e418:	3718      	adds	r7, #24
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}

0800e41e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e41e:	b580      	push	{r7, lr}
 800e420:	b086      	sub	sp, #24
 800e422:	af00      	add	r7, sp, #0
 800e424:	6078      	str	r0, [r7, #4]
 800e426:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	695b      	ldr	r3, [r3, #20]
 800e432:	3320      	adds	r3, #32
 800e434:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	69db      	ldr	r3, [r3, #28]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d003      	beq.n	800e446 <dir_next+0x28>
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e444:	d301      	bcc.n	800e44a <dir_next+0x2c>
 800e446:	2304      	movs	r3, #4
 800e448:	e0aa      	b.n	800e5a0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e450:	2b00      	cmp	r3, #0
 800e452:	f040 8098 	bne.w	800e586 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	69db      	ldr	r3, [r3, #28]
 800e45a:	1c5a      	adds	r2, r3, #1
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	699b      	ldr	r3, [r3, #24]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d10b      	bne.n	800e480 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	095b      	lsrs	r3, r3, #5
 800e46c:	68fa      	ldr	r2, [r7, #12]
 800e46e:	8912      	ldrh	r2, [r2, #8]
 800e470:	4293      	cmp	r3, r2
 800e472:	f0c0 8088 	bcc.w	800e586 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2200      	movs	r2, #0
 800e47a:	61da      	str	r2, [r3, #28]
 800e47c:	2304      	movs	r3, #4
 800e47e:	e08f      	b.n	800e5a0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	0a5b      	lsrs	r3, r3, #9
 800e484:	68fa      	ldr	r2, [r7, #12]
 800e486:	8952      	ldrh	r2, [r2, #10]
 800e488:	3a01      	subs	r2, #1
 800e48a:	4013      	ands	r3, r2
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d17a      	bne.n	800e586 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e490:	687a      	ldr	r2, [r7, #4]
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	699b      	ldr	r3, [r3, #24]
 800e496:	4619      	mov	r1, r3
 800e498:	4610      	mov	r0, r2
 800e49a:	f7ff fc88 	bl	800ddae <get_fat>
 800e49e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	d801      	bhi.n	800e4aa <dir_next+0x8c>
 800e4a6:	2302      	movs	r3, #2
 800e4a8:	e07a      	b.n	800e5a0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4b0:	d101      	bne.n	800e4b6 <dir_next+0x98>
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	e074      	b.n	800e5a0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	695b      	ldr	r3, [r3, #20]
 800e4ba:	697a      	ldr	r2, [r7, #20]
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d358      	bcc.n	800e572 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d104      	bne.n	800e4d0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	61da      	str	r2, [r3, #28]
 800e4cc:	2304      	movs	r3, #4
 800e4ce:	e067      	b.n	800e5a0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e4d0:	687a      	ldr	r2, [r7, #4]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	699b      	ldr	r3, [r3, #24]
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	4610      	mov	r0, r2
 800e4da:	f7ff fe59 	bl	800e190 <create_chain>
 800e4de:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d101      	bne.n	800e4ea <dir_next+0xcc>
 800e4e6:	2307      	movs	r3, #7
 800e4e8:	e05a      	b.n	800e5a0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	2b01      	cmp	r3, #1
 800e4ee:	d101      	bne.n	800e4f4 <dir_next+0xd6>
 800e4f0:	2302      	movs	r3, #2
 800e4f2:	e055      	b.n	800e5a0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4fa:	d101      	bne.n	800e500 <dir_next+0xe2>
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	e04f      	b.n	800e5a0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e500:	68f8      	ldr	r0, [r7, #12]
 800e502:	f7ff fb55 	bl	800dbb0 <sync_window>
 800e506:	4603      	mov	r3, r0
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d001      	beq.n	800e510 <dir_next+0xf2>
 800e50c:	2301      	movs	r3, #1
 800e50e:	e047      	b.n	800e5a0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	3330      	adds	r3, #48	; 0x30
 800e514:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e518:	2100      	movs	r1, #0
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7ff f97f 	bl	800d81e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e520:	2300      	movs	r3, #0
 800e522:	613b      	str	r3, [r7, #16]
 800e524:	6979      	ldr	r1, [r7, #20]
 800e526:	68f8      	ldr	r0, [r7, #12]
 800e528:	f7ff fc22 	bl	800dd70 <clust2sect>
 800e52c:	4602      	mov	r2, r0
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	62da      	str	r2, [r3, #44]	; 0x2c
 800e532:	e012      	b.n	800e55a <dir_next+0x13c>
						fs->wflag = 1;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2201      	movs	r2, #1
 800e538:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e53a:	68f8      	ldr	r0, [r7, #12]
 800e53c:	f7ff fb38 	bl	800dbb0 <sync_window>
 800e540:	4603      	mov	r3, r0
 800e542:	2b00      	cmp	r3, #0
 800e544:	d001      	beq.n	800e54a <dir_next+0x12c>
 800e546:	2301      	movs	r3, #1
 800e548:	e02a      	b.n	800e5a0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e54a:	693b      	ldr	r3, [r7, #16]
 800e54c:	3301      	adds	r3, #1
 800e54e:	613b      	str	r3, [r7, #16]
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e554:	1c5a      	adds	r2, r3, #1
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	62da      	str	r2, [r3, #44]	; 0x2c
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	895b      	ldrh	r3, [r3, #10]
 800e55e:	461a      	mov	r2, r3
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	4293      	cmp	r3, r2
 800e564:	d3e6      	bcc.n	800e534 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e56a:	693b      	ldr	r3, [r7, #16]
 800e56c:	1ad2      	subs	r2, r2, r3
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	697a      	ldr	r2, [r7, #20]
 800e576:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e578:	6979      	ldr	r1, [r7, #20]
 800e57a:	68f8      	ldr	r0, [r7, #12]
 800e57c:	f7ff fbf8 	bl	800dd70 <clust2sect>
 800e580:	4602      	mov	r2, r0
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	68ba      	ldr	r2, [r7, #8]
 800e58a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e598:	441a      	add	r2, r3
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e59e:	2300      	movs	r3, #0
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	3718      	adds	r7, #24
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}

0800e5a8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b086      	sub	sp, #24
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e5b8:	2100      	movs	r1, #0
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f7ff feb4 	bl	800e328 <dir_sdi>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e5c4:	7dfb      	ldrb	r3, [r7, #23]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d12b      	bne.n	800e622 <dir_alloc+0x7a>
		n = 0;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	69db      	ldr	r3, [r3, #28]
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	68f8      	ldr	r0, [r7, #12]
 800e5d6:	f7ff fb2f 	bl	800dc38 <move_window>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e5de:	7dfb      	ldrb	r3, [r7, #23]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d11d      	bne.n	800e620 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6a1b      	ldr	r3, [r3, #32]
 800e5e8:	781b      	ldrb	r3, [r3, #0]
 800e5ea:	2be5      	cmp	r3, #229	; 0xe5
 800e5ec:	d004      	beq.n	800e5f8 <dir_alloc+0x50>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6a1b      	ldr	r3, [r3, #32]
 800e5f2:	781b      	ldrb	r3, [r3, #0]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d107      	bne.n	800e608 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	3301      	adds	r3, #1
 800e5fc:	613b      	str	r3, [r7, #16]
 800e5fe:	693a      	ldr	r2, [r7, #16]
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	429a      	cmp	r2, r3
 800e604:	d102      	bne.n	800e60c <dir_alloc+0x64>
 800e606:	e00c      	b.n	800e622 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e608:	2300      	movs	r3, #0
 800e60a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e60c:	2101      	movs	r1, #1
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f7ff ff05 	bl	800e41e <dir_next>
 800e614:	4603      	mov	r3, r0
 800e616:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e618:	7dfb      	ldrb	r3, [r7, #23]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d0d7      	beq.n	800e5ce <dir_alloc+0x26>
 800e61e:	e000      	b.n	800e622 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e620:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e622:	7dfb      	ldrb	r3, [r7, #23]
 800e624:	2b04      	cmp	r3, #4
 800e626:	d101      	bne.n	800e62c <dir_alloc+0x84>
 800e628:	2307      	movs	r3, #7
 800e62a:	75fb      	strb	r3, [r7, #23]
	return res;
 800e62c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e62e:	4618      	mov	r0, r3
 800e630:	3718      	adds	r7, #24
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}

0800e636 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e636:	b580      	push	{r7, lr}
 800e638:	b084      	sub	sp, #16
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	6078      	str	r0, [r7, #4]
 800e63e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	331a      	adds	r3, #26
 800e644:	4618      	mov	r0, r3
 800e646:	f7ff f847 	bl	800d6d8 <ld_word>
 800e64a:	4603      	mov	r3, r0
 800e64c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	2b03      	cmp	r3, #3
 800e654:	d109      	bne.n	800e66a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	3314      	adds	r3, #20
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7ff f83c 	bl	800d6d8 <ld_word>
 800e660:	4603      	mov	r3, r0
 800e662:	041b      	lsls	r3, r3, #16
 800e664:	68fa      	ldr	r2, [r7, #12]
 800e666:	4313      	orrs	r3, r2
 800e668:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e66a:	68fb      	ldr	r3, [r7, #12]
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3710      	adds	r7, #16
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}

0800e674 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	60f8      	str	r0, [r7, #12]
 800e67c:	60b9      	str	r1, [r7, #8]
 800e67e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	331a      	adds	r3, #26
 800e684:	687a      	ldr	r2, [r7, #4]
 800e686:	b292      	uxth	r2, r2
 800e688:	4611      	mov	r1, r2
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7ff f85f 	bl	800d74e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	2b03      	cmp	r3, #3
 800e696:	d109      	bne.n	800e6ac <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e698:	68bb      	ldr	r3, [r7, #8]
 800e69a:	f103 0214 	add.w	r2, r3, #20
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	0c1b      	lsrs	r3, r3, #16
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	4619      	mov	r1, r3
 800e6a6:	4610      	mov	r0, r2
 800e6a8:	f7ff f851 	bl	800d74e <st_word>
	}
}
 800e6ac:	bf00      	nop
 800e6ae:	3710      	adds	r7, #16
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b086      	sub	sp, #24
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e6c2:	2100      	movs	r1, #0
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f7ff fe2f 	bl	800e328 <dir_sdi>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e6ce:	7dfb      	ldrb	r3, [r7, #23]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d001      	beq.n	800e6d8 <dir_find+0x24>
 800e6d4:	7dfb      	ldrb	r3, [r7, #23]
 800e6d6:	e03e      	b.n	800e756 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	69db      	ldr	r3, [r3, #28]
 800e6dc:	4619      	mov	r1, r3
 800e6de:	6938      	ldr	r0, [r7, #16]
 800e6e0:	f7ff faaa 	bl	800dc38 <move_window>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e6e8:	7dfb      	ldrb	r3, [r7, #23]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d12f      	bne.n	800e74e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	6a1b      	ldr	r3, [r3, #32]
 800e6f2:	781b      	ldrb	r3, [r3, #0]
 800e6f4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e6f6:	7bfb      	ldrb	r3, [r7, #15]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d102      	bne.n	800e702 <dir_find+0x4e>
 800e6fc:	2304      	movs	r3, #4
 800e6fe:	75fb      	strb	r3, [r7, #23]
 800e700:	e028      	b.n	800e754 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6a1b      	ldr	r3, [r3, #32]
 800e706:	330b      	adds	r3, #11
 800e708:	781b      	ldrb	r3, [r3, #0]
 800e70a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e70e:	b2da      	uxtb	r2, r3
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6a1b      	ldr	r3, [r3, #32]
 800e718:	330b      	adds	r3, #11
 800e71a:	781b      	ldrb	r3, [r3, #0]
 800e71c:	f003 0308 	and.w	r3, r3, #8
 800e720:	2b00      	cmp	r3, #0
 800e722:	d10a      	bne.n	800e73a <dir_find+0x86>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	6a18      	ldr	r0, [r3, #32]
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	3324      	adds	r3, #36	; 0x24
 800e72c:	220b      	movs	r2, #11
 800e72e:	4619      	mov	r1, r3
 800e730:	f7ff f88f 	bl	800d852 <mem_cmp>
 800e734:	4603      	mov	r3, r0
 800e736:	2b00      	cmp	r3, #0
 800e738:	d00b      	beq.n	800e752 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e73a:	2100      	movs	r1, #0
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f7ff fe6e 	bl	800e41e <dir_next>
 800e742:	4603      	mov	r3, r0
 800e744:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e746:	7dfb      	ldrb	r3, [r7, #23]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d0c5      	beq.n	800e6d8 <dir_find+0x24>
 800e74c:	e002      	b.n	800e754 <dir_find+0xa0>
		if (res != FR_OK) break;
 800e74e:	bf00      	nop
 800e750:	e000      	b.n	800e754 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e752:	bf00      	nop

	return res;
 800e754:	7dfb      	ldrb	r3, [r7, #23]
}
 800e756:	4618      	mov	r0, r3
 800e758:	3718      	adds	r7, #24
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}

0800e75e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e75e:	b580      	push	{r7, lr}
 800e760:	b084      	sub	sp, #16
 800e762:	af00      	add	r7, sp, #0
 800e764:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e76c:	2101      	movs	r1, #1
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	f7ff ff1a 	bl	800e5a8 <dir_alloc>
 800e774:	4603      	mov	r3, r0
 800e776:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e778:	7bfb      	ldrb	r3, [r7, #15]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d11c      	bne.n	800e7b8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	69db      	ldr	r3, [r3, #28]
 800e782:	4619      	mov	r1, r3
 800e784:	68b8      	ldr	r0, [r7, #8]
 800e786:	f7ff fa57 	bl	800dc38 <move_window>
 800e78a:	4603      	mov	r3, r0
 800e78c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e78e:	7bfb      	ldrb	r3, [r7, #15]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d111      	bne.n	800e7b8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	6a1b      	ldr	r3, [r3, #32]
 800e798:	2220      	movs	r2, #32
 800e79a:	2100      	movs	r1, #0
 800e79c:	4618      	mov	r0, r3
 800e79e:	f7ff f83e 	bl	800d81e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6a18      	ldr	r0, [r3, #32]
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	3324      	adds	r3, #36	; 0x24
 800e7aa:	220b      	movs	r2, #11
 800e7ac:	4619      	mov	r1, r3
 800e7ae:	f7ff f815 	bl	800d7dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	2201      	movs	r2, #1
 800e7b6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3710      	adds	r7, #16
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}
	...

0800e7c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b088      	sub	sp, #32
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	60fb      	str	r3, [r7, #12]
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	3324      	adds	r3, #36	; 0x24
 800e7d8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e7da:	220b      	movs	r2, #11
 800e7dc:	2120      	movs	r1, #32
 800e7de:	68b8      	ldr	r0, [r7, #8]
 800e7e0:	f7ff f81d 	bl	800d81e <mem_set>
	si = i = 0; ni = 8;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	613b      	str	r3, [r7, #16]
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	617b      	str	r3, [r7, #20]
 800e7ec:	2308      	movs	r3, #8
 800e7ee:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	1c5a      	adds	r2, r3, #1
 800e7f4:	617a      	str	r2, [r7, #20]
 800e7f6:	68fa      	ldr	r2, [r7, #12]
 800e7f8:	4413      	add	r3, r2
 800e7fa:	781b      	ldrb	r3, [r3, #0]
 800e7fc:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e7fe:	7ffb      	ldrb	r3, [r7, #31]
 800e800:	2b20      	cmp	r3, #32
 800e802:	d94e      	bls.n	800e8a2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e804:	7ffb      	ldrb	r3, [r7, #31]
 800e806:	2b2f      	cmp	r3, #47	; 0x2f
 800e808:	d006      	beq.n	800e818 <create_name+0x54>
 800e80a:	7ffb      	ldrb	r3, [r7, #31]
 800e80c:	2b5c      	cmp	r3, #92	; 0x5c
 800e80e:	d110      	bne.n	800e832 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e810:	e002      	b.n	800e818 <create_name+0x54>
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	3301      	adds	r3, #1
 800e816:	617b      	str	r3, [r7, #20]
 800e818:	68fa      	ldr	r2, [r7, #12]
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	4413      	add	r3, r2
 800e81e:	781b      	ldrb	r3, [r3, #0]
 800e820:	2b2f      	cmp	r3, #47	; 0x2f
 800e822:	d0f6      	beq.n	800e812 <create_name+0x4e>
 800e824:	68fa      	ldr	r2, [r7, #12]
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	4413      	add	r3, r2
 800e82a:	781b      	ldrb	r3, [r3, #0]
 800e82c:	2b5c      	cmp	r3, #92	; 0x5c
 800e82e:	d0f0      	beq.n	800e812 <create_name+0x4e>
			break;
 800e830:	e038      	b.n	800e8a4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e832:	7ffb      	ldrb	r3, [r7, #31]
 800e834:	2b2e      	cmp	r3, #46	; 0x2e
 800e836:	d003      	beq.n	800e840 <create_name+0x7c>
 800e838:	693a      	ldr	r2, [r7, #16]
 800e83a:	69bb      	ldr	r3, [r7, #24]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d30c      	bcc.n	800e85a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e840:	69bb      	ldr	r3, [r7, #24]
 800e842:	2b0b      	cmp	r3, #11
 800e844:	d002      	beq.n	800e84c <create_name+0x88>
 800e846:	7ffb      	ldrb	r3, [r7, #31]
 800e848:	2b2e      	cmp	r3, #46	; 0x2e
 800e84a:	d001      	beq.n	800e850 <create_name+0x8c>
 800e84c:	2306      	movs	r3, #6
 800e84e:	e044      	b.n	800e8da <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e850:	2308      	movs	r3, #8
 800e852:	613b      	str	r3, [r7, #16]
 800e854:	230b      	movs	r3, #11
 800e856:	61bb      	str	r3, [r7, #24]
			continue;
 800e858:	e022      	b.n	800e8a0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e85a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	da04      	bge.n	800e86c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e862:	7ffb      	ldrb	r3, [r7, #31]
 800e864:	3b80      	subs	r3, #128	; 0x80
 800e866:	4a1f      	ldr	r2, [pc, #124]	; (800e8e4 <create_name+0x120>)
 800e868:	5cd3      	ldrb	r3, [r2, r3]
 800e86a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e86c:	7ffb      	ldrb	r3, [r7, #31]
 800e86e:	4619      	mov	r1, r3
 800e870:	481d      	ldr	r0, [pc, #116]	; (800e8e8 <create_name+0x124>)
 800e872:	f7ff f815 	bl	800d8a0 <chk_chr>
 800e876:	4603      	mov	r3, r0
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d001      	beq.n	800e880 <create_name+0xbc>
 800e87c:	2306      	movs	r3, #6
 800e87e:	e02c      	b.n	800e8da <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e880:	7ffb      	ldrb	r3, [r7, #31]
 800e882:	2b60      	cmp	r3, #96	; 0x60
 800e884:	d905      	bls.n	800e892 <create_name+0xce>
 800e886:	7ffb      	ldrb	r3, [r7, #31]
 800e888:	2b7a      	cmp	r3, #122	; 0x7a
 800e88a:	d802      	bhi.n	800e892 <create_name+0xce>
 800e88c:	7ffb      	ldrb	r3, [r7, #31]
 800e88e:	3b20      	subs	r3, #32
 800e890:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	1c5a      	adds	r2, r3, #1
 800e896:	613a      	str	r2, [r7, #16]
 800e898:	68ba      	ldr	r2, [r7, #8]
 800e89a:	4413      	add	r3, r2
 800e89c:	7ffa      	ldrb	r2, [r7, #31]
 800e89e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e8a0:	e7a6      	b.n	800e7f0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e8a2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e8a4:	68fa      	ldr	r2, [r7, #12]
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	441a      	add	r2, r3
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e8ae:	693b      	ldr	r3, [r7, #16]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d101      	bne.n	800e8b8 <create_name+0xf4>
 800e8b4:	2306      	movs	r3, #6
 800e8b6:	e010      	b.n	800e8da <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	2be5      	cmp	r3, #229	; 0xe5
 800e8be:	d102      	bne.n	800e8c6 <create_name+0x102>
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	2205      	movs	r2, #5
 800e8c4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e8c6:	7ffb      	ldrb	r3, [r7, #31]
 800e8c8:	2b20      	cmp	r3, #32
 800e8ca:	d801      	bhi.n	800e8d0 <create_name+0x10c>
 800e8cc:	2204      	movs	r2, #4
 800e8ce:	e000      	b.n	800e8d2 <create_name+0x10e>
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	330b      	adds	r3, #11
 800e8d6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e8d8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3720      	adds	r7, #32
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
 800e8e2:	bf00      	nop
 800e8e4:	0801170c 	.word	0x0801170c
 800e8e8:	08010bd0 	.word	0x08010bd0

0800e8ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b086      	sub	sp, #24
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e8fa:	693b      	ldr	r3, [r7, #16]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e900:	e002      	b.n	800e908 <follow_path+0x1c>
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	3301      	adds	r3, #1
 800e906:	603b      	str	r3, [r7, #0]
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	781b      	ldrb	r3, [r3, #0]
 800e90c:	2b2f      	cmp	r3, #47	; 0x2f
 800e90e:	d0f8      	beq.n	800e902 <follow_path+0x16>
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	2b5c      	cmp	r3, #92	; 0x5c
 800e916:	d0f4      	beq.n	800e902 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e918:	693b      	ldr	r3, [r7, #16]
 800e91a:	2200      	movs	r2, #0
 800e91c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	2b1f      	cmp	r3, #31
 800e924:	d80a      	bhi.n	800e93c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2280      	movs	r2, #128	; 0x80
 800e92a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e92e:	2100      	movs	r1, #0
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f7ff fcf9 	bl	800e328 <dir_sdi>
 800e936:	4603      	mov	r3, r0
 800e938:	75fb      	strb	r3, [r7, #23]
 800e93a:	e043      	b.n	800e9c4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e93c:	463b      	mov	r3, r7
 800e93e:	4619      	mov	r1, r3
 800e940:	6878      	ldr	r0, [r7, #4]
 800e942:	f7ff ff3f 	bl	800e7c4 <create_name>
 800e946:	4603      	mov	r3, r0
 800e948:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e94a:	7dfb      	ldrb	r3, [r7, #23]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d134      	bne.n	800e9ba <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f7ff feaf 	bl	800e6b4 <dir_find>
 800e956:	4603      	mov	r3, r0
 800e958:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e960:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e962:	7dfb      	ldrb	r3, [r7, #23]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d00a      	beq.n	800e97e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e968:	7dfb      	ldrb	r3, [r7, #23]
 800e96a:	2b04      	cmp	r3, #4
 800e96c:	d127      	bne.n	800e9be <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e96e:	7afb      	ldrb	r3, [r7, #11]
 800e970:	f003 0304 	and.w	r3, r3, #4
 800e974:	2b00      	cmp	r3, #0
 800e976:	d122      	bne.n	800e9be <follow_path+0xd2>
 800e978:	2305      	movs	r3, #5
 800e97a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e97c:	e01f      	b.n	800e9be <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e97e:	7afb      	ldrb	r3, [r7, #11]
 800e980:	f003 0304 	and.w	r3, r3, #4
 800e984:	2b00      	cmp	r3, #0
 800e986:	d11c      	bne.n	800e9c2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e988:	693b      	ldr	r3, [r7, #16]
 800e98a:	799b      	ldrb	r3, [r3, #6]
 800e98c:	f003 0310 	and.w	r3, r3, #16
 800e990:	2b00      	cmp	r3, #0
 800e992:	d102      	bne.n	800e99a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e994:	2305      	movs	r3, #5
 800e996:	75fb      	strb	r3, [r7, #23]
 800e998:	e014      	b.n	800e9c4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	695b      	ldr	r3, [r3, #20]
 800e9a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9a8:	4413      	add	r3, r2
 800e9aa:	4619      	mov	r1, r3
 800e9ac:	68f8      	ldr	r0, [r7, #12]
 800e9ae:	f7ff fe42 	bl	800e636 <ld_clust>
 800e9b2:	4602      	mov	r2, r0
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e9b8:	e7c0      	b.n	800e93c <follow_path+0x50>
			if (res != FR_OK) break;
 800e9ba:	bf00      	nop
 800e9bc:	e002      	b.n	800e9c4 <follow_path+0xd8>
				break;
 800e9be:	bf00      	nop
 800e9c0:	e000      	b.n	800e9c4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e9c2:	bf00      	nop
			}
		}
	}

	return res;
 800e9c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	3718      	adds	r7, #24
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}

0800e9ce <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e9ce:	b480      	push	{r7}
 800e9d0:	b087      	sub	sp, #28
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e9d6:	f04f 33ff 	mov.w	r3, #4294967295
 800e9da:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d031      	beq.n	800ea48 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	617b      	str	r3, [r7, #20]
 800e9ea:	e002      	b.n	800e9f2 <get_ldnumber+0x24>
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	617b      	str	r3, [r7, #20]
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	781b      	ldrb	r3, [r3, #0]
 800e9f6:	2b20      	cmp	r3, #32
 800e9f8:	d903      	bls.n	800ea02 <get_ldnumber+0x34>
 800e9fa:	697b      	ldr	r3, [r7, #20]
 800e9fc:	781b      	ldrb	r3, [r3, #0]
 800e9fe:	2b3a      	cmp	r3, #58	; 0x3a
 800ea00:	d1f4      	bne.n	800e9ec <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	781b      	ldrb	r3, [r3, #0]
 800ea06:	2b3a      	cmp	r3, #58	; 0x3a
 800ea08:	d11c      	bne.n	800ea44 <get_ldnumber+0x76>
			tp = *path;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	1c5a      	adds	r2, r3, #1
 800ea14:	60fa      	str	r2, [r7, #12]
 800ea16:	781b      	ldrb	r3, [r3, #0]
 800ea18:	3b30      	subs	r3, #48	; 0x30
 800ea1a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	2b09      	cmp	r3, #9
 800ea20:	d80e      	bhi.n	800ea40 <get_ldnumber+0x72>
 800ea22:	68fa      	ldr	r2, [r7, #12]
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d10a      	bne.n	800ea40 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d107      	bne.n	800ea40 <get_ldnumber+0x72>
					vol = (int)i;
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	3301      	adds	r3, #1
 800ea38:	617b      	str	r3, [r7, #20]
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	697a      	ldr	r2, [r7, #20]
 800ea3e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ea40:	693b      	ldr	r3, [r7, #16]
 800ea42:	e002      	b.n	800ea4a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ea44:	2300      	movs	r3, #0
 800ea46:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ea48:	693b      	ldr	r3, [r7, #16]
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	371c      	adds	r7, #28
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea54:	4770      	bx	lr
	...

0800ea58 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b082      	sub	sp, #8
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2200      	movs	r2, #0
 800ea66:	70da      	strb	r2, [r3, #3]
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ea6e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ea70:	6839      	ldr	r1, [r7, #0]
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f7ff f8e0 	bl	800dc38 <move_window>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d001      	beq.n	800ea82 <check_fs+0x2a>
 800ea7e:	2304      	movs	r3, #4
 800ea80:	e038      	b.n	800eaf4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	3330      	adds	r3, #48	; 0x30
 800ea86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f7fe fe24 	bl	800d6d8 <ld_word>
 800ea90:	4603      	mov	r3, r0
 800ea92:	461a      	mov	r2, r3
 800ea94:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d001      	beq.n	800eaa0 <check_fs+0x48>
 800ea9c:	2303      	movs	r3, #3
 800ea9e:	e029      	b.n	800eaf4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eaa6:	2be9      	cmp	r3, #233	; 0xe9
 800eaa8:	d009      	beq.n	800eabe <check_fs+0x66>
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eab0:	2beb      	cmp	r3, #235	; 0xeb
 800eab2:	d11e      	bne.n	800eaf2 <check_fs+0x9a>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800eaba:	2b90      	cmp	r3, #144	; 0x90
 800eabc:	d119      	bne.n	800eaf2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	3330      	adds	r3, #48	; 0x30
 800eac2:	3336      	adds	r3, #54	; 0x36
 800eac4:	4618      	mov	r0, r3
 800eac6:	f7fe fe1f 	bl	800d708 <ld_dword>
 800eaca:	4603      	mov	r3, r0
 800eacc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ead0:	4a0a      	ldr	r2, [pc, #40]	; (800eafc <check_fs+0xa4>)
 800ead2:	4293      	cmp	r3, r2
 800ead4:	d101      	bne.n	800eada <check_fs+0x82>
 800ead6:	2300      	movs	r3, #0
 800ead8:	e00c      	b.n	800eaf4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	3330      	adds	r3, #48	; 0x30
 800eade:	3352      	adds	r3, #82	; 0x52
 800eae0:	4618      	mov	r0, r3
 800eae2:	f7fe fe11 	bl	800d708 <ld_dword>
 800eae6:	4602      	mov	r2, r0
 800eae8:	4b05      	ldr	r3, [pc, #20]	; (800eb00 <check_fs+0xa8>)
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d101      	bne.n	800eaf2 <check_fs+0x9a>
 800eaee:	2300      	movs	r3, #0
 800eaf0:	e000      	b.n	800eaf4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800eaf2:	2302      	movs	r3, #2
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3708      	adds	r7, #8
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}
 800eafc:	00544146 	.word	0x00544146
 800eb00:	33544146 	.word	0x33544146

0800eb04 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b096      	sub	sp, #88	; 0x58
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	60f8      	str	r0, [r7, #12]
 800eb0c:	60b9      	str	r1, [r7, #8]
 800eb0e:	4613      	mov	r3, r2
 800eb10:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	2200      	movs	r2, #0
 800eb16:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800eb18:	68f8      	ldr	r0, [r7, #12]
 800eb1a:	f7ff ff58 	bl	800e9ce <get_ldnumber>
 800eb1e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800eb20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	da01      	bge.n	800eb2a <find_volume+0x26>
 800eb26:	230b      	movs	r3, #11
 800eb28:	e22e      	b.n	800ef88 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800eb2a:	4aa8      	ldr	r2, [pc, #672]	; (800edcc <find_volume+0x2c8>)
 800eb2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb32:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800eb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d101      	bne.n	800eb3e <find_volume+0x3a>
 800eb3a:	230c      	movs	r3, #12
 800eb3c:	e224      	b.n	800ef88 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb42:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800eb44:	79fb      	ldrb	r3, [r7, #7]
 800eb46:	f023 0301 	bic.w	r3, r3, #1
 800eb4a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800eb4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d01a      	beq.n	800eb8a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800eb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb56:	785b      	ldrb	r3, [r3, #1]
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f7fe fd1f 	bl	800d59c <disk_status>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800eb64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eb68:	f003 0301 	and.w	r3, r3, #1
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d10c      	bne.n	800eb8a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800eb70:	79fb      	ldrb	r3, [r7, #7]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d007      	beq.n	800eb86 <find_volume+0x82>
 800eb76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eb7a:	f003 0304 	and.w	r3, r3, #4
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d001      	beq.n	800eb86 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800eb82:	230a      	movs	r3, #10
 800eb84:	e200      	b.n	800ef88 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800eb86:	2300      	movs	r3, #0
 800eb88:	e1fe      	b.n	800ef88 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800eb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800eb90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb92:	b2da      	uxtb	r2, r3
 800eb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb96:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800eb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb9a:	785b      	ldrb	r3, [r3, #1]
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7fe fd17 	bl	800d5d0 <disk_initialize>
 800eba2:	4603      	mov	r3, r0
 800eba4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800eba8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ebac:	f003 0301 	and.w	r3, r3, #1
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d001      	beq.n	800ebb8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ebb4:	2303      	movs	r3, #3
 800ebb6:	e1e7      	b.n	800ef88 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ebb8:	79fb      	ldrb	r3, [r7, #7]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d007      	beq.n	800ebce <find_volume+0xca>
 800ebbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ebc2:	f003 0304 	and.w	r3, r3, #4
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d001      	beq.n	800ebce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ebca:	230a      	movs	r3, #10
 800ebcc:	e1dc      	b.n	800ef88 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ebd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ebd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ebd6:	f7ff ff3f 	bl	800ea58 <check_fs>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ebe0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ebe4:	2b02      	cmp	r3, #2
 800ebe6:	d14b      	bne.n	800ec80 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ebe8:	2300      	movs	r3, #0
 800ebea:	643b      	str	r3, [r7, #64]	; 0x40
 800ebec:	e01f      	b.n	800ec2e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ebee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ebf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebf6:	011b      	lsls	r3, r3, #4
 800ebf8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ebfc:	4413      	add	r3, r2
 800ebfe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ec00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec02:	3304      	adds	r3, #4
 800ec04:	781b      	ldrb	r3, [r3, #0]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d006      	beq.n	800ec18 <find_volume+0x114>
 800ec0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0c:	3308      	adds	r3, #8
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7fe fd7a 	bl	800d708 <ld_dword>
 800ec14:	4602      	mov	r2, r0
 800ec16:	e000      	b.n	800ec1a <find_volume+0x116>
 800ec18:	2200      	movs	r2, #0
 800ec1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec1c:	009b      	lsls	r3, r3, #2
 800ec1e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ec22:	440b      	add	r3, r1
 800ec24:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ec28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec2a:	3301      	adds	r3, #1
 800ec2c:	643b      	str	r3, [r7, #64]	; 0x40
 800ec2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec30:	2b03      	cmp	r3, #3
 800ec32:	d9dc      	bls.n	800ebee <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ec34:	2300      	movs	r3, #0
 800ec36:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ec38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d002      	beq.n	800ec44 <find_volume+0x140>
 800ec3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec40:	3b01      	subs	r3, #1
 800ec42:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ec44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec46:	009b      	lsls	r3, r3, #2
 800ec48:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ec4c:	4413      	add	r3, r2
 800ec4e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ec52:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ec54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d005      	beq.n	800ec66 <find_volume+0x162>
 800ec5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ec5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ec5e:	f7ff fefb 	bl	800ea58 <check_fs>
 800ec62:	4603      	mov	r3, r0
 800ec64:	e000      	b.n	800ec68 <find_volume+0x164>
 800ec66:	2303      	movs	r3, #3
 800ec68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ec6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ec70:	2b01      	cmp	r3, #1
 800ec72:	d905      	bls.n	800ec80 <find_volume+0x17c>
 800ec74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec76:	3301      	adds	r3, #1
 800ec78:	643b      	str	r3, [r7, #64]	; 0x40
 800ec7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec7c:	2b03      	cmp	r3, #3
 800ec7e:	d9e1      	bls.n	800ec44 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ec80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ec84:	2b04      	cmp	r3, #4
 800ec86:	d101      	bne.n	800ec8c <find_volume+0x188>
 800ec88:	2301      	movs	r3, #1
 800ec8a:	e17d      	b.n	800ef88 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ec8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ec90:	2b01      	cmp	r3, #1
 800ec92:	d901      	bls.n	800ec98 <find_volume+0x194>
 800ec94:	230d      	movs	r3, #13
 800ec96:	e177      	b.n	800ef88 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ec98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec9a:	3330      	adds	r3, #48	; 0x30
 800ec9c:	330b      	adds	r3, #11
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f7fe fd1a 	bl	800d6d8 <ld_word>
 800eca4:	4603      	mov	r3, r0
 800eca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecaa:	d001      	beq.n	800ecb0 <find_volume+0x1ac>
 800ecac:	230d      	movs	r3, #13
 800ecae:	e16b      	b.n	800ef88 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ecb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb2:	3330      	adds	r3, #48	; 0x30
 800ecb4:	3316      	adds	r3, #22
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f7fe fd0e 	bl	800d6d8 <ld_word>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ecc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d106      	bne.n	800ecd4 <find_volume+0x1d0>
 800ecc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecc8:	3330      	adds	r3, #48	; 0x30
 800ecca:	3324      	adds	r3, #36	; 0x24
 800eccc:	4618      	mov	r0, r3
 800ecce:	f7fe fd1b 	bl	800d708 <ld_dword>
 800ecd2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ecd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ecd8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ecda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecdc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800ece0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ece4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece6:	789b      	ldrb	r3, [r3, #2]
 800ece8:	2b01      	cmp	r3, #1
 800ecea:	d005      	beq.n	800ecf8 <find_volume+0x1f4>
 800ecec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecee:	789b      	ldrb	r3, [r3, #2]
 800ecf0:	2b02      	cmp	r3, #2
 800ecf2:	d001      	beq.n	800ecf8 <find_volume+0x1f4>
 800ecf4:	230d      	movs	r3, #13
 800ecf6:	e147      	b.n	800ef88 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ecf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecfa:	789b      	ldrb	r3, [r3, #2]
 800ecfc:	461a      	mov	r2, r3
 800ecfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed00:	fb02 f303 	mul.w	r3, r2, r3
 800ed04:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ed06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed0c:	b29a      	uxth	r2, r3
 800ed0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed10:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ed12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed14:	895b      	ldrh	r3, [r3, #10]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d008      	beq.n	800ed2c <find_volume+0x228>
 800ed1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed1c:	895b      	ldrh	r3, [r3, #10]
 800ed1e:	461a      	mov	r2, r3
 800ed20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed22:	895b      	ldrh	r3, [r3, #10]
 800ed24:	3b01      	subs	r3, #1
 800ed26:	4013      	ands	r3, r2
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d001      	beq.n	800ed30 <find_volume+0x22c>
 800ed2c:	230d      	movs	r3, #13
 800ed2e:	e12b      	b.n	800ef88 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ed30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed32:	3330      	adds	r3, #48	; 0x30
 800ed34:	3311      	adds	r3, #17
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7fe fcce 	bl	800d6d8 <ld_word>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	461a      	mov	r2, r3
 800ed40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed42:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ed44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed46:	891b      	ldrh	r3, [r3, #8]
 800ed48:	f003 030f 	and.w	r3, r3, #15
 800ed4c:	b29b      	uxth	r3, r3
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d001      	beq.n	800ed56 <find_volume+0x252>
 800ed52:	230d      	movs	r3, #13
 800ed54:	e118      	b.n	800ef88 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ed56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed58:	3330      	adds	r3, #48	; 0x30
 800ed5a:	3313      	adds	r3, #19
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f7fe fcbb 	bl	800d6d8 <ld_word>
 800ed62:	4603      	mov	r3, r0
 800ed64:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ed66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d106      	bne.n	800ed7a <find_volume+0x276>
 800ed6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed6e:	3330      	adds	r3, #48	; 0x30
 800ed70:	3320      	adds	r3, #32
 800ed72:	4618      	mov	r0, r3
 800ed74:	f7fe fcc8 	bl	800d708 <ld_dword>
 800ed78:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ed7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed7c:	3330      	adds	r3, #48	; 0x30
 800ed7e:	330e      	adds	r3, #14
 800ed80:	4618      	mov	r0, r3
 800ed82:	f7fe fca9 	bl	800d6d8 <ld_word>
 800ed86:	4603      	mov	r3, r0
 800ed88:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ed8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d101      	bne.n	800ed94 <find_volume+0x290>
 800ed90:	230d      	movs	r3, #13
 800ed92:	e0f9      	b.n	800ef88 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ed94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ed96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed98:	4413      	add	r3, r2
 800ed9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed9c:	8912      	ldrh	r2, [r2, #8]
 800ed9e:	0912      	lsrs	r2, r2, #4
 800eda0:	b292      	uxth	r2, r2
 800eda2:	4413      	add	r3, r2
 800eda4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800eda6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edaa:	429a      	cmp	r2, r3
 800edac:	d201      	bcs.n	800edb2 <find_volume+0x2ae>
 800edae:	230d      	movs	r3, #13
 800edb0:	e0ea      	b.n	800ef88 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800edb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800edb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edb6:	1ad3      	subs	r3, r2, r3
 800edb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edba:	8952      	ldrh	r2, [r2, #10]
 800edbc:	fbb3 f3f2 	udiv	r3, r3, r2
 800edc0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800edc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d103      	bne.n	800edd0 <find_volume+0x2cc>
 800edc8:	230d      	movs	r3, #13
 800edca:	e0dd      	b.n	800ef88 <find_volume+0x484>
 800edcc:	20001374 	.word	0x20001374
		fmt = FS_FAT32;
 800edd0:	2303      	movs	r3, #3
 800edd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800edd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800eddc:	4293      	cmp	r3, r2
 800edde:	d802      	bhi.n	800ede6 <find_volume+0x2e2>
 800ede0:	2302      	movs	r3, #2
 800ede2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ede6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800edec:	4293      	cmp	r3, r2
 800edee:	d802      	bhi.n	800edf6 <find_volume+0x2f2>
 800edf0:	2301      	movs	r3, #1
 800edf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800edf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf8:	1c9a      	adds	r2, r3, #2
 800edfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edfc:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800edfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee02:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ee04:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ee06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee08:	441a      	add	r2, r3
 800ee0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee0c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800ee0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee12:	441a      	add	r2, r3
 800ee14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee16:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800ee18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee1c:	2b03      	cmp	r3, #3
 800ee1e:	d11e      	bne.n	800ee5e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ee20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee22:	3330      	adds	r3, #48	; 0x30
 800ee24:	332a      	adds	r3, #42	; 0x2a
 800ee26:	4618      	mov	r0, r3
 800ee28:	f7fe fc56 	bl	800d6d8 <ld_word>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d001      	beq.n	800ee36 <find_volume+0x332>
 800ee32:	230d      	movs	r3, #13
 800ee34:	e0a8      	b.n	800ef88 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ee36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee38:	891b      	ldrh	r3, [r3, #8]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d001      	beq.n	800ee42 <find_volume+0x33e>
 800ee3e:	230d      	movs	r3, #13
 800ee40:	e0a2      	b.n	800ef88 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ee42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee44:	3330      	adds	r3, #48	; 0x30
 800ee46:	332c      	adds	r3, #44	; 0x2c
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f7fe fc5d 	bl	800d708 <ld_dword>
 800ee4e:	4602      	mov	r2, r0
 800ee50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee52:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ee54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee56:	695b      	ldr	r3, [r3, #20]
 800ee58:	009b      	lsls	r3, r3, #2
 800ee5a:	647b      	str	r3, [r7, #68]	; 0x44
 800ee5c:	e01f      	b.n	800ee9e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ee5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee60:	891b      	ldrh	r3, [r3, #8]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d101      	bne.n	800ee6a <find_volume+0x366>
 800ee66:	230d      	movs	r3, #13
 800ee68:	e08e      	b.n	800ef88 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ee6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee6c:	6a1a      	ldr	r2, [r3, #32]
 800ee6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee70:	441a      	add	r2, r3
 800ee72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee74:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ee76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee7a:	2b02      	cmp	r3, #2
 800ee7c:	d103      	bne.n	800ee86 <find_volume+0x382>
 800ee7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee80:	695b      	ldr	r3, [r3, #20]
 800ee82:	005b      	lsls	r3, r3, #1
 800ee84:	e00a      	b.n	800ee9c <find_volume+0x398>
 800ee86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee88:	695a      	ldr	r2, [r3, #20]
 800ee8a:	4613      	mov	r3, r2
 800ee8c:	005b      	lsls	r3, r3, #1
 800ee8e:	4413      	add	r3, r2
 800ee90:	085a      	lsrs	r2, r3, #1
 800ee92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee94:	695b      	ldr	r3, [r3, #20]
 800ee96:	f003 0301 	and.w	r3, r3, #1
 800ee9a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ee9c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ee9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea0:	699a      	ldr	r2, [r3, #24]
 800eea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eea4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800eea8:	0a5b      	lsrs	r3, r3, #9
 800eeaa:	429a      	cmp	r2, r3
 800eeac:	d201      	bcs.n	800eeb2 <find_volume+0x3ae>
 800eeae:	230d      	movs	r3, #13
 800eeb0:	e06a      	b.n	800ef88 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800eeb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb4:	f04f 32ff 	mov.w	r2, #4294967295
 800eeb8:	611a      	str	r2, [r3, #16]
 800eeba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eebc:	691a      	ldr	r2, [r3, #16]
 800eebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec0:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800eec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec4:	2280      	movs	r2, #128	; 0x80
 800eec6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800eec8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eecc:	2b03      	cmp	r3, #3
 800eece:	d149      	bne.n	800ef64 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800eed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed2:	3330      	adds	r3, #48	; 0x30
 800eed4:	3330      	adds	r3, #48	; 0x30
 800eed6:	4618      	mov	r0, r3
 800eed8:	f7fe fbfe 	bl	800d6d8 <ld_word>
 800eedc:	4603      	mov	r3, r0
 800eede:	2b01      	cmp	r3, #1
 800eee0:	d140      	bne.n	800ef64 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800eee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eee4:	3301      	adds	r3, #1
 800eee6:	4619      	mov	r1, r3
 800eee8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eeea:	f7fe fea5 	bl	800dc38 <move_window>
 800eeee:	4603      	mov	r3, r0
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d137      	bne.n	800ef64 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800eef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef6:	2200      	movs	r2, #0
 800eef8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800eefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eefc:	3330      	adds	r3, #48	; 0x30
 800eefe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ef02:	4618      	mov	r0, r3
 800ef04:	f7fe fbe8 	bl	800d6d8 <ld_word>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	461a      	mov	r2, r3
 800ef0c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d127      	bne.n	800ef64 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ef14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef16:	3330      	adds	r3, #48	; 0x30
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7fe fbf5 	bl	800d708 <ld_dword>
 800ef1e:	4602      	mov	r2, r0
 800ef20:	4b1b      	ldr	r3, [pc, #108]	; (800ef90 <find_volume+0x48c>)
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d11e      	bne.n	800ef64 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ef26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef28:	3330      	adds	r3, #48	; 0x30
 800ef2a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7fe fbea 	bl	800d708 <ld_dword>
 800ef34:	4602      	mov	r2, r0
 800ef36:	4b17      	ldr	r3, [pc, #92]	; (800ef94 <find_volume+0x490>)
 800ef38:	429a      	cmp	r2, r3
 800ef3a:	d113      	bne.n	800ef64 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ef3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef3e:	3330      	adds	r3, #48	; 0x30
 800ef40:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7fe fbdf 	bl	800d708 <ld_dword>
 800ef4a:	4602      	mov	r2, r0
 800ef4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef4e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ef50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef52:	3330      	adds	r3, #48	; 0x30
 800ef54:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f7fe fbd5 	bl	800d708 <ld_dword>
 800ef5e:	4602      	mov	r2, r0
 800ef60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef62:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ef64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef66:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ef6a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ef6c:	4b0a      	ldr	r3, [pc, #40]	; (800ef98 <find_volume+0x494>)
 800ef6e:	881b      	ldrh	r3, [r3, #0]
 800ef70:	3301      	adds	r3, #1
 800ef72:	b29a      	uxth	r2, r3
 800ef74:	4b08      	ldr	r3, [pc, #32]	; (800ef98 <find_volume+0x494>)
 800ef76:	801a      	strh	r2, [r3, #0]
 800ef78:	4b07      	ldr	r3, [pc, #28]	; (800ef98 <find_volume+0x494>)
 800ef7a:	881a      	ldrh	r2, [r3, #0]
 800ef7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef7e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ef80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ef82:	f7fe fdf1 	bl	800db68 <clear_lock>
#endif
	return FR_OK;
 800ef86:	2300      	movs	r3, #0
}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3758      	adds	r7, #88	; 0x58
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}
 800ef90:	41615252 	.word	0x41615252
 800ef94:	61417272 	.word	0x61417272
 800ef98:	20001378 	.word	0x20001378

0800ef9c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b084      	sub	sp, #16
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800efa6:	2309      	movs	r3, #9
 800efa8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d01c      	beq.n	800efea <validate+0x4e>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d018      	beq.n	800efea <validate+0x4e>
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	781b      	ldrb	r3, [r3, #0]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d013      	beq.n	800efea <validate+0x4e>
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	889a      	ldrh	r2, [r3, #4]
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	88db      	ldrh	r3, [r3, #6]
 800efcc:	429a      	cmp	r2, r3
 800efce:	d10c      	bne.n	800efea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	785b      	ldrb	r3, [r3, #1]
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7fe fae0 	bl	800d59c <disk_status>
 800efdc:	4603      	mov	r3, r0
 800efde:	f003 0301 	and.w	r3, r3, #1
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d101      	bne.n	800efea <validate+0x4e>
			res = FR_OK;
 800efe6:	2300      	movs	r3, #0
 800efe8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800efea:	7bfb      	ldrb	r3, [r7, #15]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d102      	bne.n	800eff6 <validate+0x5a>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	e000      	b.n	800eff8 <validate+0x5c>
 800eff6:	2300      	movs	r3, #0
 800eff8:	683a      	ldr	r2, [r7, #0]
 800effa:	6013      	str	r3, [r2, #0]
	return res;
 800effc:	7bfb      	ldrb	r3, [r7, #15]
}
 800effe:	4618      	mov	r0, r3
 800f000:	3710      	adds	r7, #16
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
	...

0800f008 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b088      	sub	sp, #32
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	60f8      	str	r0, [r7, #12]
 800f010:	60b9      	str	r1, [r7, #8]
 800f012:	4613      	mov	r3, r2
 800f014:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f01a:	f107 0310 	add.w	r3, r7, #16
 800f01e:	4618      	mov	r0, r3
 800f020:	f7ff fcd5 	bl	800e9ce <get_ldnumber>
 800f024:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f026:	69fb      	ldr	r3, [r7, #28]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	da01      	bge.n	800f030 <f_mount+0x28>
 800f02c:	230b      	movs	r3, #11
 800f02e:	e02b      	b.n	800f088 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f030:	4a17      	ldr	r2, [pc, #92]	; (800f090 <f_mount+0x88>)
 800f032:	69fb      	ldr	r3, [r7, #28]
 800f034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f038:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f03a:	69bb      	ldr	r3, [r7, #24]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d005      	beq.n	800f04c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f040:	69b8      	ldr	r0, [r7, #24]
 800f042:	f7fe fd91 	bl	800db68 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f046:	69bb      	ldr	r3, [r7, #24]
 800f048:	2200      	movs	r2, #0
 800f04a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d002      	beq.n	800f058 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	2200      	movs	r2, #0
 800f056:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f058:	68fa      	ldr	r2, [r7, #12]
 800f05a:	490d      	ldr	r1, [pc, #52]	; (800f090 <f_mount+0x88>)
 800f05c:	69fb      	ldr	r3, [r7, #28]
 800f05e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d002      	beq.n	800f06e <f_mount+0x66>
 800f068:	79fb      	ldrb	r3, [r7, #7]
 800f06a:	2b01      	cmp	r3, #1
 800f06c:	d001      	beq.n	800f072 <f_mount+0x6a>
 800f06e:	2300      	movs	r3, #0
 800f070:	e00a      	b.n	800f088 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f072:	f107 010c 	add.w	r1, r7, #12
 800f076:	f107 0308 	add.w	r3, r7, #8
 800f07a:	2200      	movs	r2, #0
 800f07c:	4618      	mov	r0, r3
 800f07e:	f7ff fd41 	bl	800eb04 <find_volume>
 800f082:	4603      	mov	r3, r0
 800f084:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f086:	7dfb      	ldrb	r3, [r7, #23]
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3720      	adds	r7, #32
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}
 800f090:	20001374 	.word	0x20001374

0800f094 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b098      	sub	sp, #96	; 0x60
 800f098:	af00      	add	r7, sp, #0
 800f09a:	60f8      	str	r0, [r7, #12]
 800f09c:	60b9      	str	r1, [r7, #8]
 800f09e:	4613      	mov	r3, r2
 800f0a0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d101      	bne.n	800f0ac <f_open+0x18>
 800f0a8:	2309      	movs	r3, #9
 800f0aa:	e1ad      	b.n	800f408 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f0ac:	79fb      	ldrb	r3, [r7, #7]
 800f0ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0b2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f0b4:	79fa      	ldrb	r2, [r7, #7]
 800f0b6:	f107 0110 	add.w	r1, r7, #16
 800f0ba:	f107 0308 	add.w	r3, r7, #8
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f7ff fd20 	bl	800eb04 <find_volume>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800f0ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	f040 8191 	bne.w	800f3f6 <f_open+0x362>
		dj.obj.fs = fs;
 800f0d4:	693b      	ldr	r3, [r7, #16]
 800f0d6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f0d8:	68ba      	ldr	r2, [r7, #8]
 800f0da:	f107 0314 	add.w	r3, r7, #20
 800f0de:	4611      	mov	r1, r2
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f7ff fc03 	bl	800e8ec <follow_path>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f0ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d11a      	bne.n	800f12a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f0f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f0f8:	b25b      	sxtb	r3, r3
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	da03      	bge.n	800f106 <f_open+0x72>
				res = FR_INVALID_NAME;
 800f0fe:	2306      	movs	r3, #6
 800f100:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f104:	e011      	b.n	800f12a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f106:	79fb      	ldrb	r3, [r7, #7]
 800f108:	f023 0301 	bic.w	r3, r3, #1
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	bf14      	ite	ne
 800f110:	2301      	movne	r3, #1
 800f112:	2300      	moveq	r3, #0
 800f114:	b2db      	uxtb	r3, r3
 800f116:	461a      	mov	r2, r3
 800f118:	f107 0314 	add.w	r3, r7, #20
 800f11c:	4611      	mov	r1, r2
 800f11e:	4618      	mov	r0, r3
 800f120:	f7fe fbda 	bl	800d8d8 <chk_lock>
 800f124:	4603      	mov	r3, r0
 800f126:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f12a:	79fb      	ldrb	r3, [r7, #7]
 800f12c:	f003 031c 	and.w	r3, r3, #28
 800f130:	2b00      	cmp	r3, #0
 800f132:	d07f      	beq.n	800f234 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f134:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d017      	beq.n	800f16c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f13c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f140:	2b04      	cmp	r3, #4
 800f142:	d10e      	bne.n	800f162 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f144:	f7fe fc24 	bl	800d990 <enq_lock>
 800f148:	4603      	mov	r3, r0
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d006      	beq.n	800f15c <f_open+0xc8>
 800f14e:	f107 0314 	add.w	r3, r7, #20
 800f152:	4618      	mov	r0, r3
 800f154:	f7ff fb03 	bl	800e75e <dir_register>
 800f158:	4603      	mov	r3, r0
 800f15a:	e000      	b.n	800f15e <f_open+0xca>
 800f15c:	2312      	movs	r3, #18
 800f15e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f162:	79fb      	ldrb	r3, [r7, #7]
 800f164:	f043 0308 	orr.w	r3, r3, #8
 800f168:	71fb      	strb	r3, [r7, #7]
 800f16a:	e010      	b.n	800f18e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f16c:	7ebb      	ldrb	r3, [r7, #26]
 800f16e:	f003 0311 	and.w	r3, r3, #17
 800f172:	2b00      	cmp	r3, #0
 800f174:	d003      	beq.n	800f17e <f_open+0xea>
					res = FR_DENIED;
 800f176:	2307      	movs	r3, #7
 800f178:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f17c:	e007      	b.n	800f18e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f17e:	79fb      	ldrb	r3, [r7, #7]
 800f180:	f003 0304 	and.w	r3, r3, #4
 800f184:	2b00      	cmp	r3, #0
 800f186:	d002      	beq.n	800f18e <f_open+0xfa>
 800f188:	2308      	movs	r3, #8
 800f18a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f18e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f192:	2b00      	cmp	r3, #0
 800f194:	d168      	bne.n	800f268 <f_open+0x1d4>
 800f196:	79fb      	ldrb	r3, [r7, #7]
 800f198:	f003 0308 	and.w	r3, r3, #8
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d063      	beq.n	800f268 <f_open+0x1d4>
				dw = GET_FATTIME();
 800f1a0:	f7fb fa04 	bl	800a5ac <get_fattime>
 800f1a4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f1a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1a8:	330e      	adds	r3, #14
 800f1aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f7fe fae9 	bl	800d784 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1b4:	3316      	adds	r3, #22
 800f1b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f7fe fae3 	bl	800d784 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1c0:	330b      	adds	r3, #11
 800f1c2:	2220      	movs	r2, #32
 800f1c4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1ca:	4611      	mov	r1, r2
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f7ff fa32 	bl	800e636 <ld_clust>
 800f1d2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f1d8:	2200      	movs	r2, #0
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7ff fa4a 	bl	800e674 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1e2:	331c      	adds	r3, #28
 800f1e4:	2100      	movs	r1, #0
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f7fe facc 	bl	800d784 <st_dword>
					fs->wflag = 1;
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	2201      	movs	r2, #1
 800f1f0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f1f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d037      	beq.n	800f268 <f_open+0x1d4>
						dw = fs->winsect;
 800f1f8:	693b      	ldr	r3, [r7, #16]
 800f1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1fc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800f1fe:	f107 0314 	add.w	r3, r7, #20
 800f202:	2200      	movs	r2, #0
 800f204:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f206:	4618      	mov	r0, r3
 800f208:	f7fe ff5d 	bl	800e0c6 <remove_chain>
 800f20c:	4603      	mov	r3, r0
 800f20e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800f212:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f216:	2b00      	cmp	r3, #0
 800f218:	d126      	bne.n	800f268 <f_open+0x1d4>
							res = move_window(fs, dw);
 800f21a:	693b      	ldr	r3, [r7, #16]
 800f21c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f21e:	4618      	mov	r0, r3
 800f220:	f7fe fd0a 	bl	800dc38 <move_window>
 800f224:	4603      	mov	r3, r0
 800f226:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f22a:	693b      	ldr	r3, [r7, #16]
 800f22c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f22e:	3a01      	subs	r2, #1
 800f230:	60da      	str	r2, [r3, #12]
 800f232:	e019      	b.n	800f268 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f234:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d115      	bne.n	800f268 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f23c:	7ebb      	ldrb	r3, [r7, #26]
 800f23e:	f003 0310 	and.w	r3, r3, #16
 800f242:	2b00      	cmp	r3, #0
 800f244:	d003      	beq.n	800f24e <f_open+0x1ba>
					res = FR_NO_FILE;
 800f246:	2304      	movs	r3, #4
 800f248:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f24c:	e00c      	b.n	800f268 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f24e:	79fb      	ldrb	r3, [r7, #7]
 800f250:	f003 0302 	and.w	r3, r3, #2
 800f254:	2b00      	cmp	r3, #0
 800f256:	d007      	beq.n	800f268 <f_open+0x1d4>
 800f258:	7ebb      	ldrb	r3, [r7, #26]
 800f25a:	f003 0301 	and.w	r3, r3, #1
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d002      	beq.n	800f268 <f_open+0x1d4>
						res = FR_DENIED;
 800f262:	2307      	movs	r3, #7
 800f264:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800f268:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d128      	bne.n	800f2c2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f270:	79fb      	ldrb	r3, [r7, #7]
 800f272:	f003 0308 	and.w	r3, r3, #8
 800f276:	2b00      	cmp	r3, #0
 800f278:	d003      	beq.n	800f282 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f27a:	79fb      	ldrb	r3, [r7, #7]
 800f27c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f280:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f28a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f290:	79fb      	ldrb	r3, [r7, #7]
 800f292:	f023 0301 	bic.w	r3, r3, #1
 800f296:	2b00      	cmp	r3, #0
 800f298:	bf14      	ite	ne
 800f29a:	2301      	movne	r3, #1
 800f29c:	2300      	moveq	r3, #0
 800f29e:	b2db      	uxtb	r3, r3
 800f2a0:	461a      	mov	r2, r3
 800f2a2:	f107 0314 	add.w	r3, r7, #20
 800f2a6:	4611      	mov	r1, r2
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f7fe fb93 	bl	800d9d4 <inc_lock>
 800f2ae:	4602      	mov	r2, r0
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	691b      	ldr	r3, [r3, #16]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d102      	bne.n	800f2c2 <f_open+0x22e>
 800f2bc:	2302      	movs	r3, #2
 800f2be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f2c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	f040 8095 	bne.w	800f3f6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f2cc:	693b      	ldr	r3, [r7, #16]
 800f2ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f2d0:	4611      	mov	r1, r2
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7ff f9af 	bl	800e636 <ld_clust>
 800f2d8:	4602      	mov	r2, r0
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2e0:	331c      	adds	r3, #28
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7fe fa10 	bl	800d708 <ld_dword>
 800f2e8:	4602      	mov	r2, r0
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f2f4:	693a      	ldr	r2, [r7, #16]
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	88da      	ldrh	r2, [r3, #6]
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	79fa      	ldrb	r2, [r7, #7]
 800f306:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2200      	movs	r2, #0
 800f30c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	2200      	movs	r2, #0
 800f312:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	2200      	movs	r2, #0
 800f318:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	3330      	adds	r3, #48	; 0x30
 800f31e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f322:	2100      	movs	r1, #0
 800f324:	4618      	mov	r0, r3
 800f326:	f7fe fa7a 	bl	800d81e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f32a:	79fb      	ldrb	r3, [r7, #7]
 800f32c:	f003 0320 	and.w	r3, r3, #32
 800f330:	2b00      	cmp	r3, #0
 800f332:	d060      	beq.n	800f3f6 <f_open+0x362>
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	68db      	ldr	r3, [r3, #12]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d05c      	beq.n	800f3f6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	68da      	ldr	r2, [r3, #12]
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	895b      	ldrh	r3, [r3, #10]
 800f348:	025b      	lsls	r3, r3, #9
 800f34a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	689b      	ldr	r3, [r3, #8]
 800f350:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	68db      	ldr	r3, [r3, #12]
 800f356:	657b      	str	r3, [r7, #84]	; 0x54
 800f358:	e016      	b.n	800f388 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f35e:	4618      	mov	r0, r3
 800f360:	f7fe fd25 	bl	800ddae <get_fat>
 800f364:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800f366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f368:	2b01      	cmp	r3, #1
 800f36a:	d802      	bhi.n	800f372 <f_open+0x2de>
 800f36c:	2302      	movs	r3, #2
 800f36e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f372:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f378:	d102      	bne.n	800f380 <f_open+0x2ec>
 800f37a:	2301      	movs	r3, #1
 800f37c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f380:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f384:	1ad3      	subs	r3, r2, r3
 800f386:	657b      	str	r3, [r7, #84]	; 0x54
 800f388:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d103      	bne.n	800f398 <f_open+0x304>
 800f390:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f394:	429a      	cmp	r2, r3
 800f396:	d8e0      	bhi.n	800f35a <f_open+0x2c6>
				}
				fp->clust = clst;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f39c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f39e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d127      	bne.n	800f3f6 <f_open+0x362>
 800f3a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d022      	beq.n	800f3f6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f3b0:	693b      	ldr	r3, [r7, #16]
 800f3b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f7fe fcdb 	bl	800dd70 <clust2sect>
 800f3ba:	6478      	str	r0, [r7, #68]	; 0x44
 800f3bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d103      	bne.n	800f3ca <f_open+0x336>
						res = FR_INT_ERR;
 800f3c2:	2302      	movs	r3, #2
 800f3c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f3c8:	e015      	b.n	800f3f6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f3ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3cc:	0a5a      	lsrs	r2, r3, #9
 800f3ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3d0:	441a      	add	r2, r3
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f3d6:	693b      	ldr	r3, [r7, #16]
 800f3d8:	7858      	ldrb	r0, [r3, #1]
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	6a1a      	ldr	r2, [r3, #32]
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	f7fe f919 	bl	800d61c <disk_read>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d002      	beq.n	800f3f6 <f_open+0x362>
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f3f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d002      	beq.n	800f404 <f_open+0x370>
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	2200      	movs	r2, #0
 800f402:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f404:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3760      	adds	r7, #96	; 0x60
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b08e      	sub	sp, #56	; 0x38
 800f414:	af00      	add	r7, sp, #0
 800f416:	60f8      	str	r0, [r7, #12]
 800f418:	60b9      	str	r1, [r7, #8]
 800f41a:	607a      	str	r2, [r7, #4]
 800f41c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800f41e:	68bb      	ldr	r3, [r7, #8]
 800f420:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	2200      	movs	r2, #0
 800f426:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	f107 0214 	add.w	r2, r7, #20
 800f42e:	4611      	mov	r1, r2
 800f430:	4618      	mov	r0, r3
 800f432:	f7ff fdb3 	bl	800ef9c <validate>
 800f436:	4603      	mov	r3, r0
 800f438:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f43c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f440:	2b00      	cmp	r3, #0
 800f442:	d107      	bne.n	800f454 <f_read+0x44>
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	7d5b      	ldrb	r3, [r3, #21]
 800f448:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f44c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f450:	2b00      	cmp	r3, #0
 800f452:	d002      	beq.n	800f45a <f_read+0x4a>
 800f454:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f458:	e115      	b.n	800f686 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	7d1b      	ldrb	r3, [r3, #20]
 800f45e:	f003 0301 	and.w	r3, r3, #1
 800f462:	2b00      	cmp	r3, #0
 800f464:	d101      	bne.n	800f46a <f_read+0x5a>
 800f466:	2307      	movs	r3, #7
 800f468:	e10d      	b.n	800f686 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	68da      	ldr	r2, [r3, #12]
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	699b      	ldr	r3, [r3, #24]
 800f472:	1ad3      	subs	r3, r2, r3
 800f474:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f476:	687a      	ldr	r2, [r7, #4]
 800f478:	6a3b      	ldr	r3, [r7, #32]
 800f47a:	429a      	cmp	r2, r3
 800f47c:	f240 80fe 	bls.w	800f67c <f_read+0x26c>
 800f480:	6a3b      	ldr	r3, [r7, #32]
 800f482:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800f484:	e0fa      	b.n	800f67c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	699b      	ldr	r3, [r3, #24]
 800f48a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f48e:	2b00      	cmp	r3, #0
 800f490:	f040 80c6 	bne.w	800f620 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	699b      	ldr	r3, [r3, #24]
 800f498:	0a5b      	lsrs	r3, r3, #9
 800f49a:	697a      	ldr	r2, [r7, #20]
 800f49c:	8952      	ldrh	r2, [r2, #10]
 800f49e:	3a01      	subs	r2, #1
 800f4a0:	4013      	ands	r3, r2
 800f4a2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800f4a4:	69fb      	ldr	r3, [r7, #28]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d12f      	bne.n	800f50a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	699b      	ldr	r3, [r3, #24]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d103      	bne.n	800f4ba <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	689b      	ldr	r3, [r3, #8]
 800f4b6:	633b      	str	r3, [r7, #48]	; 0x30
 800f4b8:	e013      	b.n	800f4e2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d007      	beq.n	800f4d2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	699b      	ldr	r3, [r3, #24]
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	68f8      	ldr	r0, [r7, #12]
 800f4ca:	f7fe fef9 	bl	800e2c0 <clmt_clust>
 800f4ce:	6338      	str	r0, [r7, #48]	; 0x30
 800f4d0:	e007      	b.n	800f4e2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f4d2:	68fa      	ldr	r2, [r7, #12]
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	69db      	ldr	r3, [r3, #28]
 800f4d8:	4619      	mov	r1, r3
 800f4da:	4610      	mov	r0, r2
 800f4dc:	f7fe fc67 	bl	800ddae <get_fat>
 800f4e0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e4:	2b01      	cmp	r3, #1
 800f4e6:	d804      	bhi.n	800f4f2 <f_read+0xe2>
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	2202      	movs	r2, #2
 800f4ec:	755a      	strb	r2, [r3, #21]
 800f4ee:	2302      	movs	r3, #2
 800f4f0:	e0c9      	b.n	800f686 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4f8:	d104      	bne.n	800f504 <f_read+0xf4>
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	755a      	strb	r2, [r3, #21]
 800f500:	2301      	movs	r3, #1
 800f502:	e0c0      	b.n	800f686 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f508:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f50a:	697a      	ldr	r2, [r7, #20]
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	69db      	ldr	r3, [r3, #28]
 800f510:	4619      	mov	r1, r3
 800f512:	4610      	mov	r0, r2
 800f514:	f7fe fc2c 	bl	800dd70 <clust2sect>
 800f518:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f51a:	69bb      	ldr	r3, [r7, #24]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d104      	bne.n	800f52a <f_read+0x11a>
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	2202      	movs	r2, #2
 800f524:	755a      	strb	r2, [r3, #21]
 800f526:	2302      	movs	r3, #2
 800f528:	e0ad      	b.n	800f686 <f_read+0x276>
			sect += csect;
 800f52a:	69ba      	ldr	r2, [r7, #24]
 800f52c:	69fb      	ldr	r3, [r7, #28]
 800f52e:	4413      	add	r3, r2
 800f530:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	0a5b      	lsrs	r3, r3, #9
 800f536:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d039      	beq.n	800f5b2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f53e:	69fa      	ldr	r2, [r7, #28]
 800f540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f542:	4413      	add	r3, r2
 800f544:	697a      	ldr	r2, [r7, #20]
 800f546:	8952      	ldrh	r2, [r2, #10]
 800f548:	4293      	cmp	r3, r2
 800f54a:	d905      	bls.n	800f558 <f_read+0x148>
					cc = fs->csize - csect;
 800f54c:	697b      	ldr	r3, [r7, #20]
 800f54e:	895b      	ldrh	r3, [r3, #10]
 800f550:	461a      	mov	r2, r3
 800f552:	69fb      	ldr	r3, [r7, #28]
 800f554:	1ad3      	subs	r3, r2, r3
 800f556:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	7858      	ldrb	r0, [r3, #1]
 800f55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f55e:	69ba      	ldr	r2, [r7, #24]
 800f560:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f562:	f7fe f85b 	bl	800d61c <disk_read>
 800f566:	4603      	mov	r3, r0
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d004      	beq.n	800f576 <f_read+0x166>
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	2201      	movs	r2, #1
 800f570:	755a      	strb	r2, [r3, #21]
 800f572:	2301      	movs	r3, #1
 800f574:	e087      	b.n	800f686 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	7d1b      	ldrb	r3, [r3, #20]
 800f57a:	b25b      	sxtb	r3, r3
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	da14      	bge.n	800f5aa <f_read+0x19a>
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	6a1a      	ldr	r2, [r3, #32]
 800f584:	69bb      	ldr	r3, [r7, #24]
 800f586:	1ad3      	subs	r3, r2, r3
 800f588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d90d      	bls.n	800f5aa <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	6a1a      	ldr	r2, [r3, #32]
 800f592:	69bb      	ldr	r3, [r7, #24]
 800f594:	1ad3      	subs	r3, r2, r3
 800f596:	025b      	lsls	r3, r3, #9
 800f598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f59a:	18d0      	adds	r0, r2, r3
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	3330      	adds	r3, #48	; 0x30
 800f5a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	f7fe f919 	bl	800d7dc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ac:	025b      	lsls	r3, r3, #9
 800f5ae:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800f5b0:	e050      	b.n	800f654 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	6a1b      	ldr	r3, [r3, #32]
 800f5b6:	69ba      	ldr	r2, [r7, #24]
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d02e      	beq.n	800f61a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	7d1b      	ldrb	r3, [r3, #20]
 800f5c0:	b25b      	sxtb	r3, r3
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	da18      	bge.n	800f5f8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	7858      	ldrb	r0, [r3, #1]
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	6a1a      	ldr	r2, [r3, #32]
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	f7fe f841 	bl	800d65c <disk_write>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d004      	beq.n	800f5ea <f_read+0x1da>
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	755a      	strb	r2, [r3, #21]
 800f5e6:	2301      	movs	r3, #1
 800f5e8:	e04d      	b.n	800f686 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	7d1b      	ldrb	r3, [r3, #20]
 800f5ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f5f2:	b2da      	uxtb	r2, r3
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	7858      	ldrb	r0, [r3, #1]
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f602:	2301      	movs	r3, #1
 800f604:	69ba      	ldr	r2, [r7, #24]
 800f606:	f7fe f809 	bl	800d61c <disk_read>
 800f60a:	4603      	mov	r3, r0
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d004      	beq.n	800f61a <f_read+0x20a>
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	2201      	movs	r2, #1
 800f614:	755a      	strb	r2, [r3, #21]
 800f616:	2301      	movs	r3, #1
 800f618:	e035      	b.n	800f686 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	69ba      	ldr	r2, [r7, #24]
 800f61e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	699b      	ldr	r3, [r3, #24]
 800f624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f628:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f62c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f62e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	429a      	cmp	r2, r3
 800f634:	d901      	bls.n	800f63a <f_read+0x22a>
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	699b      	ldr	r3, [r3, #24]
 800f644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f648:	4413      	add	r3, r2
 800f64a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f64c:	4619      	mov	r1, r3
 800f64e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f650:	f7fe f8c4 	bl	800d7dc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f658:	4413      	add	r3, r2
 800f65a:	627b      	str	r3, [r7, #36]	; 0x24
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	699a      	ldr	r2, [r3, #24]
 800f660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f662:	441a      	add	r2, r3
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	619a      	str	r2, [r3, #24]
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	681a      	ldr	r2, [r3, #0]
 800f66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f66e:	441a      	add	r2, r3
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	601a      	str	r2, [r3, #0]
 800f674:	687a      	ldr	r2, [r7, #4]
 800f676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f678:	1ad3      	subs	r3, r2, r3
 800f67a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	f47f af01 	bne.w	800f486 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f684:	2300      	movs	r3, #0
}
 800f686:	4618      	mov	r0, r3
 800f688:	3738      	adds	r7, #56	; 0x38
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}

0800f68e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f68e:	b580      	push	{r7, lr}
 800f690:	b086      	sub	sp, #24
 800f692:	af00      	add	r7, sp, #0
 800f694:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f107 0208 	add.w	r2, r7, #8
 800f69c:	4611      	mov	r1, r2
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7ff fc7c 	bl	800ef9c <validate>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f6a8:	7dfb      	ldrb	r3, [r7, #23]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d168      	bne.n	800f780 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	7d1b      	ldrb	r3, [r3, #20]
 800f6b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d062      	beq.n	800f780 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	7d1b      	ldrb	r3, [r3, #20]
 800f6be:	b25b      	sxtb	r3, r3
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	da15      	bge.n	800f6f0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	7858      	ldrb	r0, [r3, #1]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6a1a      	ldr	r2, [r3, #32]
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	f7fd ffc2 	bl	800d65c <disk_write>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d001      	beq.n	800f6e2 <f_sync+0x54>
 800f6de:	2301      	movs	r3, #1
 800f6e0:	e04f      	b.n	800f782 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	7d1b      	ldrb	r3, [r3, #20]
 800f6e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f6ea:	b2da      	uxtb	r2, r3
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f6f0:	f7fa ff5c 	bl	800a5ac <get_fattime>
 800f6f4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f6f6:	68ba      	ldr	r2, [r7, #8]
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6fc:	4619      	mov	r1, r3
 800f6fe:	4610      	mov	r0, r2
 800f700:	f7fe fa9a 	bl	800dc38 <move_window>
 800f704:	4603      	mov	r3, r0
 800f706:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f708:	7dfb      	ldrb	r3, [r7, #23]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d138      	bne.n	800f780 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f712:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	330b      	adds	r3, #11
 800f718:	781a      	ldrb	r2, [r3, #0]
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	330b      	adds	r3, #11
 800f71e:	f042 0220 	orr.w	r2, r2, #32
 800f722:	b2d2      	uxtb	r2, r2
 800f724:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6818      	ldr	r0, [r3, #0]
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	689b      	ldr	r3, [r3, #8]
 800f72e:	461a      	mov	r2, r3
 800f730:	68f9      	ldr	r1, [r7, #12]
 800f732:	f7fe ff9f 	bl	800e674 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	f103 021c 	add.w	r2, r3, #28
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	68db      	ldr	r3, [r3, #12]
 800f740:	4619      	mov	r1, r3
 800f742:	4610      	mov	r0, r2
 800f744:	f7fe f81e 	bl	800d784 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	3316      	adds	r3, #22
 800f74c:	6939      	ldr	r1, [r7, #16]
 800f74e:	4618      	mov	r0, r3
 800f750:	f7fe f818 	bl	800d784 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	3312      	adds	r3, #18
 800f758:	2100      	movs	r1, #0
 800f75a:	4618      	mov	r0, r3
 800f75c:	f7fd fff7 	bl	800d74e <st_word>
					fs->wflag = 1;
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	2201      	movs	r2, #1
 800f764:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	4618      	mov	r0, r3
 800f76a:	f7fe fa93 	bl	800dc94 <sync_fs>
 800f76e:	4603      	mov	r3, r0
 800f770:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	7d1b      	ldrb	r3, [r3, #20]
 800f776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f77a:	b2da      	uxtb	r2, r3
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f780:	7dfb      	ldrb	r3, [r7, #23]
}
 800f782:	4618      	mov	r0, r3
 800f784:	3718      	adds	r7, #24
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}

0800f78a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f78a:	b580      	push	{r7, lr}
 800f78c:	b084      	sub	sp, #16
 800f78e:	af00      	add	r7, sp, #0
 800f790:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f792:	6878      	ldr	r0, [r7, #4]
 800f794:	f7ff ff7b 	bl	800f68e <f_sync>
 800f798:	4603      	mov	r3, r0
 800f79a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f79c:	7bfb      	ldrb	r3, [r7, #15]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d118      	bne.n	800f7d4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f107 0208 	add.w	r2, r7, #8
 800f7a8:	4611      	mov	r1, r2
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f7ff fbf6 	bl	800ef9c <validate>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f7b4:	7bfb      	ldrb	r3, [r7, #15]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d10c      	bne.n	800f7d4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	691b      	ldr	r3, [r3, #16]
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f7fe f996 	bl	800daf0 <dec_lock>
 800f7c4:	4603      	mov	r3, r0
 800f7c6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f7c8:	7bfb      	ldrb	r3, [r7, #15]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d102      	bne.n	800f7d4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f7d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3710      	adds	r7, #16
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}

0800f7de <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f7de:	b580      	push	{r7, lr}
 800f7e0:	b090      	sub	sp, #64	; 0x40
 800f7e2:	af00      	add	r7, sp, #0
 800f7e4:	6078      	str	r0, [r7, #4]
 800f7e6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f107 0208 	add.w	r2, r7, #8
 800f7ee:	4611      	mov	r1, r2
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f7ff fbd3 	bl	800ef9c <validate>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f7fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f800:	2b00      	cmp	r3, #0
 800f802:	d103      	bne.n	800f80c <f_lseek+0x2e>
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	7d5b      	ldrb	r3, [r3, #21]
 800f808:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f80c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f810:	2b00      	cmp	r3, #0
 800f812:	d002      	beq.n	800f81a <f_lseek+0x3c>
 800f814:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f818:	e1e6      	b.n	800fbe8 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f81e:	2b00      	cmp	r3, #0
 800f820:	f000 80d1 	beq.w	800f9c6 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f82a:	d15a      	bne.n	800f8e2 <f_lseek+0x104>
			tbl = fp->cltbl;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f830:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f834:	1d1a      	adds	r2, r3, #4
 800f836:	627a      	str	r2, [r7, #36]	; 0x24
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	617b      	str	r3, [r7, #20]
 800f83c:	2302      	movs	r3, #2
 800f83e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	689b      	ldr	r3, [r3, #8]
 800f844:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800f846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d03a      	beq.n	800f8c2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f84e:	613b      	str	r3, [r7, #16]
 800f850:	2300      	movs	r3, #0
 800f852:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f856:	3302      	adds	r3, #2
 800f858:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800f85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f85c:	60fb      	str	r3, [r7, #12]
 800f85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f860:	3301      	adds	r3, #1
 800f862:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f868:	4618      	mov	r0, r3
 800f86a:	f7fe faa0 	bl	800ddae <get_fat>
 800f86e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f872:	2b01      	cmp	r3, #1
 800f874:	d804      	bhi.n	800f880 <f_lseek+0xa2>
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2202      	movs	r2, #2
 800f87a:	755a      	strb	r2, [r3, #21]
 800f87c:	2302      	movs	r3, #2
 800f87e:	e1b3      	b.n	800fbe8 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f882:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f886:	d104      	bne.n	800f892 <f_lseek+0xb4>
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2201      	movs	r2, #1
 800f88c:	755a      	strb	r2, [r3, #21]
 800f88e:	2301      	movs	r3, #1
 800f890:	e1aa      	b.n	800fbe8 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	3301      	adds	r3, #1
 800f896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f898:	429a      	cmp	r2, r3
 800f89a:	d0de      	beq.n	800f85a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f89c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f89e:	697b      	ldr	r3, [r7, #20]
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d809      	bhi.n	800f8b8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800f8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a6:	1d1a      	adds	r2, r3, #4
 800f8a8:	627a      	str	r2, [r7, #36]	; 0x24
 800f8aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f8ac:	601a      	str	r2, [r3, #0]
 800f8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b0:	1d1a      	adds	r2, r3, #4
 800f8b2:	627a      	str	r2, [r7, #36]	; 0x24
 800f8b4:	693a      	ldr	r2, [r7, #16]
 800f8b6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	695b      	ldr	r3, [r3, #20]
 800f8bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	d3c4      	bcc.n	800f84c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8c8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f8ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8cc:	697b      	ldr	r3, [r7, #20]
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d803      	bhi.n	800f8da <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800f8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	601a      	str	r2, [r3, #0]
 800f8d8:	e184      	b.n	800fbe4 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f8da:	2311      	movs	r3, #17
 800f8dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f8e0:	e180      	b.n	800fbe4 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	68db      	ldr	r3, [r3, #12]
 800f8e6:	683a      	ldr	r2, [r7, #0]
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d902      	bls.n	800f8f2 <f_lseek+0x114>
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	68db      	ldr	r3, [r3, #12]
 800f8f0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	683a      	ldr	r2, [r7, #0]
 800f8f6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	f000 8172 	beq.w	800fbe4 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	3b01      	subs	r3, #1
 800f904:	4619      	mov	r1, r3
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f7fe fcda 	bl	800e2c0 <clmt_clust>
 800f90c:	4602      	mov	r2, r0
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f912:	68ba      	ldr	r2, [r7, #8]
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	69db      	ldr	r3, [r3, #28]
 800f918:	4619      	mov	r1, r3
 800f91a:	4610      	mov	r0, r2
 800f91c:	f7fe fa28 	bl	800dd70 <clust2sect>
 800f920:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f922:	69bb      	ldr	r3, [r7, #24]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d104      	bne.n	800f932 <f_lseek+0x154>
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2202      	movs	r2, #2
 800f92c:	755a      	strb	r2, [r3, #21]
 800f92e:	2302      	movs	r3, #2
 800f930:	e15a      	b.n	800fbe8 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	3b01      	subs	r3, #1
 800f936:	0a5b      	lsrs	r3, r3, #9
 800f938:	68ba      	ldr	r2, [r7, #8]
 800f93a:	8952      	ldrh	r2, [r2, #10]
 800f93c:	3a01      	subs	r2, #1
 800f93e:	4013      	ands	r3, r2
 800f940:	69ba      	ldr	r2, [r7, #24]
 800f942:	4413      	add	r3, r2
 800f944:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	699b      	ldr	r3, [r3, #24]
 800f94a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f94e:	2b00      	cmp	r3, #0
 800f950:	f000 8148 	beq.w	800fbe4 <f_lseek+0x406>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	6a1b      	ldr	r3, [r3, #32]
 800f958:	69ba      	ldr	r2, [r7, #24]
 800f95a:	429a      	cmp	r2, r3
 800f95c:	f000 8142 	beq.w	800fbe4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	7d1b      	ldrb	r3, [r3, #20]
 800f964:	b25b      	sxtb	r3, r3
 800f966:	2b00      	cmp	r3, #0
 800f968:	da18      	bge.n	800f99c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f96a:	68bb      	ldr	r3, [r7, #8]
 800f96c:	7858      	ldrb	r0, [r3, #1]
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6a1a      	ldr	r2, [r3, #32]
 800f978:	2301      	movs	r3, #1
 800f97a:	f7fd fe6f 	bl	800d65c <disk_write>
 800f97e:	4603      	mov	r3, r0
 800f980:	2b00      	cmp	r3, #0
 800f982:	d004      	beq.n	800f98e <f_lseek+0x1b0>
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2201      	movs	r2, #1
 800f988:	755a      	strb	r2, [r3, #21]
 800f98a:	2301      	movs	r3, #1
 800f98c:	e12c      	b.n	800fbe8 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	7d1b      	ldrb	r3, [r3, #20]
 800f992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f996:	b2da      	uxtb	r2, r3
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	7858      	ldrb	r0, [r3, #1]
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	69ba      	ldr	r2, [r7, #24]
 800f9aa:	f7fd fe37 	bl	800d61c <disk_read>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d004      	beq.n	800f9be <f_lseek+0x1e0>
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2201      	movs	r2, #1
 800f9b8:	755a      	strb	r2, [r3, #21]
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	e114      	b.n	800fbe8 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	69ba      	ldr	r2, [r7, #24]
 800f9c2:	621a      	str	r2, [r3, #32]
 800f9c4:	e10e      	b.n	800fbe4 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	68db      	ldr	r3, [r3, #12]
 800f9ca:	683a      	ldr	r2, [r7, #0]
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d908      	bls.n	800f9e2 <f_lseek+0x204>
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	7d1b      	ldrb	r3, [r3, #20]
 800f9d4:	f003 0302 	and.w	r3, r3, #2
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d102      	bne.n	800f9e2 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	68db      	ldr	r3, [r3, #12]
 800f9e0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	699b      	ldr	r3, [r3, #24]
 800f9e6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	637b      	str	r3, [r7, #52]	; 0x34
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9f0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	f000 80a7 	beq.w	800fb48 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f9fa:	68bb      	ldr	r3, [r7, #8]
 800f9fc:	895b      	ldrh	r3, [r3, #10]
 800f9fe:	025b      	lsls	r3, r3, #9
 800fa00:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800fa02:	6a3b      	ldr	r3, [r7, #32]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d01b      	beq.n	800fa40 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	1e5a      	subs	r2, r3, #1
 800fa0c:	69fb      	ldr	r3, [r7, #28]
 800fa0e:	fbb2 f2f3 	udiv	r2, r2, r3
 800fa12:	6a3b      	ldr	r3, [r7, #32]
 800fa14:	1e59      	subs	r1, r3, #1
 800fa16:	69fb      	ldr	r3, [r7, #28]
 800fa18:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d30f      	bcc.n	800fa40 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800fa20:	6a3b      	ldr	r3, [r7, #32]
 800fa22:	1e5a      	subs	r2, r3, #1
 800fa24:	69fb      	ldr	r3, [r7, #28]
 800fa26:	425b      	negs	r3, r3
 800fa28:	401a      	ands	r2, r3
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	699b      	ldr	r3, [r3, #24]
 800fa32:	683a      	ldr	r2, [r7, #0]
 800fa34:	1ad3      	subs	r3, r2, r3
 800fa36:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	69db      	ldr	r3, [r3, #28]
 800fa3c:	63bb      	str	r3, [r7, #56]	; 0x38
 800fa3e:	e022      	b.n	800fa86 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	689b      	ldr	r3, [r3, #8]
 800fa44:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800fa46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d119      	bne.n	800fa80 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2100      	movs	r1, #0
 800fa50:	4618      	mov	r0, r3
 800fa52:	f7fe fb9d 	bl	800e190 <create_chain>
 800fa56:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fa58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa5a:	2b01      	cmp	r3, #1
 800fa5c:	d104      	bne.n	800fa68 <f_lseek+0x28a>
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2202      	movs	r2, #2
 800fa62:	755a      	strb	r2, [r3, #21]
 800fa64:	2302      	movs	r3, #2
 800fa66:	e0bf      	b.n	800fbe8 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fa68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa6e:	d104      	bne.n	800fa7a <f_lseek+0x29c>
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2201      	movs	r2, #1
 800fa74:	755a      	strb	r2, [r3, #21]
 800fa76:	2301      	movs	r3, #1
 800fa78:	e0b6      	b.n	800fbe8 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa7e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa84:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800fa86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d05d      	beq.n	800fb48 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800fa8c:	e03a      	b.n	800fb04 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800fa8e:	683a      	ldr	r2, [r7, #0]
 800fa90:	69fb      	ldr	r3, [r7, #28]
 800fa92:	1ad3      	subs	r3, r2, r3
 800fa94:	603b      	str	r3, [r7, #0]
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	699a      	ldr	r2, [r3, #24]
 800fa9a:	69fb      	ldr	r3, [r7, #28]
 800fa9c:	441a      	add	r2, r3
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	7d1b      	ldrb	r3, [r3, #20]
 800faa6:	f003 0302 	and.w	r3, r3, #2
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d00b      	beq.n	800fac6 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fab2:	4618      	mov	r0, r3
 800fab4:	f7fe fb6c 	bl	800e190 <create_chain>
 800fab8:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800faba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d108      	bne.n	800fad2 <f_lseek+0x2f4>
							ofs = 0; break;
 800fac0:	2300      	movs	r3, #0
 800fac2:	603b      	str	r3, [r7, #0]
 800fac4:	e022      	b.n	800fb0c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800faca:	4618      	mov	r0, r3
 800facc:	f7fe f96f 	bl	800ddae <get_fat>
 800fad0:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fad8:	d104      	bne.n	800fae4 <f_lseek+0x306>
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2201      	movs	r2, #1
 800fade:	755a      	strb	r2, [r3, #21]
 800fae0:	2301      	movs	r3, #1
 800fae2:	e081      	b.n	800fbe8 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800fae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fae6:	2b01      	cmp	r3, #1
 800fae8:	d904      	bls.n	800faf4 <f_lseek+0x316>
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	695b      	ldr	r3, [r3, #20]
 800faee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800faf0:	429a      	cmp	r2, r3
 800faf2:	d304      	bcc.n	800fafe <f_lseek+0x320>
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2202      	movs	r2, #2
 800faf8:	755a      	strb	r2, [r3, #21]
 800fafa:	2302      	movs	r3, #2
 800fafc:	e074      	b.n	800fbe8 <f_lseek+0x40a>
					fp->clust = clst;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb02:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800fb04:	683a      	ldr	r2, [r7, #0]
 800fb06:	69fb      	ldr	r3, [r7, #28]
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d8c0      	bhi.n	800fa8e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	699a      	ldr	r2, [r3, #24]
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	441a      	add	r2, r3
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d012      	beq.n	800fb48 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800fb22:	68bb      	ldr	r3, [r7, #8]
 800fb24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb26:	4618      	mov	r0, r3
 800fb28:	f7fe f922 	bl	800dd70 <clust2sect>
 800fb2c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800fb2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d104      	bne.n	800fb3e <f_lseek+0x360>
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2202      	movs	r2, #2
 800fb38:	755a      	strb	r2, [r3, #21]
 800fb3a:	2302      	movs	r3, #2
 800fb3c:	e054      	b.n	800fbe8 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	0a5b      	lsrs	r3, r3, #9
 800fb42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb44:	4413      	add	r3, r2
 800fb46:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	699a      	ldr	r2, [r3, #24]
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	68db      	ldr	r3, [r3, #12]
 800fb50:	429a      	cmp	r2, r3
 800fb52:	d90a      	bls.n	800fb6a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	699a      	ldr	r2, [r3, #24]
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	7d1b      	ldrb	r3, [r3, #20]
 800fb60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb64:	b2da      	uxtb	r2, r3
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	699b      	ldr	r3, [r3, #24]
 800fb6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d036      	beq.n	800fbe4 <f_lseek+0x406>
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6a1b      	ldr	r3, [r3, #32]
 800fb7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d031      	beq.n	800fbe4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	7d1b      	ldrb	r3, [r3, #20]
 800fb84:	b25b      	sxtb	r3, r3
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	da18      	bge.n	800fbbc <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	7858      	ldrb	r0, [r3, #1]
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	6a1a      	ldr	r2, [r3, #32]
 800fb98:	2301      	movs	r3, #1
 800fb9a:	f7fd fd5f 	bl	800d65c <disk_write>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d004      	beq.n	800fbae <f_lseek+0x3d0>
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2201      	movs	r2, #1
 800fba8:	755a      	strb	r2, [r3, #21]
 800fbaa:	2301      	movs	r3, #1
 800fbac:	e01c      	b.n	800fbe8 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	7d1b      	ldrb	r3, [r3, #20]
 800fbb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fbb6:	b2da      	uxtb	r2, r3
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800fbbc:	68bb      	ldr	r3, [r7, #8]
 800fbbe:	7858      	ldrb	r0, [r3, #1]
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbca:	f7fd fd27 	bl	800d61c <disk_read>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d004      	beq.n	800fbde <f_lseek+0x400>
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	2201      	movs	r2, #1
 800fbd8:	755a      	strb	r2, [r3, #21]
 800fbda:	2301      	movs	r3, #1
 800fbdc:	e004      	b.n	800fbe8 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbe2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800fbe4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800fbe8:	4618      	mov	r0, r3
 800fbea:	3740      	adds	r7, #64	; 0x40
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd80      	pop	{r7, pc}

0800fbf0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fbf0:	b480      	push	{r7}
 800fbf2:	b087      	sub	sp, #28
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	60f8      	str	r0, [r7, #12]
 800fbf8:	60b9      	str	r1, [r7, #8]
 800fbfa:	4613      	mov	r3, r2
 800fbfc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fbfe:	2301      	movs	r3, #1
 800fc00:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fc02:	2300      	movs	r3, #0
 800fc04:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fc06:	4b1f      	ldr	r3, [pc, #124]	; (800fc84 <FATFS_LinkDriverEx+0x94>)
 800fc08:	7a5b      	ldrb	r3, [r3, #9]
 800fc0a:	b2db      	uxtb	r3, r3
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d131      	bne.n	800fc74 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fc10:	4b1c      	ldr	r3, [pc, #112]	; (800fc84 <FATFS_LinkDriverEx+0x94>)
 800fc12:	7a5b      	ldrb	r3, [r3, #9]
 800fc14:	b2db      	uxtb	r3, r3
 800fc16:	461a      	mov	r2, r3
 800fc18:	4b1a      	ldr	r3, [pc, #104]	; (800fc84 <FATFS_LinkDriverEx+0x94>)
 800fc1a:	2100      	movs	r1, #0
 800fc1c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fc1e:	4b19      	ldr	r3, [pc, #100]	; (800fc84 <FATFS_LinkDriverEx+0x94>)
 800fc20:	7a5b      	ldrb	r3, [r3, #9]
 800fc22:	b2db      	uxtb	r3, r3
 800fc24:	4a17      	ldr	r2, [pc, #92]	; (800fc84 <FATFS_LinkDriverEx+0x94>)
 800fc26:	009b      	lsls	r3, r3, #2
 800fc28:	4413      	add	r3, r2
 800fc2a:	68fa      	ldr	r2, [r7, #12]
 800fc2c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fc2e:	4b15      	ldr	r3, [pc, #84]	; (800fc84 <FATFS_LinkDriverEx+0x94>)
 800fc30:	7a5b      	ldrb	r3, [r3, #9]
 800fc32:	b2db      	uxtb	r3, r3
 800fc34:	461a      	mov	r2, r3
 800fc36:	4b13      	ldr	r3, [pc, #76]	; (800fc84 <FATFS_LinkDriverEx+0x94>)
 800fc38:	4413      	add	r3, r2
 800fc3a:	79fa      	ldrb	r2, [r7, #7]
 800fc3c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fc3e:	4b11      	ldr	r3, [pc, #68]	; (800fc84 <FATFS_LinkDriverEx+0x94>)
 800fc40:	7a5b      	ldrb	r3, [r3, #9]
 800fc42:	b2db      	uxtb	r3, r3
 800fc44:	1c5a      	adds	r2, r3, #1
 800fc46:	b2d1      	uxtb	r1, r2
 800fc48:	4a0e      	ldr	r2, [pc, #56]	; (800fc84 <FATFS_LinkDriverEx+0x94>)
 800fc4a:	7251      	strb	r1, [r2, #9]
 800fc4c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fc4e:	7dbb      	ldrb	r3, [r7, #22]
 800fc50:	3330      	adds	r3, #48	; 0x30
 800fc52:	b2da      	uxtb	r2, r3
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fc58:	68bb      	ldr	r3, [r7, #8]
 800fc5a:	3301      	adds	r3, #1
 800fc5c:	223a      	movs	r2, #58	; 0x3a
 800fc5e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	3302      	adds	r3, #2
 800fc64:	222f      	movs	r2, #47	; 0x2f
 800fc66:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	3303      	adds	r3, #3
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fc70:	2300      	movs	r3, #0
 800fc72:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fc74:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	371c      	adds	r7, #28
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc80:	4770      	bx	lr
 800fc82:	bf00      	nop
 800fc84:	2000139c 	.word	0x2000139c

0800fc88 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b082      	sub	sp, #8
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
 800fc90:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fc92:	2200      	movs	r2, #0
 800fc94:	6839      	ldr	r1, [r7, #0]
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	f7ff ffaa 	bl	800fbf0 <FATFS_LinkDriverEx>
 800fc9c:	4603      	mov	r3, r0
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	3708      	adds	r7, #8
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}
	...

0800fca8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800fcac:	2201      	movs	r2, #1
 800fcae:	490e      	ldr	r1, [pc, #56]	; (800fce8 <MX_USB_HOST_Init+0x40>)
 800fcb0:	480e      	ldr	r0, [pc, #56]	; (800fcec <MX_USB_HOST_Init+0x44>)
 800fcb2:	f7fc f919 	bl	800bee8 <USBH_Init>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d001      	beq.n	800fcc0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800fcbc:	f7f2 fd7c 	bl	80027b8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800fcc0:	490b      	ldr	r1, [pc, #44]	; (800fcf0 <MX_USB_HOST_Init+0x48>)
 800fcc2:	480a      	ldr	r0, [pc, #40]	; (800fcec <MX_USB_HOST_Init+0x44>)
 800fcc4:	f7fc f99e 	bl	800c004 <USBH_RegisterClass>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d001      	beq.n	800fcd2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800fcce:	f7f2 fd73 	bl	80027b8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800fcd2:	4806      	ldr	r0, [pc, #24]	; (800fcec <MX_USB_HOST_Init+0x44>)
 800fcd4:	f7fc fa22 	bl	800c11c <USBH_Start>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d001      	beq.n	800fce2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800fcde:	f7f2 fd6b 	bl	80027b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800fce2:	bf00      	nop
 800fce4:	bd80      	pop	{r7, pc}
 800fce6:	bf00      	nop
 800fce8:	0800fd09 	.word	0x0800fd09
 800fcec:	20001a68 	.word	0x20001a68
 800fcf0:	20000014 	.word	0x20000014

0800fcf4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800fcf8:	4802      	ldr	r0, [pc, #8]	; (800fd04 <MX_USB_HOST_Process+0x10>)
 800fcfa:	f7fc fa1f 	bl	800c13c <USBH_Process>
}
 800fcfe:	bf00      	nop
 800fd00:	bd80      	pop	{r7, pc}
 800fd02:	bf00      	nop
 800fd04:	20001a68 	.word	0x20001a68

0800fd08 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b083      	sub	sp, #12
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
 800fd10:	460b      	mov	r3, r1
 800fd12:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800fd14:	78fb      	ldrb	r3, [r7, #3]
 800fd16:	3b01      	subs	r3, #1
 800fd18:	2b04      	cmp	r3, #4
 800fd1a:	d819      	bhi.n	800fd50 <USBH_UserProcess+0x48>
 800fd1c:	a201      	add	r2, pc, #4	; (adr r2, 800fd24 <USBH_UserProcess+0x1c>)
 800fd1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd22:	bf00      	nop
 800fd24:	0800fd51 	.word	0x0800fd51
 800fd28:	0800fd41 	.word	0x0800fd41
 800fd2c:	0800fd51 	.word	0x0800fd51
 800fd30:	0800fd49 	.word	0x0800fd49
 800fd34:	0800fd39 	.word	0x0800fd39
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800fd38:	4b09      	ldr	r3, [pc, #36]	; (800fd60 <USBH_UserProcess+0x58>)
 800fd3a:	2203      	movs	r2, #3
 800fd3c:	701a      	strb	r2, [r3, #0]
  break;
 800fd3e:	e008      	b.n	800fd52 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800fd40:	4b07      	ldr	r3, [pc, #28]	; (800fd60 <USBH_UserProcess+0x58>)
 800fd42:	2202      	movs	r2, #2
 800fd44:	701a      	strb	r2, [r3, #0]
  break;
 800fd46:	e004      	b.n	800fd52 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800fd48:	4b05      	ldr	r3, [pc, #20]	; (800fd60 <USBH_UserProcess+0x58>)
 800fd4a:	2201      	movs	r2, #1
 800fd4c:	701a      	strb	r2, [r3, #0]
  break;
 800fd4e:	e000      	b.n	800fd52 <USBH_UserProcess+0x4a>

  default:
  break;
 800fd50:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800fd52:	bf00      	nop
 800fd54:	370c      	adds	r7, #12
 800fd56:	46bd      	mov	sp, r7
 800fd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5c:	4770      	bx	lr
 800fd5e:	bf00      	nop
 800fd60:	200013a8 	.word	0x200013a8

0800fd64 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b08a      	sub	sp, #40	; 0x28
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fd6c:	f107 0314 	add.w	r3, r7, #20
 800fd70:	2200      	movs	r2, #0
 800fd72:	601a      	str	r2, [r3, #0]
 800fd74:	605a      	str	r2, [r3, #4]
 800fd76:	609a      	str	r2, [r3, #8]
 800fd78:	60da      	str	r2, [r3, #12]
 800fd7a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fd84:	d147      	bne.n	800fe16 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fd86:	2300      	movs	r3, #0
 800fd88:	613b      	str	r3, [r7, #16]
 800fd8a:	4b25      	ldr	r3, [pc, #148]	; (800fe20 <HAL_HCD_MspInit+0xbc>)
 800fd8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd8e:	4a24      	ldr	r2, [pc, #144]	; (800fe20 <HAL_HCD_MspInit+0xbc>)
 800fd90:	f043 0301 	orr.w	r3, r3, #1
 800fd94:	6313      	str	r3, [r2, #48]	; 0x30
 800fd96:	4b22      	ldr	r3, [pc, #136]	; (800fe20 <HAL_HCD_MspInit+0xbc>)
 800fd98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd9a:	f003 0301 	and.w	r3, r3, #1
 800fd9e:	613b      	str	r3, [r7, #16]
 800fda0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800fda2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fda6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fda8:	2300      	movs	r3, #0
 800fdaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fdac:	2300      	movs	r3, #0
 800fdae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fdb0:	f107 0314 	add.w	r3, r7, #20
 800fdb4:	4619      	mov	r1, r3
 800fdb6:	481b      	ldr	r0, [pc, #108]	; (800fe24 <HAL_HCD_MspInit+0xc0>)
 800fdb8:	f7f4 f988 	bl	80040cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fdbc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fdc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fdc2:	2302      	movs	r3, #2
 800fdc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fdca:	2303      	movs	r3, #3
 800fdcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fdce:	230a      	movs	r3, #10
 800fdd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fdd2:	f107 0314 	add.w	r3, r7, #20
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	4812      	ldr	r0, [pc, #72]	; (800fe24 <HAL_HCD_MspInit+0xc0>)
 800fdda:	f7f4 f977 	bl	80040cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fdde:	4b10      	ldr	r3, [pc, #64]	; (800fe20 <HAL_HCD_MspInit+0xbc>)
 800fde0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fde2:	4a0f      	ldr	r2, [pc, #60]	; (800fe20 <HAL_HCD_MspInit+0xbc>)
 800fde4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fde8:	6353      	str	r3, [r2, #52]	; 0x34
 800fdea:	2300      	movs	r3, #0
 800fdec:	60fb      	str	r3, [r7, #12]
 800fdee:	4b0c      	ldr	r3, [pc, #48]	; (800fe20 <HAL_HCD_MspInit+0xbc>)
 800fdf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fdf2:	4a0b      	ldr	r2, [pc, #44]	; (800fe20 <HAL_HCD_MspInit+0xbc>)
 800fdf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fdf8:	6453      	str	r3, [r2, #68]	; 0x44
 800fdfa:	4b09      	ldr	r3, [pc, #36]	; (800fe20 <HAL_HCD_MspInit+0xbc>)
 800fdfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fdfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fe02:	60fb      	str	r3, [r7, #12]
 800fe04:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fe06:	2200      	movs	r2, #0
 800fe08:	2100      	movs	r1, #0
 800fe0a:	2043      	movs	r0, #67	; 0x43
 800fe0c:	f7f3 fd49 	bl	80038a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fe10:	2043      	movs	r0, #67	; 0x43
 800fe12:	f7f3 fd62 	bl	80038da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fe16:	bf00      	nop
 800fe18:	3728      	adds	r7, #40	; 0x28
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	40023800 	.word	0x40023800
 800fe24:	40020000 	.word	0x40020000

0800fe28 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b082      	sub	sp, #8
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fe36:	4618      	mov	r0, r3
 800fe38:	f7fc fd53 	bl	800c8e2 <USBH_LL_IncTimer>
}
 800fe3c:	bf00      	nop
 800fe3e:	3708      	adds	r7, #8
 800fe40:	46bd      	mov	sp, r7
 800fe42:	bd80      	pop	{r7, pc}

0800fe44 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b082      	sub	sp, #8
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7fc fd8b 	bl	800c96e <USBH_LL_Connect>
}
 800fe58:	bf00      	nop
 800fe5a:	3708      	adds	r7, #8
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}

0800fe60 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b082      	sub	sp, #8
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7fc fd94 	bl	800c99c <USBH_LL_Disconnect>
}
 800fe74:	bf00      	nop
 800fe76:	3708      	adds	r7, #8
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}

0800fe7c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	b083      	sub	sp, #12
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
 800fe84:	460b      	mov	r3, r1
 800fe86:	70fb      	strb	r3, [r7, #3]
 800fe88:	4613      	mov	r3, r2
 800fe8a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800fe8c:	bf00      	nop
 800fe8e:	370c      	adds	r7, #12
 800fe90:	46bd      	mov	sp, r7
 800fe92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe96:	4770      	bx	lr

0800fe98 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b082      	sub	sp, #8
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fea6:	4618      	mov	r0, r3
 800fea8:	f7fc fd45 	bl	800c936 <USBH_LL_PortEnabled>
} 
 800feac:	bf00      	nop
 800feae:	3708      	adds	r7, #8
 800feb0:	46bd      	mov	sp, r7
 800feb2:	bd80      	pop	{r7, pc}

0800feb4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b082      	sub	sp, #8
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fec2:	4618      	mov	r0, r3
 800fec4:	f7fc fd45 	bl	800c952 <USBH_LL_PortDisabled>
} 
 800fec8:	bf00      	nop
 800feca:	3708      	adds	r7, #8
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}

0800fed0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b082      	sub	sp, #8
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800fede:	2b01      	cmp	r3, #1
 800fee0:	d12a      	bne.n	800ff38 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800fee2:	4a18      	ldr	r2, [pc, #96]	; (800ff44 <USBH_LL_Init+0x74>)
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	4a15      	ldr	r2, [pc, #84]	; (800ff44 <USBH_LL_Init+0x74>)
 800feee:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fef2:	4b14      	ldr	r3, [pc, #80]	; (800ff44 <USBH_LL_Init+0x74>)
 800fef4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fef8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800fefa:	4b12      	ldr	r3, [pc, #72]	; (800ff44 <USBH_LL_Init+0x74>)
 800fefc:	2208      	movs	r2, #8
 800fefe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ff00:	4b10      	ldr	r3, [pc, #64]	; (800ff44 <USBH_LL_Init+0x74>)
 800ff02:	2201      	movs	r2, #1
 800ff04:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ff06:	4b0f      	ldr	r3, [pc, #60]	; (800ff44 <USBH_LL_Init+0x74>)
 800ff08:	2200      	movs	r2, #0
 800ff0a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ff0c:	4b0d      	ldr	r3, [pc, #52]	; (800ff44 <USBH_LL_Init+0x74>)
 800ff0e:	2202      	movs	r2, #2
 800ff10:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ff12:	4b0c      	ldr	r3, [pc, #48]	; (800ff44 <USBH_LL_Init+0x74>)
 800ff14:	2200      	movs	r2, #0
 800ff16:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ff18:	480a      	ldr	r0, [pc, #40]	; (800ff44 <USBH_LL_Init+0x74>)
 800ff1a:	f7f4 fabd 	bl	8004498 <HAL_HCD_Init>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d001      	beq.n	800ff28 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ff24:	f7f2 fc48 	bl	80027b8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ff28:	4806      	ldr	r0, [pc, #24]	; (800ff44 <USBH_LL_Init+0x74>)
 800ff2a:	f7f4 fec1 	bl	8004cb0 <HAL_HCD_GetCurrentFrame>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	4619      	mov	r1, r3
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f7fc fcc6 	bl	800c8c4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ff38:	2300      	movs	r3, #0
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	3708      	adds	r7, #8
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	bf00      	nop
 800ff44:	20001e40 	.word	0x20001e40

0800ff48 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b084      	sub	sp, #16
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff50:	2300      	movs	r3, #0
 800ff52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ff54:	2300      	movs	r3, #0
 800ff56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7f4 fe2e 	bl	8004bc0 <HAL_HCD_Start>
 800ff64:	4603      	mov	r3, r0
 800ff66:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ff68:	7bfb      	ldrb	r3, [r7, #15]
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f000 f986 	bl	801027c <USBH_Get_USB_Status>
 800ff70:	4603      	mov	r3, r0
 800ff72:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ff74:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	3710      	adds	r7, #16
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}

0800ff7e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ff7e:	b580      	push	{r7, lr}
 800ff80:	b084      	sub	sp, #16
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff86:	2300      	movs	r3, #0
 800ff88:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ff94:	4618      	mov	r0, r3
 800ff96:	f7f4 fe36 	bl	8004c06 <HAL_HCD_Stop>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ff9e:	7bfb      	ldrb	r3, [r7, #15]
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f000 f96b 	bl	801027c <USBH_Get_USB_Status>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800ffaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800ffac:	4618      	mov	r0, r3
 800ffae:	3710      	adds	r7, #16
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd80      	pop	{r7, pc}

0800ffb4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b084      	sub	sp, #16
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ffbc:	2301      	movs	r3, #1
 800ffbe:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f7f4 fe80 	bl	8004ccc <HAL_HCD_GetCurrentSpeed>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	2b01      	cmp	r3, #1
 800ffd0:	d007      	beq.n	800ffe2 <USBH_LL_GetSpeed+0x2e>
 800ffd2:	2b01      	cmp	r3, #1
 800ffd4:	d302      	bcc.n	800ffdc <USBH_LL_GetSpeed+0x28>
 800ffd6:	2b02      	cmp	r3, #2
 800ffd8:	d006      	beq.n	800ffe8 <USBH_LL_GetSpeed+0x34>
 800ffda:	e008      	b.n	800ffee <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ffdc:	2300      	movs	r3, #0
 800ffde:	73fb      	strb	r3, [r7, #15]
    break;
 800ffe0:	e008      	b.n	800fff4 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	73fb      	strb	r3, [r7, #15]
    break;
 800ffe6:	e005      	b.n	800fff4 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ffe8:	2302      	movs	r3, #2
 800ffea:	73fb      	strb	r3, [r7, #15]
    break;
 800ffec:	e002      	b.n	800fff4 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800ffee:	2301      	movs	r3, #1
 800fff0:	73fb      	strb	r3, [r7, #15]
    break;
 800fff2:	bf00      	nop
  }
  return  speed;
 800fff4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	3710      	adds	r7, #16
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}

0800fffe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800fffe:	b580      	push	{r7, lr}
 8010000:	b084      	sub	sp, #16
 8010002:	af00      	add	r7, sp, #0
 8010004:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010006:	2300      	movs	r3, #0
 8010008:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801000a:	2300      	movs	r3, #0
 801000c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010014:	4618      	mov	r0, r3
 8010016:	f7f4 fe13 	bl	8004c40 <HAL_HCD_ResetPort>
 801001a:	4603      	mov	r3, r0
 801001c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 801001e:	7bfb      	ldrb	r3, [r7, #15]
 8010020:	4618      	mov	r0, r3
 8010022:	f000 f92b 	bl	801027c <USBH_Get_USB_Status>
 8010026:	4603      	mov	r3, r0
 8010028:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801002a:	7bbb      	ldrb	r3, [r7, #14]
}
 801002c:	4618      	mov	r0, r3
 801002e:	3710      	adds	r7, #16
 8010030:	46bd      	mov	sp, r7
 8010032:	bd80      	pop	{r7, pc}

08010034 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b082      	sub	sp, #8
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
 801003c:	460b      	mov	r3, r1
 801003e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010046:	78fa      	ldrb	r2, [r7, #3]
 8010048:	4611      	mov	r1, r2
 801004a:	4618      	mov	r0, r3
 801004c:	f7f4 fe1b 	bl	8004c86 <HAL_HCD_HC_GetXferCount>
 8010050:	4603      	mov	r3, r0
}
 8010052:	4618      	mov	r0, r3
 8010054:	3708      	adds	r7, #8
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}

0801005a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801005a:	b590      	push	{r4, r7, lr}
 801005c:	b089      	sub	sp, #36	; 0x24
 801005e:	af04      	add	r7, sp, #16
 8010060:	6078      	str	r0, [r7, #4]
 8010062:	4608      	mov	r0, r1
 8010064:	4611      	mov	r1, r2
 8010066:	461a      	mov	r2, r3
 8010068:	4603      	mov	r3, r0
 801006a:	70fb      	strb	r3, [r7, #3]
 801006c:	460b      	mov	r3, r1
 801006e:	70bb      	strb	r3, [r7, #2]
 8010070:	4613      	mov	r3, r2
 8010072:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010074:	2300      	movs	r3, #0
 8010076:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010078:	2300      	movs	r3, #0
 801007a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010082:	787c      	ldrb	r4, [r7, #1]
 8010084:	78ba      	ldrb	r2, [r7, #2]
 8010086:	78f9      	ldrb	r1, [r7, #3]
 8010088:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801008a:	9302      	str	r3, [sp, #8]
 801008c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010090:	9301      	str	r3, [sp, #4]
 8010092:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010096:	9300      	str	r3, [sp, #0]
 8010098:	4623      	mov	r3, r4
 801009a:	f7f4 fa5f 	bl	800455c <HAL_HCD_HC_Init>
 801009e:	4603      	mov	r3, r0
 80100a0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80100a2:	7bfb      	ldrb	r3, [r7, #15]
 80100a4:	4618      	mov	r0, r3
 80100a6:	f000 f8e9 	bl	801027c <USBH_Get_USB_Status>
 80100aa:	4603      	mov	r3, r0
 80100ac:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80100ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	3714      	adds	r7, #20
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd90      	pop	{r4, r7, pc}

080100b8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b084      	sub	sp, #16
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
 80100c0:	460b      	mov	r3, r1
 80100c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100c4:	2300      	movs	r3, #0
 80100c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80100c8:	2300      	movs	r3, #0
 80100ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80100d2:	78fa      	ldrb	r2, [r7, #3]
 80100d4:	4611      	mov	r1, r2
 80100d6:	4618      	mov	r0, r3
 80100d8:	f7f4 fad8 	bl	800468c <HAL_HCD_HC_Halt>
 80100dc:	4603      	mov	r3, r0
 80100de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80100e0:	7bfb      	ldrb	r3, [r7, #15]
 80100e2:	4618      	mov	r0, r3
 80100e4:	f000 f8ca 	bl	801027c <USBH_Get_USB_Status>
 80100e8:	4603      	mov	r3, r0
 80100ea:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80100ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3710      	adds	r7, #16
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}

080100f6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80100f6:	b590      	push	{r4, r7, lr}
 80100f8:	b089      	sub	sp, #36	; 0x24
 80100fa:	af04      	add	r7, sp, #16
 80100fc:	6078      	str	r0, [r7, #4]
 80100fe:	4608      	mov	r0, r1
 8010100:	4611      	mov	r1, r2
 8010102:	461a      	mov	r2, r3
 8010104:	4603      	mov	r3, r0
 8010106:	70fb      	strb	r3, [r7, #3]
 8010108:	460b      	mov	r3, r1
 801010a:	70bb      	strb	r3, [r7, #2]
 801010c:	4613      	mov	r3, r2
 801010e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010110:	2300      	movs	r3, #0
 8010112:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010114:	2300      	movs	r3, #0
 8010116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801011e:	787c      	ldrb	r4, [r7, #1]
 8010120:	78ba      	ldrb	r2, [r7, #2]
 8010122:	78f9      	ldrb	r1, [r7, #3]
 8010124:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010128:	9303      	str	r3, [sp, #12]
 801012a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801012c:	9302      	str	r3, [sp, #8]
 801012e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010130:	9301      	str	r3, [sp, #4]
 8010132:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010136:	9300      	str	r3, [sp, #0]
 8010138:	4623      	mov	r3, r4
 801013a:	f7f4 facb 	bl	80046d4 <HAL_HCD_HC_SubmitRequest>
 801013e:	4603      	mov	r3, r0
 8010140:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010142:	7bfb      	ldrb	r3, [r7, #15]
 8010144:	4618      	mov	r0, r3
 8010146:	f000 f899 	bl	801027c <USBH_Get_USB_Status>
 801014a:	4603      	mov	r3, r0
 801014c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801014e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010150:	4618      	mov	r0, r3
 8010152:	3714      	adds	r7, #20
 8010154:	46bd      	mov	sp, r7
 8010156:	bd90      	pop	{r4, r7, pc}

08010158 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b082      	sub	sp, #8
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
 8010160:	460b      	mov	r3, r1
 8010162:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801016a:	78fa      	ldrb	r2, [r7, #3]
 801016c:	4611      	mov	r1, r2
 801016e:	4618      	mov	r0, r3
 8010170:	f7f4 fd74 	bl	8004c5c <HAL_HCD_HC_GetURBState>
 8010174:	4603      	mov	r3, r0
}
 8010176:	4618      	mov	r0, r3
 8010178:	3708      	adds	r7, #8
 801017a:	46bd      	mov	sp, r7
 801017c:	bd80      	pop	{r7, pc}

0801017e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801017e:	b580      	push	{r7, lr}
 8010180:	b082      	sub	sp, #8
 8010182:	af00      	add	r7, sp, #0
 8010184:	6078      	str	r0, [r7, #4]
 8010186:	460b      	mov	r3, r1
 8010188:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 801018a:	20c8      	movs	r0, #200	; 0xc8
 801018c:	f7f2 fdee 	bl	8002d6c <HAL_Delay>
  return USBH_OK;
 8010190:	2300      	movs	r3, #0
}
 8010192:	4618      	mov	r0, r3
 8010194:	3708      	adds	r7, #8
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}

0801019a <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801019a:	b480      	push	{r7}
 801019c:	b085      	sub	sp, #20
 801019e:	af00      	add	r7, sp, #0
 80101a0:	6078      	str	r0, [r7, #4]
 80101a2:	460b      	mov	r3, r1
 80101a4:	70fb      	strb	r3, [r7, #3]
 80101a6:	4613      	mov	r3, r2
 80101a8:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80101b0:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80101b2:	78fa      	ldrb	r2, [r7, #3]
 80101b4:	68f9      	ldr	r1, [r7, #12]
 80101b6:	4613      	mov	r3, r2
 80101b8:	009b      	lsls	r3, r3, #2
 80101ba:	4413      	add	r3, r2
 80101bc:	00db      	lsls	r3, r3, #3
 80101be:	440b      	add	r3, r1
 80101c0:	333b      	adds	r3, #59	; 0x3b
 80101c2:	781b      	ldrb	r3, [r3, #0]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d00a      	beq.n	80101de <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80101c8:	78fa      	ldrb	r2, [r7, #3]
 80101ca:	68f9      	ldr	r1, [r7, #12]
 80101cc:	4613      	mov	r3, r2
 80101ce:	009b      	lsls	r3, r3, #2
 80101d0:	4413      	add	r3, r2
 80101d2:	00db      	lsls	r3, r3, #3
 80101d4:	440b      	add	r3, r1
 80101d6:	3350      	adds	r3, #80	; 0x50
 80101d8:	78ba      	ldrb	r2, [r7, #2]
 80101da:	701a      	strb	r2, [r3, #0]
 80101dc:	e009      	b.n	80101f2 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80101de:	78fa      	ldrb	r2, [r7, #3]
 80101e0:	68f9      	ldr	r1, [r7, #12]
 80101e2:	4613      	mov	r3, r2
 80101e4:	009b      	lsls	r3, r3, #2
 80101e6:	4413      	add	r3, r2
 80101e8:	00db      	lsls	r3, r3, #3
 80101ea:	440b      	add	r3, r1
 80101ec:	3351      	adds	r3, #81	; 0x51
 80101ee:	78ba      	ldrb	r2, [r7, #2]
 80101f0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80101f2:	2300      	movs	r3, #0
}
 80101f4:	4618      	mov	r0, r3
 80101f6:	3714      	adds	r7, #20
 80101f8:	46bd      	mov	sp, r7
 80101fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fe:	4770      	bx	lr

08010200 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010200:	b480      	push	{r7}
 8010202:	b085      	sub	sp, #20
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	460b      	mov	r3, r1
 801020a:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 801020c:	2300      	movs	r3, #0
 801020e:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010216:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8010218:	78fa      	ldrb	r2, [r7, #3]
 801021a:	68b9      	ldr	r1, [r7, #8]
 801021c:	4613      	mov	r3, r2
 801021e:	009b      	lsls	r3, r3, #2
 8010220:	4413      	add	r3, r2
 8010222:	00db      	lsls	r3, r3, #3
 8010224:	440b      	add	r3, r1
 8010226:	333b      	adds	r3, #59	; 0x3b
 8010228:	781b      	ldrb	r3, [r3, #0]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d00a      	beq.n	8010244 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 801022e:	78fa      	ldrb	r2, [r7, #3]
 8010230:	68b9      	ldr	r1, [r7, #8]
 8010232:	4613      	mov	r3, r2
 8010234:	009b      	lsls	r3, r3, #2
 8010236:	4413      	add	r3, r2
 8010238:	00db      	lsls	r3, r3, #3
 801023a:	440b      	add	r3, r1
 801023c:	3350      	adds	r3, #80	; 0x50
 801023e:	781b      	ldrb	r3, [r3, #0]
 8010240:	73fb      	strb	r3, [r7, #15]
 8010242:	e009      	b.n	8010258 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8010244:	78fa      	ldrb	r2, [r7, #3]
 8010246:	68b9      	ldr	r1, [r7, #8]
 8010248:	4613      	mov	r3, r2
 801024a:	009b      	lsls	r3, r3, #2
 801024c:	4413      	add	r3, r2
 801024e:	00db      	lsls	r3, r3, #3
 8010250:	440b      	add	r3, r1
 8010252:	3351      	adds	r3, #81	; 0x51
 8010254:	781b      	ldrb	r3, [r3, #0]
 8010256:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8010258:	7bfb      	ldrb	r3, [r7, #15]
}
 801025a:	4618      	mov	r0, r3
 801025c:	3714      	adds	r7, #20
 801025e:	46bd      	mov	sp, r7
 8010260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010264:	4770      	bx	lr

08010266 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010266:	b580      	push	{r7, lr}
 8010268:	b082      	sub	sp, #8
 801026a:	af00      	add	r7, sp, #0
 801026c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f7f2 fd7c 	bl	8002d6c <HAL_Delay>
}
 8010274:	bf00      	nop
 8010276:	3708      	adds	r7, #8
 8010278:	46bd      	mov	sp, r7
 801027a:	bd80      	pop	{r7, pc}

0801027c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801027c:	b480      	push	{r7}
 801027e:	b085      	sub	sp, #20
 8010280:	af00      	add	r7, sp, #0
 8010282:	4603      	mov	r3, r0
 8010284:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010286:	2300      	movs	r3, #0
 8010288:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801028a:	79fb      	ldrb	r3, [r7, #7]
 801028c:	2b03      	cmp	r3, #3
 801028e:	d817      	bhi.n	80102c0 <USBH_Get_USB_Status+0x44>
 8010290:	a201      	add	r2, pc, #4	; (adr r2, 8010298 <USBH_Get_USB_Status+0x1c>)
 8010292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010296:	bf00      	nop
 8010298:	080102a9 	.word	0x080102a9
 801029c:	080102af 	.word	0x080102af
 80102a0:	080102b5 	.word	0x080102b5
 80102a4:	080102bb 	.word	0x080102bb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80102a8:	2300      	movs	r3, #0
 80102aa:	73fb      	strb	r3, [r7, #15]
    break;
 80102ac:	e00b      	b.n	80102c6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80102ae:	2302      	movs	r3, #2
 80102b0:	73fb      	strb	r3, [r7, #15]
    break;
 80102b2:	e008      	b.n	80102c6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80102b4:	2301      	movs	r3, #1
 80102b6:	73fb      	strb	r3, [r7, #15]
    break;
 80102b8:	e005      	b.n	80102c6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80102ba:	2302      	movs	r3, #2
 80102bc:	73fb      	strb	r3, [r7, #15]
    break;
 80102be:	e002      	b.n	80102c6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80102c0:	2302      	movs	r3, #2
 80102c2:	73fb      	strb	r3, [r7, #15]
    break;
 80102c4:	bf00      	nop
  }
  return usb_status;
 80102c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80102c8:	4618      	mov	r0, r3
 80102ca:	3714      	adds	r7, #20
 80102cc:	46bd      	mov	sp, r7
 80102ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d2:	4770      	bx	lr

080102d4 <__errno>:
 80102d4:	4b01      	ldr	r3, [pc, #4]	; (80102dc <__errno+0x8>)
 80102d6:	6818      	ldr	r0, [r3, #0]
 80102d8:	4770      	bx	lr
 80102da:	bf00      	nop
 80102dc:	20000034 	.word	0x20000034

080102e0 <__libc_init_array>:
 80102e0:	b570      	push	{r4, r5, r6, lr}
 80102e2:	4e0d      	ldr	r6, [pc, #52]	; (8010318 <__libc_init_array+0x38>)
 80102e4:	4c0d      	ldr	r4, [pc, #52]	; (801031c <__libc_init_array+0x3c>)
 80102e6:	1ba4      	subs	r4, r4, r6
 80102e8:	10a4      	asrs	r4, r4, #2
 80102ea:	2500      	movs	r5, #0
 80102ec:	42a5      	cmp	r5, r4
 80102ee:	d109      	bne.n	8010304 <__libc_init_array+0x24>
 80102f0:	4e0b      	ldr	r6, [pc, #44]	; (8010320 <__libc_init_array+0x40>)
 80102f2:	4c0c      	ldr	r4, [pc, #48]	; (8010324 <__libc_init_array+0x44>)
 80102f4:	f000 fc38 	bl	8010b68 <_init>
 80102f8:	1ba4      	subs	r4, r4, r6
 80102fa:	10a4      	asrs	r4, r4, #2
 80102fc:	2500      	movs	r5, #0
 80102fe:	42a5      	cmp	r5, r4
 8010300:	d105      	bne.n	801030e <__libc_init_array+0x2e>
 8010302:	bd70      	pop	{r4, r5, r6, pc}
 8010304:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010308:	4798      	blx	r3
 801030a:	3501      	adds	r5, #1
 801030c:	e7ee      	b.n	80102ec <__libc_init_array+0xc>
 801030e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010312:	4798      	blx	r3
 8010314:	3501      	adds	r5, #1
 8010316:	e7f2      	b.n	80102fe <__libc_init_array+0x1e>
 8010318:	080117c8 	.word	0x080117c8
 801031c:	080117c8 	.word	0x080117c8
 8010320:	080117c8 	.word	0x080117c8
 8010324:	080117cc 	.word	0x080117cc

08010328 <malloc>:
 8010328:	4b02      	ldr	r3, [pc, #8]	; (8010334 <malloc+0xc>)
 801032a:	4601      	mov	r1, r0
 801032c:	6818      	ldr	r0, [r3, #0]
 801032e:	f000 b86d 	b.w	801040c <_malloc_r>
 8010332:	bf00      	nop
 8010334:	20000034 	.word	0x20000034

08010338 <free>:
 8010338:	4b02      	ldr	r3, [pc, #8]	; (8010344 <free+0xc>)
 801033a:	4601      	mov	r1, r0
 801033c:	6818      	ldr	r0, [r3, #0]
 801033e:	f000 b817 	b.w	8010370 <_free_r>
 8010342:	bf00      	nop
 8010344:	20000034 	.word	0x20000034

08010348 <memcpy>:
 8010348:	b510      	push	{r4, lr}
 801034a:	1e43      	subs	r3, r0, #1
 801034c:	440a      	add	r2, r1
 801034e:	4291      	cmp	r1, r2
 8010350:	d100      	bne.n	8010354 <memcpy+0xc>
 8010352:	bd10      	pop	{r4, pc}
 8010354:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010358:	f803 4f01 	strb.w	r4, [r3, #1]!
 801035c:	e7f7      	b.n	801034e <memcpy+0x6>

0801035e <memset>:
 801035e:	4402      	add	r2, r0
 8010360:	4603      	mov	r3, r0
 8010362:	4293      	cmp	r3, r2
 8010364:	d100      	bne.n	8010368 <memset+0xa>
 8010366:	4770      	bx	lr
 8010368:	f803 1b01 	strb.w	r1, [r3], #1
 801036c:	e7f9      	b.n	8010362 <memset+0x4>
	...

08010370 <_free_r>:
 8010370:	b538      	push	{r3, r4, r5, lr}
 8010372:	4605      	mov	r5, r0
 8010374:	2900      	cmp	r1, #0
 8010376:	d045      	beq.n	8010404 <_free_r+0x94>
 8010378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801037c:	1f0c      	subs	r4, r1, #4
 801037e:	2b00      	cmp	r3, #0
 8010380:	bfb8      	it	lt
 8010382:	18e4      	addlt	r4, r4, r3
 8010384:	f000 f8cc 	bl	8010520 <__malloc_lock>
 8010388:	4a1f      	ldr	r2, [pc, #124]	; (8010408 <_free_r+0x98>)
 801038a:	6813      	ldr	r3, [r2, #0]
 801038c:	4610      	mov	r0, r2
 801038e:	b933      	cbnz	r3, 801039e <_free_r+0x2e>
 8010390:	6063      	str	r3, [r4, #4]
 8010392:	6014      	str	r4, [r2, #0]
 8010394:	4628      	mov	r0, r5
 8010396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801039a:	f000 b8c2 	b.w	8010522 <__malloc_unlock>
 801039e:	42a3      	cmp	r3, r4
 80103a0:	d90c      	bls.n	80103bc <_free_r+0x4c>
 80103a2:	6821      	ldr	r1, [r4, #0]
 80103a4:	1862      	adds	r2, r4, r1
 80103a6:	4293      	cmp	r3, r2
 80103a8:	bf04      	itt	eq
 80103aa:	681a      	ldreq	r2, [r3, #0]
 80103ac:	685b      	ldreq	r3, [r3, #4]
 80103ae:	6063      	str	r3, [r4, #4]
 80103b0:	bf04      	itt	eq
 80103b2:	1852      	addeq	r2, r2, r1
 80103b4:	6022      	streq	r2, [r4, #0]
 80103b6:	6004      	str	r4, [r0, #0]
 80103b8:	e7ec      	b.n	8010394 <_free_r+0x24>
 80103ba:	4613      	mov	r3, r2
 80103bc:	685a      	ldr	r2, [r3, #4]
 80103be:	b10a      	cbz	r2, 80103c4 <_free_r+0x54>
 80103c0:	42a2      	cmp	r2, r4
 80103c2:	d9fa      	bls.n	80103ba <_free_r+0x4a>
 80103c4:	6819      	ldr	r1, [r3, #0]
 80103c6:	1858      	adds	r0, r3, r1
 80103c8:	42a0      	cmp	r0, r4
 80103ca:	d10b      	bne.n	80103e4 <_free_r+0x74>
 80103cc:	6820      	ldr	r0, [r4, #0]
 80103ce:	4401      	add	r1, r0
 80103d0:	1858      	adds	r0, r3, r1
 80103d2:	4282      	cmp	r2, r0
 80103d4:	6019      	str	r1, [r3, #0]
 80103d6:	d1dd      	bne.n	8010394 <_free_r+0x24>
 80103d8:	6810      	ldr	r0, [r2, #0]
 80103da:	6852      	ldr	r2, [r2, #4]
 80103dc:	605a      	str	r2, [r3, #4]
 80103de:	4401      	add	r1, r0
 80103e0:	6019      	str	r1, [r3, #0]
 80103e2:	e7d7      	b.n	8010394 <_free_r+0x24>
 80103e4:	d902      	bls.n	80103ec <_free_r+0x7c>
 80103e6:	230c      	movs	r3, #12
 80103e8:	602b      	str	r3, [r5, #0]
 80103ea:	e7d3      	b.n	8010394 <_free_r+0x24>
 80103ec:	6820      	ldr	r0, [r4, #0]
 80103ee:	1821      	adds	r1, r4, r0
 80103f0:	428a      	cmp	r2, r1
 80103f2:	bf04      	itt	eq
 80103f4:	6811      	ldreq	r1, [r2, #0]
 80103f6:	6852      	ldreq	r2, [r2, #4]
 80103f8:	6062      	str	r2, [r4, #4]
 80103fa:	bf04      	itt	eq
 80103fc:	1809      	addeq	r1, r1, r0
 80103fe:	6021      	streq	r1, [r4, #0]
 8010400:	605c      	str	r4, [r3, #4]
 8010402:	e7c7      	b.n	8010394 <_free_r+0x24>
 8010404:	bd38      	pop	{r3, r4, r5, pc}
 8010406:	bf00      	nop
 8010408:	200013ac 	.word	0x200013ac

0801040c <_malloc_r>:
 801040c:	b570      	push	{r4, r5, r6, lr}
 801040e:	1ccd      	adds	r5, r1, #3
 8010410:	f025 0503 	bic.w	r5, r5, #3
 8010414:	3508      	adds	r5, #8
 8010416:	2d0c      	cmp	r5, #12
 8010418:	bf38      	it	cc
 801041a:	250c      	movcc	r5, #12
 801041c:	2d00      	cmp	r5, #0
 801041e:	4606      	mov	r6, r0
 8010420:	db01      	blt.n	8010426 <_malloc_r+0x1a>
 8010422:	42a9      	cmp	r1, r5
 8010424:	d903      	bls.n	801042e <_malloc_r+0x22>
 8010426:	230c      	movs	r3, #12
 8010428:	6033      	str	r3, [r6, #0]
 801042a:	2000      	movs	r0, #0
 801042c:	bd70      	pop	{r4, r5, r6, pc}
 801042e:	f000 f877 	bl	8010520 <__malloc_lock>
 8010432:	4a21      	ldr	r2, [pc, #132]	; (80104b8 <_malloc_r+0xac>)
 8010434:	6814      	ldr	r4, [r2, #0]
 8010436:	4621      	mov	r1, r4
 8010438:	b991      	cbnz	r1, 8010460 <_malloc_r+0x54>
 801043a:	4c20      	ldr	r4, [pc, #128]	; (80104bc <_malloc_r+0xb0>)
 801043c:	6823      	ldr	r3, [r4, #0]
 801043e:	b91b      	cbnz	r3, 8010448 <_malloc_r+0x3c>
 8010440:	4630      	mov	r0, r6
 8010442:	f000 f83d 	bl	80104c0 <_sbrk_r>
 8010446:	6020      	str	r0, [r4, #0]
 8010448:	4629      	mov	r1, r5
 801044a:	4630      	mov	r0, r6
 801044c:	f000 f838 	bl	80104c0 <_sbrk_r>
 8010450:	1c43      	adds	r3, r0, #1
 8010452:	d124      	bne.n	801049e <_malloc_r+0x92>
 8010454:	230c      	movs	r3, #12
 8010456:	6033      	str	r3, [r6, #0]
 8010458:	4630      	mov	r0, r6
 801045a:	f000 f862 	bl	8010522 <__malloc_unlock>
 801045e:	e7e4      	b.n	801042a <_malloc_r+0x1e>
 8010460:	680b      	ldr	r3, [r1, #0]
 8010462:	1b5b      	subs	r3, r3, r5
 8010464:	d418      	bmi.n	8010498 <_malloc_r+0x8c>
 8010466:	2b0b      	cmp	r3, #11
 8010468:	d90f      	bls.n	801048a <_malloc_r+0x7e>
 801046a:	600b      	str	r3, [r1, #0]
 801046c:	50cd      	str	r5, [r1, r3]
 801046e:	18cc      	adds	r4, r1, r3
 8010470:	4630      	mov	r0, r6
 8010472:	f000 f856 	bl	8010522 <__malloc_unlock>
 8010476:	f104 000b 	add.w	r0, r4, #11
 801047a:	1d23      	adds	r3, r4, #4
 801047c:	f020 0007 	bic.w	r0, r0, #7
 8010480:	1ac3      	subs	r3, r0, r3
 8010482:	d0d3      	beq.n	801042c <_malloc_r+0x20>
 8010484:	425a      	negs	r2, r3
 8010486:	50e2      	str	r2, [r4, r3]
 8010488:	e7d0      	b.n	801042c <_malloc_r+0x20>
 801048a:	428c      	cmp	r4, r1
 801048c:	684b      	ldr	r3, [r1, #4]
 801048e:	bf16      	itet	ne
 8010490:	6063      	strne	r3, [r4, #4]
 8010492:	6013      	streq	r3, [r2, #0]
 8010494:	460c      	movne	r4, r1
 8010496:	e7eb      	b.n	8010470 <_malloc_r+0x64>
 8010498:	460c      	mov	r4, r1
 801049a:	6849      	ldr	r1, [r1, #4]
 801049c:	e7cc      	b.n	8010438 <_malloc_r+0x2c>
 801049e:	1cc4      	adds	r4, r0, #3
 80104a0:	f024 0403 	bic.w	r4, r4, #3
 80104a4:	42a0      	cmp	r0, r4
 80104a6:	d005      	beq.n	80104b4 <_malloc_r+0xa8>
 80104a8:	1a21      	subs	r1, r4, r0
 80104aa:	4630      	mov	r0, r6
 80104ac:	f000 f808 	bl	80104c0 <_sbrk_r>
 80104b0:	3001      	adds	r0, #1
 80104b2:	d0cf      	beq.n	8010454 <_malloc_r+0x48>
 80104b4:	6025      	str	r5, [r4, #0]
 80104b6:	e7db      	b.n	8010470 <_malloc_r+0x64>
 80104b8:	200013ac 	.word	0x200013ac
 80104bc:	200013b0 	.word	0x200013b0

080104c0 <_sbrk_r>:
 80104c0:	b538      	push	{r3, r4, r5, lr}
 80104c2:	4c06      	ldr	r4, [pc, #24]	; (80104dc <_sbrk_r+0x1c>)
 80104c4:	2300      	movs	r3, #0
 80104c6:	4605      	mov	r5, r0
 80104c8:	4608      	mov	r0, r1
 80104ca:	6023      	str	r3, [r4, #0]
 80104cc:	f7f2 fa90 	bl	80029f0 <_sbrk>
 80104d0:	1c43      	adds	r3, r0, #1
 80104d2:	d102      	bne.n	80104da <_sbrk_r+0x1a>
 80104d4:	6823      	ldr	r3, [r4, #0]
 80104d6:	b103      	cbz	r3, 80104da <_sbrk_r+0x1a>
 80104d8:	602b      	str	r3, [r5, #0]
 80104da:	bd38      	pop	{r3, r4, r5, pc}
 80104dc:	20002104 	.word	0x20002104

080104e0 <siprintf>:
 80104e0:	b40e      	push	{r1, r2, r3}
 80104e2:	b500      	push	{lr}
 80104e4:	b09c      	sub	sp, #112	; 0x70
 80104e6:	ab1d      	add	r3, sp, #116	; 0x74
 80104e8:	9002      	str	r0, [sp, #8]
 80104ea:	9006      	str	r0, [sp, #24]
 80104ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80104f0:	4809      	ldr	r0, [pc, #36]	; (8010518 <siprintf+0x38>)
 80104f2:	9107      	str	r1, [sp, #28]
 80104f4:	9104      	str	r1, [sp, #16]
 80104f6:	4909      	ldr	r1, [pc, #36]	; (801051c <siprintf+0x3c>)
 80104f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80104fc:	9105      	str	r1, [sp, #20]
 80104fe:	6800      	ldr	r0, [r0, #0]
 8010500:	9301      	str	r3, [sp, #4]
 8010502:	a902      	add	r1, sp, #8
 8010504:	f000 f868 	bl	80105d8 <_svfiprintf_r>
 8010508:	9b02      	ldr	r3, [sp, #8]
 801050a:	2200      	movs	r2, #0
 801050c:	701a      	strb	r2, [r3, #0]
 801050e:	b01c      	add	sp, #112	; 0x70
 8010510:	f85d eb04 	ldr.w	lr, [sp], #4
 8010514:	b003      	add	sp, #12
 8010516:	4770      	bx	lr
 8010518:	20000034 	.word	0x20000034
 801051c:	ffff0208 	.word	0xffff0208

08010520 <__malloc_lock>:
 8010520:	4770      	bx	lr

08010522 <__malloc_unlock>:
 8010522:	4770      	bx	lr

08010524 <__ssputs_r>:
 8010524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010528:	688e      	ldr	r6, [r1, #8]
 801052a:	429e      	cmp	r6, r3
 801052c:	4682      	mov	sl, r0
 801052e:	460c      	mov	r4, r1
 8010530:	4690      	mov	r8, r2
 8010532:	4699      	mov	r9, r3
 8010534:	d837      	bhi.n	80105a6 <__ssputs_r+0x82>
 8010536:	898a      	ldrh	r2, [r1, #12]
 8010538:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801053c:	d031      	beq.n	80105a2 <__ssputs_r+0x7e>
 801053e:	6825      	ldr	r5, [r4, #0]
 8010540:	6909      	ldr	r1, [r1, #16]
 8010542:	1a6f      	subs	r7, r5, r1
 8010544:	6965      	ldr	r5, [r4, #20]
 8010546:	2302      	movs	r3, #2
 8010548:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801054c:	fb95 f5f3 	sdiv	r5, r5, r3
 8010550:	f109 0301 	add.w	r3, r9, #1
 8010554:	443b      	add	r3, r7
 8010556:	429d      	cmp	r5, r3
 8010558:	bf38      	it	cc
 801055a:	461d      	movcc	r5, r3
 801055c:	0553      	lsls	r3, r2, #21
 801055e:	d530      	bpl.n	80105c2 <__ssputs_r+0x9e>
 8010560:	4629      	mov	r1, r5
 8010562:	f7ff ff53 	bl	801040c <_malloc_r>
 8010566:	4606      	mov	r6, r0
 8010568:	b950      	cbnz	r0, 8010580 <__ssputs_r+0x5c>
 801056a:	230c      	movs	r3, #12
 801056c:	f8ca 3000 	str.w	r3, [sl]
 8010570:	89a3      	ldrh	r3, [r4, #12]
 8010572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010576:	81a3      	strh	r3, [r4, #12]
 8010578:	f04f 30ff 	mov.w	r0, #4294967295
 801057c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010580:	463a      	mov	r2, r7
 8010582:	6921      	ldr	r1, [r4, #16]
 8010584:	f7ff fee0 	bl	8010348 <memcpy>
 8010588:	89a3      	ldrh	r3, [r4, #12]
 801058a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801058e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010592:	81a3      	strh	r3, [r4, #12]
 8010594:	6126      	str	r6, [r4, #16]
 8010596:	6165      	str	r5, [r4, #20]
 8010598:	443e      	add	r6, r7
 801059a:	1bed      	subs	r5, r5, r7
 801059c:	6026      	str	r6, [r4, #0]
 801059e:	60a5      	str	r5, [r4, #8]
 80105a0:	464e      	mov	r6, r9
 80105a2:	454e      	cmp	r6, r9
 80105a4:	d900      	bls.n	80105a8 <__ssputs_r+0x84>
 80105a6:	464e      	mov	r6, r9
 80105a8:	4632      	mov	r2, r6
 80105aa:	4641      	mov	r1, r8
 80105ac:	6820      	ldr	r0, [r4, #0]
 80105ae:	f000 fa93 	bl	8010ad8 <memmove>
 80105b2:	68a3      	ldr	r3, [r4, #8]
 80105b4:	1b9b      	subs	r3, r3, r6
 80105b6:	60a3      	str	r3, [r4, #8]
 80105b8:	6823      	ldr	r3, [r4, #0]
 80105ba:	441e      	add	r6, r3
 80105bc:	6026      	str	r6, [r4, #0]
 80105be:	2000      	movs	r0, #0
 80105c0:	e7dc      	b.n	801057c <__ssputs_r+0x58>
 80105c2:	462a      	mov	r2, r5
 80105c4:	f000 faa1 	bl	8010b0a <_realloc_r>
 80105c8:	4606      	mov	r6, r0
 80105ca:	2800      	cmp	r0, #0
 80105cc:	d1e2      	bne.n	8010594 <__ssputs_r+0x70>
 80105ce:	6921      	ldr	r1, [r4, #16]
 80105d0:	4650      	mov	r0, sl
 80105d2:	f7ff fecd 	bl	8010370 <_free_r>
 80105d6:	e7c8      	b.n	801056a <__ssputs_r+0x46>

080105d8 <_svfiprintf_r>:
 80105d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105dc:	461d      	mov	r5, r3
 80105de:	898b      	ldrh	r3, [r1, #12]
 80105e0:	061f      	lsls	r7, r3, #24
 80105e2:	b09d      	sub	sp, #116	; 0x74
 80105e4:	4680      	mov	r8, r0
 80105e6:	460c      	mov	r4, r1
 80105e8:	4616      	mov	r6, r2
 80105ea:	d50f      	bpl.n	801060c <_svfiprintf_r+0x34>
 80105ec:	690b      	ldr	r3, [r1, #16]
 80105ee:	b96b      	cbnz	r3, 801060c <_svfiprintf_r+0x34>
 80105f0:	2140      	movs	r1, #64	; 0x40
 80105f2:	f7ff ff0b 	bl	801040c <_malloc_r>
 80105f6:	6020      	str	r0, [r4, #0]
 80105f8:	6120      	str	r0, [r4, #16]
 80105fa:	b928      	cbnz	r0, 8010608 <_svfiprintf_r+0x30>
 80105fc:	230c      	movs	r3, #12
 80105fe:	f8c8 3000 	str.w	r3, [r8]
 8010602:	f04f 30ff 	mov.w	r0, #4294967295
 8010606:	e0c8      	b.n	801079a <_svfiprintf_r+0x1c2>
 8010608:	2340      	movs	r3, #64	; 0x40
 801060a:	6163      	str	r3, [r4, #20]
 801060c:	2300      	movs	r3, #0
 801060e:	9309      	str	r3, [sp, #36]	; 0x24
 8010610:	2320      	movs	r3, #32
 8010612:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010616:	2330      	movs	r3, #48	; 0x30
 8010618:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801061c:	9503      	str	r5, [sp, #12]
 801061e:	f04f 0b01 	mov.w	fp, #1
 8010622:	4637      	mov	r7, r6
 8010624:	463d      	mov	r5, r7
 8010626:	f815 3b01 	ldrb.w	r3, [r5], #1
 801062a:	b10b      	cbz	r3, 8010630 <_svfiprintf_r+0x58>
 801062c:	2b25      	cmp	r3, #37	; 0x25
 801062e:	d13e      	bne.n	80106ae <_svfiprintf_r+0xd6>
 8010630:	ebb7 0a06 	subs.w	sl, r7, r6
 8010634:	d00b      	beq.n	801064e <_svfiprintf_r+0x76>
 8010636:	4653      	mov	r3, sl
 8010638:	4632      	mov	r2, r6
 801063a:	4621      	mov	r1, r4
 801063c:	4640      	mov	r0, r8
 801063e:	f7ff ff71 	bl	8010524 <__ssputs_r>
 8010642:	3001      	adds	r0, #1
 8010644:	f000 80a4 	beq.w	8010790 <_svfiprintf_r+0x1b8>
 8010648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801064a:	4453      	add	r3, sl
 801064c:	9309      	str	r3, [sp, #36]	; 0x24
 801064e:	783b      	ldrb	r3, [r7, #0]
 8010650:	2b00      	cmp	r3, #0
 8010652:	f000 809d 	beq.w	8010790 <_svfiprintf_r+0x1b8>
 8010656:	2300      	movs	r3, #0
 8010658:	f04f 32ff 	mov.w	r2, #4294967295
 801065c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010660:	9304      	str	r3, [sp, #16]
 8010662:	9307      	str	r3, [sp, #28]
 8010664:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010668:	931a      	str	r3, [sp, #104]	; 0x68
 801066a:	462f      	mov	r7, r5
 801066c:	2205      	movs	r2, #5
 801066e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010672:	4850      	ldr	r0, [pc, #320]	; (80107b4 <_svfiprintf_r+0x1dc>)
 8010674:	f7ef fdac 	bl	80001d0 <memchr>
 8010678:	9b04      	ldr	r3, [sp, #16]
 801067a:	b9d0      	cbnz	r0, 80106b2 <_svfiprintf_r+0xda>
 801067c:	06d9      	lsls	r1, r3, #27
 801067e:	bf44      	itt	mi
 8010680:	2220      	movmi	r2, #32
 8010682:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010686:	071a      	lsls	r2, r3, #28
 8010688:	bf44      	itt	mi
 801068a:	222b      	movmi	r2, #43	; 0x2b
 801068c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010690:	782a      	ldrb	r2, [r5, #0]
 8010692:	2a2a      	cmp	r2, #42	; 0x2a
 8010694:	d015      	beq.n	80106c2 <_svfiprintf_r+0xea>
 8010696:	9a07      	ldr	r2, [sp, #28]
 8010698:	462f      	mov	r7, r5
 801069a:	2000      	movs	r0, #0
 801069c:	250a      	movs	r5, #10
 801069e:	4639      	mov	r1, r7
 80106a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106a4:	3b30      	subs	r3, #48	; 0x30
 80106a6:	2b09      	cmp	r3, #9
 80106a8:	d94d      	bls.n	8010746 <_svfiprintf_r+0x16e>
 80106aa:	b1b8      	cbz	r0, 80106dc <_svfiprintf_r+0x104>
 80106ac:	e00f      	b.n	80106ce <_svfiprintf_r+0xf6>
 80106ae:	462f      	mov	r7, r5
 80106b0:	e7b8      	b.n	8010624 <_svfiprintf_r+0x4c>
 80106b2:	4a40      	ldr	r2, [pc, #256]	; (80107b4 <_svfiprintf_r+0x1dc>)
 80106b4:	1a80      	subs	r0, r0, r2
 80106b6:	fa0b f000 	lsl.w	r0, fp, r0
 80106ba:	4318      	orrs	r0, r3
 80106bc:	9004      	str	r0, [sp, #16]
 80106be:	463d      	mov	r5, r7
 80106c0:	e7d3      	b.n	801066a <_svfiprintf_r+0x92>
 80106c2:	9a03      	ldr	r2, [sp, #12]
 80106c4:	1d11      	adds	r1, r2, #4
 80106c6:	6812      	ldr	r2, [r2, #0]
 80106c8:	9103      	str	r1, [sp, #12]
 80106ca:	2a00      	cmp	r2, #0
 80106cc:	db01      	blt.n	80106d2 <_svfiprintf_r+0xfa>
 80106ce:	9207      	str	r2, [sp, #28]
 80106d0:	e004      	b.n	80106dc <_svfiprintf_r+0x104>
 80106d2:	4252      	negs	r2, r2
 80106d4:	f043 0302 	orr.w	r3, r3, #2
 80106d8:	9207      	str	r2, [sp, #28]
 80106da:	9304      	str	r3, [sp, #16]
 80106dc:	783b      	ldrb	r3, [r7, #0]
 80106de:	2b2e      	cmp	r3, #46	; 0x2e
 80106e0:	d10c      	bne.n	80106fc <_svfiprintf_r+0x124>
 80106e2:	787b      	ldrb	r3, [r7, #1]
 80106e4:	2b2a      	cmp	r3, #42	; 0x2a
 80106e6:	d133      	bne.n	8010750 <_svfiprintf_r+0x178>
 80106e8:	9b03      	ldr	r3, [sp, #12]
 80106ea:	1d1a      	adds	r2, r3, #4
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	9203      	str	r2, [sp, #12]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	bfb8      	it	lt
 80106f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80106f8:	3702      	adds	r7, #2
 80106fa:	9305      	str	r3, [sp, #20]
 80106fc:	4d2e      	ldr	r5, [pc, #184]	; (80107b8 <_svfiprintf_r+0x1e0>)
 80106fe:	7839      	ldrb	r1, [r7, #0]
 8010700:	2203      	movs	r2, #3
 8010702:	4628      	mov	r0, r5
 8010704:	f7ef fd64 	bl	80001d0 <memchr>
 8010708:	b138      	cbz	r0, 801071a <_svfiprintf_r+0x142>
 801070a:	2340      	movs	r3, #64	; 0x40
 801070c:	1b40      	subs	r0, r0, r5
 801070e:	fa03 f000 	lsl.w	r0, r3, r0
 8010712:	9b04      	ldr	r3, [sp, #16]
 8010714:	4303      	orrs	r3, r0
 8010716:	3701      	adds	r7, #1
 8010718:	9304      	str	r3, [sp, #16]
 801071a:	7839      	ldrb	r1, [r7, #0]
 801071c:	4827      	ldr	r0, [pc, #156]	; (80107bc <_svfiprintf_r+0x1e4>)
 801071e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010722:	2206      	movs	r2, #6
 8010724:	1c7e      	adds	r6, r7, #1
 8010726:	f7ef fd53 	bl	80001d0 <memchr>
 801072a:	2800      	cmp	r0, #0
 801072c:	d038      	beq.n	80107a0 <_svfiprintf_r+0x1c8>
 801072e:	4b24      	ldr	r3, [pc, #144]	; (80107c0 <_svfiprintf_r+0x1e8>)
 8010730:	bb13      	cbnz	r3, 8010778 <_svfiprintf_r+0x1a0>
 8010732:	9b03      	ldr	r3, [sp, #12]
 8010734:	3307      	adds	r3, #7
 8010736:	f023 0307 	bic.w	r3, r3, #7
 801073a:	3308      	adds	r3, #8
 801073c:	9303      	str	r3, [sp, #12]
 801073e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010740:	444b      	add	r3, r9
 8010742:	9309      	str	r3, [sp, #36]	; 0x24
 8010744:	e76d      	b.n	8010622 <_svfiprintf_r+0x4a>
 8010746:	fb05 3202 	mla	r2, r5, r2, r3
 801074a:	2001      	movs	r0, #1
 801074c:	460f      	mov	r7, r1
 801074e:	e7a6      	b.n	801069e <_svfiprintf_r+0xc6>
 8010750:	2300      	movs	r3, #0
 8010752:	3701      	adds	r7, #1
 8010754:	9305      	str	r3, [sp, #20]
 8010756:	4619      	mov	r1, r3
 8010758:	250a      	movs	r5, #10
 801075a:	4638      	mov	r0, r7
 801075c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010760:	3a30      	subs	r2, #48	; 0x30
 8010762:	2a09      	cmp	r2, #9
 8010764:	d903      	bls.n	801076e <_svfiprintf_r+0x196>
 8010766:	2b00      	cmp	r3, #0
 8010768:	d0c8      	beq.n	80106fc <_svfiprintf_r+0x124>
 801076a:	9105      	str	r1, [sp, #20]
 801076c:	e7c6      	b.n	80106fc <_svfiprintf_r+0x124>
 801076e:	fb05 2101 	mla	r1, r5, r1, r2
 8010772:	2301      	movs	r3, #1
 8010774:	4607      	mov	r7, r0
 8010776:	e7f0      	b.n	801075a <_svfiprintf_r+0x182>
 8010778:	ab03      	add	r3, sp, #12
 801077a:	9300      	str	r3, [sp, #0]
 801077c:	4622      	mov	r2, r4
 801077e:	4b11      	ldr	r3, [pc, #68]	; (80107c4 <_svfiprintf_r+0x1ec>)
 8010780:	a904      	add	r1, sp, #16
 8010782:	4640      	mov	r0, r8
 8010784:	f3af 8000 	nop.w
 8010788:	f1b0 3fff 	cmp.w	r0, #4294967295
 801078c:	4681      	mov	r9, r0
 801078e:	d1d6      	bne.n	801073e <_svfiprintf_r+0x166>
 8010790:	89a3      	ldrh	r3, [r4, #12]
 8010792:	065b      	lsls	r3, r3, #25
 8010794:	f53f af35 	bmi.w	8010602 <_svfiprintf_r+0x2a>
 8010798:	9809      	ldr	r0, [sp, #36]	; 0x24
 801079a:	b01d      	add	sp, #116	; 0x74
 801079c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107a0:	ab03      	add	r3, sp, #12
 80107a2:	9300      	str	r3, [sp, #0]
 80107a4:	4622      	mov	r2, r4
 80107a6:	4b07      	ldr	r3, [pc, #28]	; (80107c4 <_svfiprintf_r+0x1ec>)
 80107a8:	a904      	add	r1, sp, #16
 80107aa:	4640      	mov	r0, r8
 80107ac:	f000 f882 	bl	80108b4 <_printf_i>
 80107b0:	e7ea      	b.n	8010788 <_svfiprintf_r+0x1b0>
 80107b2:	bf00      	nop
 80107b4:	0801178c 	.word	0x0801178c
 80107b8:	08011792 	.word	0x08011792
 80107bc:	08011796 	.word	0x08011796
 80107c0:	00000000 	.word	0x00000000
 80107c4:	08010525 	.word	0x08010525

080107c8 <_printf_common>:
 80107c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107cc:	4691      	mov	r9, r2
 80107ce:	461f      	mov	r7, r3
 80107d0:	688a      	ldr	r2, [r1, #8]
 80107d2:	690b      	ldr	r3, [r1, #16]
 80107d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80107d8:	4293      	cmp	r3, r2
 80107da:	bfb8      	it	lt
 80107dc:	4613      	movlt	r3, r2
 80107de:	f8c9 3000 	str.w	r3, [r9]
 80107e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80107e6:	4606      	mov	r6, r0
 80107e8:	460c      	mov	r4, r1
 80107ea:	b112      	cbz	r2, 80107f2 <_printf_common+0x2a>
 80107ec:	3301      	adds	r3, #1
 80107ee:	f8c9 3000 	str.w	r3, [r9]
 80107f2:	6823      	ldr	r3, [r4, #0]
 80107f4:	0699      	lsls	r1, r3, #26
 80107f6:	bf42      	ittt	mi
 80107f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80107fc:	3302      	addmi	r3, #2
 80107fe:	f8c9 3000 	strmi.w	r3, [r9]
 8010802:	6825      	ldr	r5, [r4, #0]
 8010804:	f015 0506 	ands.w	r5, r5, #6
 8010808:	d107      	bne.n	801081a <_printf_common+0x52>
 801080a:	f104 0a19 	add.w	sl, r4, #25
 801080e:	68e3      	ldr	r3, [r4, #12]
 8010810:	f8d9 2000 	ldr.w	r2, [r9]
 8010814:	1a9b      	subs	r3, r3, r2
 8010816:	42ab      	cmp	r3, r5
 8010818:	dc28      	bgt.n	801086c <_printf_common+0xa4>
 801081a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801081e:	6822      	ldr	r2, [r4, #0]
 8010820:	3300      	adds	r3, #0
 8010822:	bf18      	it	ne
 8010824:	2301      	movne	r3, #1
 8010826:	0692      	lsls	r2, r2, #26
 8010828:	d42d      	bmi.n	8010886 <_printf_common+0xbe>
 801082a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801082e:	4639      	mov	r1, r7
 8010830:	4630      	mov	r0, r6
 8010832:	47c0      	blx	r8
 8010834:	3001      	adds	r0, #1
 8010836:	d020      	beq.n	801087a <_printf_common+0xb2>
 8010838:	6823      	ldr	r3, [r4, #0]
 801083a:	68e5      	ldr	r5, [r4, #12]
 801083c:	f8d9 2000 	ldr.w	r2, [r9]
 8010840:	f003 0306 	and.w	r3, r3, #6
 8010844:	2b04      	cmp	r3, #4
 8010846:	bf08      	it	eq
 8010848:	1aad      	subeq	r5, r5, r2
 801084a:	68a3      	ldr	r3, [r4, #8]
 801084c:	6922      	ldr	r2, [r4, #16]
 801084e:	bf0c      	ite	eq
 8010850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010854:	2500      	movne	r5, #0
 8010856:	4293      	cmp	r3, r2
 8010858:	bfc4      	itt	gt
 801085a:	1a9b      	subgt	r3, r3, r2
 801085c:	18ed      	addgt	r5, r5, r3
 801085e:	f04f 0900 	mov.w	r9, #0
 8010862:	341a      	adds	r4, #26
 8010864:	454d      	cmp	r5, r9
 8010866:	d11a      	bne.n	801089e <_printf_common+0xd6>
 8010868:	2000      	movs	r0, #0
 801086a:	e008      	b.n	801087e <_printf_common+0xb6>
 801086c:	2301      	movs	r3, #1
 801086e:	4652      	mov	r2, sl
 8010870:	4639      	mov	r1, r7
 8010872:	4630      	mov	r0, r6
 8010874:	47c0      	blx	r8
 8010876:	3001      	adds	r0, #1
 8010878:	d103      	bne.n	8010882 <_printf_common+0xba>
 801087a:	f04f 30ff 	mov.w	r0, #4294967295
 801087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010882:	3501      	adds	r5, #1
 8010884:	e7c3      	b.n	801080e <_printf_common+0x46>
 8010886:	18e1      	adds	r1, r4, r3
 8010888:	1c5a      	adds	r2, r3, #1
 801088a:	2030      	movs	r0, #48	; 0x30
 801088c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010890:	4422      	add	r2, r4
 8010892:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010896:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801089a:	3302      	adds	r3, #2
 801089c:	e7c5      	b.n	801082a <_printf_common+0x62>
 801089e:	2301      	movs	r3, #1
 80108a0:	4622      	mov	r2, r4
 80108a2:	4639      	mov	r1, r7
 80108a4:	4630      	mov	r0, r6
 80108a6:	47c0      	blx	r8
 80108a8:	3001      	adds	r0, #1
 80108aa:	d0e6      	beq.n	801087a <_printf_common+0xb2>
 80108ac:	f109 0901 	add.w	r9, r9, #1
 80108b0:	e7d8      	b.n	8010864 <_printf_common+0x9c>
	...

080108b4 <_printf_i>:
 80108b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80108bc:	460c      	mov	r4, r1
 80108be:	7e09      	ldrb	r1, [r1, #24]
 80108c0:	b085      	sub	sp, #20
 80108c2:	296e      	cmp	r1, #110	; 0x6e
 80108c4:	4617      	mov	r7, r2
 80108c6:	4606      	mov	r6, r0
 80108c8:	4698      	mov	r8, r3
 80108ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80108cc:	f000 80b3 	beq.w	8010a36 <_printf_i+0x182>
 80108d0:	d822      	bhi.n	8010918 <_printf_i+0x64>
 80108d2:	2963      	cmp	r1, #99	; 0x63
 80108d4:	d036      	beq.n	8010944 <_printf_i+0x90>
 80108d6:	d80a      	bhi.n	80108ee <_printf_i+0x3a>
 80108d8:	2900      	cmp	r1, #0
 80108da:	f000 80b9 	beq.w	8010a50 <_printf_i+0x19c>
 80108de:	2958      	cmp	r1, #88	; 0x58
 80108e0:	f000 8083 	beq.w	80109ea <_printf_i+0x136>
 80108e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80108e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80108ec:	e032      	b.n	8010954 <_printf_i+0xa0>
 80108ee:	2964      	cmp	r1, #100	; 0x64
 80108f0:	d001      	beq.n	80108f6 <_printf_i+0x42>
 80108f2:	2969      	cmp	r1, #105	; 0x69
 80108f4:	d1f6      	bne.n	80108e4 <_printf_i+0x30>
 80108f6:	6820      	ldr	r0, [r4, #0]
 80108f8:	6813      	ldr	r3, [r2, #0]
 80108fa:	0605      	lsls	r5, r0, #24
 80108fc:	f103 0104 	add.w	r1, r3, #4
 8010900:	d52a      	bpl.n	8010958 <_printf_i+0xa4>
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	6011      	str	r1, [r2, #0]
 8010906:	2b00      	cmp	r3, #0
 8010908:	da03      	bge.n	8010912 <_printf_i+0x5e>
 801090a:	222d      	movs	r2, #45	; 0x2d
 801090c:	425b      	negs	r3, r3
 801090e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010912:	486f      	ldr	r0, [pc, #444]	; (8010ad0 <_printf_i+0x21c>)
 8010914:	220a      	movs	r2, #10
 8010916:	e039      	b.n	801098c <_printf_i+0xd8>
 8010918:	2973      	cmp	r1, #115	; 0x73
 801091a:	f000 809d 	beq.w	8010a58 <_printf_i+0x1a4>
 801091e:	d808      	bhi.n	8010932 <_printf_i+0x7e>
 8010920:	296f      	cmp	r1, #111	; 0x6f
 8010922:	d020      	beq.n	8010966 <_printf_i+0xb2>
 8010924:	2970      	cmp	r1, #112	; 0x70
 8010926:	d1dd      	bne.n	80108e4 <_printf_i+0x30>
 8010928:	6823      	ldr	r3, [r4, #0]
 801092a:	f043 0320 	orr.w	r3, r3, #32
 801092e:	6023      	str	r3, [r4, #0]
 8010930:	e003      	b.n	801093a <_printf_i+0x86>
 8010932:	2975      	cmp	r1, #117	; 0x75
 8010934:	d017      	beq.n	8010966 <_printf_i+0xb2>
 8010936:	2978      	cmp	r1, #120	; 0x78
 8010938:	d1d4      	bne.n	80108e4 <_printf_i+0x30>
 801093a:	2378      	movs	r3, #120	; 0x78
 801093c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010940:	4864      	ldr	r0, [pc, #400]	; (8010ad4 <_printf_i+0x220>)
 8010942:	e055      	b.n	80109f0 <_printf_i+0x13c>
 8010944:	6813      	ldr	r3, [r2, #0]
 8010946:	1d19      	adds	r1, r3, #4
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	6011      	str	r1, [r2, #0]
 801094c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010950:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010954:	2301      	movs	r3, #1
 8010956:	e08c      	b.n	8010a72 <_printf_i+0x1be>
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	6011      	str	r1, [r2, #0]
 801095c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010960:	bf18      	it	ne
 8010962:	b21b      	sxthne	r3, r3
 8010964:	e7cf      	b.n	8010906 <_printf_i+0x52>
 8010966:	6813      	ldr	r3, [r2, #0]
 8010968:	6825      	ldr	r5, [r4, #0]
 801096a:	1d18      	adds	r0, r3, #4
 801096c:	6010      	str	r0, [r2, #0]
 801096e:	0628      	lsls	r0, r5, #24
 8010970:	d501      	bpl.n	8010976 <_printf_i+0xc2>
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	e002      	b.n	801097c <_printf_i+0xc8>
 8010976:	0668      	lsls	r0, r5, #25
 8010978:	d5fb      	bpl.n	8010972 <_printf_i+0xbe>
 801097a:	881b      	ldrh	r3, [r3, #0]
 801097c:	4854      	ldr	r0, [pc, #336]	; (8010ad0 <_printf_i+0x21c>)
 801097e:	296f      	cmp	r1, #111	; 0x6f
 8010980:	bf14      	ite	ne
 8010982:	220a      	movne	r2, #10
 8010984:	2208      	moveq	r2, #8
 8010986:	2100      	movs	r1, #0
 8010988:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801098c:	6865      	ldr	r5, [r4, #4]
 801098e:	60a5      	str	r5, [r4, #8]
 8010990:	2d00      	cmp	r5, #0
 8010992:	f2c0 8095 	blt.w	8010ac0 <_printf_i+0x20c>
 8010996:	6821      	ldr	r1, [r4, #0]
 8010998:	f021 0104 	bic.w	r1, r1, #4
 801099c:	6021      	str	r1, [r4, #0]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d13d      	bne.n	8010a1e <_printf_i+0x16a>
 80109a2:	2d00      	cmp	r5, #0
 80109a4:	f040 808e 	bne.w	8010ac4 <_printf_i+0x210>
 80109a8:	4665      	mov	r5, ip
 80109aa:	2a08      	cmp	r2, #8
 80109ac:	d10b      	bne.n	80109c6 <_printf_i+0x112>
 80109ae:	6823      	ldr	r3, [r4, #0]
 80109b0:	07db      	lsls	r3, r3, #31
 80109b2:	d508      	bpl.n	80109c6 <_printf_i+0x112>
 80109b4:	6923      	ldr	r3, [r4, #16]
 80109b6:	6862      	ldr	r2, [r4, #4]
 80109b8:	429a      	cmp	r2, r3
 80109ba:	bfde      	ittt	le
 80109bc:	2330      	movle	r3, #48	; 0x30
 80109be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80109c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80109c6:	ebac 0305 	sub.w	r3, ip, r5
 80109ca:	6123      	str	r3, [r4, #16]
 80109cc:	f8cd 8000 	str.w	r8, [sp]
 80109d0:	463b      	mov	r3, r7
 80109d2:	aa03      	add	r2, sp, #12
 80109d4:	4621      	mov	r1, r4
 80109d6:	4630      	mov	r0, r6
 80109d8:	f7ff fef6 	bl	80107c8 <_printf_common>
 80109dc:	3001      	adds	r0, #1
 80109de:	d14d      	bne.n	8010a7c <_printf_i+0x1c8>
 80109e0:	f04f 30ff 	mov.w	r0, #4294967295
 80109e4:	b005      	add	sp, #20
 80109e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109ea:	4839      	ldr	r0, [pc, #228]	; (8010ad0 <_printf_i+0x21c>)
 80109ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80109f0:	6813      	ldr	r3, [r2, #0]
 80109f2:	6821      	ldr	r1, [r4, #0]
 80109f4:	1d1d      	adds	r5, r3, #4
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	6015      	str	r5, [r2, #0]
 80109fa:	060a      	lsls	r2, r1, #24
 80109fc:	d50b      	bpl.n	8010a16 <_printf_i+0x162>
 80109fe:	07ca      	lsls	r2, r1, #31
 8010a00:	bf44      	itt	mi
 8010a02:	f041 0120 	orrmi.w	r1, r1, #32
 8010a06:	6021      	strmi	r1, [r4, #0]
 8010a08:	b91b      	cbnz	r3, 8010a12 <_printf_i+0x15e>
 8010a0a:	6822      	ldr	r2, [r4, #0]
 8010a0c:	f022 0220 	bic.w	r2, r2, #32
 8010a10:	6022      	str	r2, [r4, #0]
 8010a12:	2210      	movs	r2, #16
 8010a14:	e7b7      	b.n	8010986 <_printf_i+0xd2>
 8010a16:	064d      	lsls	r5, r1, #25
 8010a18:	bf48      	it	mi
 8010a1a:	b29b      	uxthmi	r3, r3
 8010a1c:	e7ef      	b.n	80109fe <_printf_i+0x14a>
 8010a1e:	4665      	mov	r5, ip
 8010a20:	fbb3 f1f2 	udiv	r1, r3, r2
 8010a24:	fb02 3311 	mls	r3, r2, r1, r3
 8010a28:	5cc3      	ldrb	r3, [r0, r3]
 8010a2a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010a2e:	460b      	mov	r3, r1
 8010a30:	2900      	cmp	r1, #0
 8010a32:	d1f5      	bne.n	8010a20 <_printf_i+0x16c>
 8010a34:	e7b9      	b.n	80109aa <_printf_i+0xf6>
 8010a36:	6813      	ldr	r3, [r2, #0]
 8010a38:	6825      	ldr	r5, [r4, #0]
 8010a3a:	6961      	ldr	r1, [r4, #20]
 8010a3c:	1d18      	adds	r0, r3, #4
 8010a3e:	6010      	str	r0, [r2, #0]
 8010a40:	0628      	lsls	r0, r5, #24
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	d501      	bpl.n	8010a4a <_printf_i+0x196>
 8010a46:	6019      	str	r1, [r3, #0]
 8010a48:	e002      	b.n	8010a50 <_printf_i+0x19c>
 8010a4a:	066a      	lsls	r2, r5, #25
 8010a4c:	d5fb      	bpl.n	8010a46 <_printf_i+0x192>
 8010a4e:	8019      	strh	r1, [r3, #0]
 8010a50:	2300      	movs	r3, #0
 8010a52:	6123      	str	r3, [r4, #16]
 8010a54:	4665      	mov	r5, ip
 8010a56:	e7b9      	b.n	80109cc <_printf_i+0x118>
 8010a58:	6813      	ldr	r3, [r2, #0]
 8010a5a:	1d19      	adds	r1, r3, #4
 8010a5c:	6011      	str	r1, [r2, #0]
 8010a5e:	681d      	ldr	r5, [r3, #0]
 8010a60:	6862      	ldr	r2, [r4, #4]
 8010a62:	2100      	movs	r1, #0
 8010a64:	4628      	mov	r0, r5
 8010a66:	f7ef fbb3 	bl	80001d0 <memchr>
 8010a6a:	b108      	cbz	r0, 8010a70 <_printf_i+0x1bc>
 8010a6c:	1b40      	subs	r0, r0, r5
 8010a6e:	6060      	str	r0, [r4, #4]
 8010a70:	6863      	ldr	r3, [r4, #4]
 8010a72:	6123      	str	r3, [r4, #16]
 8010a74:	2300      	movs	r3, #0
 8010a76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a7a:	e7a7      	b.n	80109cc <_printf_i+0x118>
 8010a7c:	6923      	ldr	r3, [r4, #16]
 8010a7e:	462a      	mov	r2, r5
 8010a80:	4639      	mov	r1, r7
 8010a82:	4630      	mov	r0, r6
 8010a84:	47c0      	blx	r8
 8010a86:	3001      	adds	r0, #1
 8010a88:	d0aa      	beq.n	80109e0 <_printf_i+0x12c>
 8010a8a:	6823      	ldr	r3, [r4, #0]
 8010a8c:	079b      	lsls	r3, r3, #30
 8010a8e:	d413      	bmi.n	8010ab8 <_printf_i+0x204>
 8010a90:	68e0      	ldr	r0, [r4, #12]
 8010a92:	9b03      	ldr	r3, [sp, #12]
 8010a94:	4298      	cmp	r0, r3
 8010a96:	bfb8      	it	lt
 8010a98:	4618      	movlt	r0, r3
 8010a9a:	e7a3      	b.n	80109e4 <_printf_i+0x130>
 8010a9c:	2301      	movs	r3, #1
 8010a9e:	464a      	mov	r2, r9
 8010aa0:	4639      	mov	r1, r7
 8010aa2:	4630      	mov	r0, r6
 8010aa4:	47c0      	blx	r8
 8010aa6:	3001      	adds	r0, #1
 8010aa8:	d09a      	beq.n	80109e0 <_printf_i+0x12c>
 8010aaa:	3501      	adds	r5, #1
 8010aac:	68e3      	ldr	r3, [r4, #12]
 8010aae:	9a03      	ldr	r2, [sp, #12]
 8010ab0:	1a9b      	subs	r3, r3, r2
 8010ab2:	42ab      	cmp	r3, r5
 8010ab4:	dcf2      	bgt.n	8010a9c <_printf_i+0x1e8>
 8010ab6:	e7eb      	b.n	8010a90 <_printf_i+0x1dc>
 8010ab8:	2500      	movs	r5, #0
 8010aba:	f104 0919 	add.w	r9, r4, #25
 8010abe:	e7f5      	b.n	8010aac <_printf_i+0x1f8>
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d1ac      	bne.n	8010a1e <_printf_i+0x16a>
 8010ac4:	7803      	ldrb	r3, [r0, #0]
 8010ac6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010aca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010ace:	e76c      	b.n	80109aa <_printf_i+0xf6>
 8010ad0:	0801179d 	.word	0x0801179d
 8010ad4:	080117ae 	.word	0x080117ae

08010ad8 <memmove>:
 8010ad8:	4288      	cmp	r0, r1
 8010ada:	b510      	push	{r4, lr}
 8010adc:	eb01 0302 	add.w	r3, r1, r2
 8010ae0:	d807      	bhi.n	8010af2 <memmove+0x1a>
 8010ae2:	1e42      	subs	r2, r0, #1
 8010ae4:	4299      	cmp	r1, r3
 8010ae6:	d00a      	beq.n	8010afe <memmove+0x26>
 8010ae8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010aec:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010af0:	e7f8      	b.n	8010ae4 <memmove+0xc>
 8010af2:	4283      	cmp	r3, r0
 8010af4:	d9f5      	bls.n	8010ae2 <memmove+0xa>
 8010af6:	1881      	adds	r1, r0, r2
 8010af8:	1ad2      	subs	r2, r2, r3
 8010afa:	42d3      	cmn	r3, r2
 8010afc:	d100      	bne.n	8010b00 <memmove+0x28>
 8010afe:	bd10      	pop	{r4, pc}
 8010b00:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010b04:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010b08:	e7f7      	b.n	8010afa <memmove+0x22>

08010b0a <_realloc_r>:
 8010b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b0c:	4607      	mov	r7, r0
 8010b0e:	4614      	mov	r4, r2
 8010b10:	460e      	mov	r6, r1
 8010b12:	b921      	cbnz	r1, 8010b1e <_realloc_r+0x14>
 8010b14:	4611      	mov	r1, r2
 8010b16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010b1a:	f7ff bc77 	b.w	801040c <_malloc_r>
 8010b1e:	b922      	cbnz	r2, 8010b2a <_realloc_r+0x20>
 8010b20:	f7ff fc26 	bl	8010370 <_free_r>
 8010b24:	4625      	mov	r5, r4
 8010b26:	4628      	mov	r0, r5
 8010b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b2a:	f000 f814 	bl	8010b56 <_malloc_usable_size_r>
 8010b2e:	42a0      	cmp	r0, r4
 8010b30:	d20f      	bcs.n	8010b52 <_realloc_r+0x48>
 8010b32:	4621      	mov	r1, r4
 8010b34:	4638      	mov	r0, r7
 8010b36:	f7ff fc69 	bl	801040c <_malloc_r>
 8010b3a:	4605      	mov	r5, r0
 8010b3c:	2800      	cmp	r0, #0
 8010b3e:	d0f2      	beq.n	8010b26 <_realloc_r+0x1c>
 8010b40:	4631      	mov	r1, r6
 8010b42:	4622      	mov	r2, r4
 8010b44:	f7ff fc00 	bl	8010348 <memcpy>
 8010b48:	4631      	mov	r1, r6
 8010b4a:	4638      	mov	r0, r7
 8010b4c:	f7ff fc10 	bl	8010370 <_free_r>
 8010b50:	e7e9      	b.n	8010b26 <_realloc_r+0x1c>
 8010b52:	4635      	mov	r5, r6
 8010b54:	e7e7      	b.n	8010b26 <_realloc_r+0x1c>

08010b56 <_malloc_usable_size_r>:
 8010b56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b5a:	1f18      	subs	r0, r3, #4
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	bfbc      	itt	lt
 8010b60:	580b      	ldrlt	r3, [r1, r0]
 8010b62:	18c0      	addlt	r0, r0, r3
 8010b64:	4770      	bx	lr
	...

08010b68 <_init>:
 8010b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b6a:	bf00      	nop
 8010b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b6e:	bc08      	pop	{r3}
 8010b70:	469e      	mov	lr, r3
 8010b72:	4770      	bx	lr

08010b74 <_fini>:
 8010b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b76:	bf00      	nop
 8010b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b7a:	bc08      	pop	{r3}
 8010b7c:	469e      	mov	lr, r3
 8010b7e:	4770      	bx	lr
